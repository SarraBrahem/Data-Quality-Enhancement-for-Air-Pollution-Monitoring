// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package qdd.test_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: test Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class test implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "test";
	private final String projectName = "QDD";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					test.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(test.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUniqRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHttpRequest_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractJSONFields_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row31_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row32_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_tUnite_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_tUnite_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_tUnite_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_tUnite_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashOutput_tUnite_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_15_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHashInput_tUnite_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_4_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_4_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_4_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_5_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_5_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_5_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_3_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_3_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_3_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_15_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputExcel_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_tUnite_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_tUnite_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tHashInput_tUnite_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row31Struct implements routines.system.IPersistableComparableLookupRow<row31Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Vile;

		public String getVile() {
			return this.Vile;
		}

		public String Lat;

		public String getLat() {
			return this.Lat;
		}

		public String Lon;

		public String getLon() {
			return this.Lon;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Lat == null) ? 0 : this.Lat.hashCode());

				result = prime * result + ((this.Lon == null) ? 0 : this.Lon.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row31Struct other = (row31Struct) obj;

			if (this.Lat == null) {
				if (other.Lat != null)
					return false;

			} else if (!this.Lat.equals(other.Lat))

				return false;

			if (this.Lon == null) {
				if (other.Lon != null)
					return false;

			} else if (!this.Lon.equals(other.Lon))

				return false;

			return true;
		}

		public void copyDataTo(row31Struct other) {

			other.Vile = this.Vile;
			other.Lat = this.Lat;
			other.Lon = this.Lon;

		}

		public void copyKeysDataTo(row31Struct other) {

			other.Lat = this.Lat;
			other.Lon = this.Lon;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.Lat = readString(dis);

					this.Lon = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.Lat = readString(dis);

					this.Lon = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Vile = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.Vile = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Vile, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.Vile, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Vile=" + Vile);
			sb.append(",Lat=" + Lat);
			sb.append(",Lon=" + Lon);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row31Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Lat, other.Lat);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Lon, other.Lon);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];

		public String Vile;

		public String getVile() {
			return this.Vile;
		}

		public String Lat;

		public String getLat() {
			return this.Lat;
		}

		public String Lon;

		public String getLon() {
			return this.Lon;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.Vile = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.Vile = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Vile, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Vile, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Vile=" + Vile);
			sb.append(",Lat=" + Lat);
			sb.append(",Lon=" + Lon);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row33Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];

		public String Vile;

		public String getVile() {
			return this.Vile;
		}

		public String Lat;

		public String getLat() {
			return this.Lat;
		}

		public String Lon;

		public String getLon() {
			return this.Lon;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.Vile = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.Vile = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Vile, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Vile, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Vile=" + Vile);
			sb.append(",Lat=" + Lat);
			sb.append(",Lon=" + Lon);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row26Struct row26 = new row26Struct();
				row33Struct row33 = new row33Struct();
				row33Struct row31 = row33;

				/**
				 * [tAdvancedHash_row31 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row31", false);
				start_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row31";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row31");
				}

				int tos_count_tAdvancedHash_row31 = 0;

				// connection name:row31
				// source node:tLogRow_5 - inputs:(row33) outputs:(row31,row31) | target
				// node:tAdvancedHash_row31 - inputs:(row31) outputs:()
				// linked node: tMap_4 - inputs:(row31,row18) outputs:(mobileVile)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row31 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row31Struct>getLookup(matchingModeEnum_row31);

				globalMap.put("tHash_Lookup_row31", tHash_Lookup_row31);

				/**
				 * [tAdvancedHash_row31 begin ] stop
				 */

				/**
				 * [tLogRow_5 begin ] start
				 */

				ok_Hash.put("tLogRow_5", false);
				start_Hash.put("tLogRow_5", System.currentTimeMillis());

				currentComponent = "tLogRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row33");
				}

				int tos_count_tLogRow_5 = 0;

				///////////////////////

				class Util_tLogRow_5 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[3];

					public void addRow(String[] row) {

						for (int i = 0; i < 3; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 2 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_5 util_tLogRow_5 = new Util_tLogRow_5();
				util_tLogRow_5.setTableName("GeoLocalisationLogger");
				util_tLogRow_5.addRow(new String[] { "Vile", "Lat", "Lon", });
				StringBuilder strBuffer_tLogRow_5 = null;
				int nb_line_tLogRow_5 = 0;
///////////////////////    			

				/**
				 * [tLogRow_5 begin ] stop
				 */

				/**
				 * [tUniqRow_1 begin ] start
				 */

				ok_Hash.put("tUniqRow_1", false);
				start_Hash.put("tUniqRow_1", System.currentTimeMillis());

				currentComponent = "tUniqRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row26");
				}

				int tos_count_tUniqRow_1 = 0;

				class KeyStruct_tUniqRow_1 {

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String Vile;
					String Lat;
					String Lon;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.Vile == null) ? 0 : this.Vile.hashCode());

							result = prime * result + ((this.Lat == null) ? 0 : this.Lat.hashCode());

							result = prime * result + ((this.Lon == null) ? 0 : this.Lon.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final KeyStruct_tUniqRow_1 other = (KeyStruct_tUniqRow_1) obj;

						if (this.Vile == null) {
							if (other.Vile != null)
								return false;

						} else if (!this.Vile.equals(other.Vile))

							return false;

						if (this.Lat == null) {
							if (other.Lat != null)
								return false;

						} else if (!this.Lat.equals(other.Lat))

							return false;

						if (this.Lon == null) {
							if (other.Lon != null)
								return false;

						} else if (!this.Lon.equals(other.Lon))

							return false;

						return true;
					}

				}

				int nb_uniques_tUniqRow_1 = 0;
				int nb_duplicates_tUniqRow_1 = 0;
				KeyStruct_tUniqRow_1 finder_tUniqRow_1 = new KeyStruct_tUniqRow_1();
				java.util.Set<KeyStruct_tUniqRow_1> keystUniqRow_1 = new java.util.HashSet<KeyStruct_tUniqRow_1>();

				/**
				 * [tUniqRow_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */
						"C:/Users/mahdj/Downloads/TOS_DI-20211109_1610-V8.0.1/TOS_DI-20211109_1610-V8.0.1/workspace/QDD/data/GeoLocalisation.csv"/**
																																					 * End
																																					 * field
																																					 * tFileInputDelimited_1:FILENAME
																																					 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited_1),
									fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
							while (csvReadertFileInputDelimited_1.readNext()) {

								rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();
								if (!(rowtFileInputDelimited_1.length == 1
										&& ("\015").equals(rowtFileInputDelimited_1[0]))) {// empty line when row
																							// separator is '\n'

									totalLinetFileInputDelimited_1++;

								}

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
											: totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
										? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited_1),
										fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
							}
							csvReadertFileInputDelimited_1.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

						if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																													// line
																													// when
																													// row
																													// separator
																													// is
																													// '\n'
							continue;
						}

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row26 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row26 = new row26Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row26.Vile = null;

								row26.Lat = null;

								row26.Lon = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row26.Vile = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row26.Vile = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row26.Lat = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row26.Lat = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row26.Lon = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row26.Lon = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row26 = null;

							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row26"
						if (row26 != null) {

							/**
							 * [tUniqRow_1 main ] start
							 */

							currentComponent = "tUniqRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row26"

								);
							}

							row33 = null;
							if (row26.Vile == null) {
								finder_tUniqRow_1.Vile = null;
							} else {
								finder_tUniqRow_1.Vile = row26.Vile.toLowerCase();
							}
							if (row26.Lat == null) {
								finder_tUniqRow_1.Lat = null;
							} else {
								finder_tUniqRow_1.Lat = row26.Lat.toLowerCase();
							}
							if (row26.Lon == null) {
								finder_tUniqRow_1.Lon = null;
							} else {
								finder_tUniqRow_1.Lon = row26.Lon.toLowerCase();
							}
							finder_tUniqRow_1.hashCodeDirty = true;
							if (!keystUniqRow_1.contains(finder_tUniqRow_1)) {
								KeyStruct_tUniqRow_1 new_tUniqRow_1 = new KeyStruct_tUniqRow_1();

								if (row26.Vile == null) {
									new_tUniqRow_1.Vile = null;
								} else {
									new_tUniqRow_1.Vile = row26.Vile.toLowerCase();
								}
								if (row26.Lat == null) {
									new_tUniqRow_1.Lat = null;
								} else {
									new_tUniqRow_1.Lat = row26.Lat.toLowerCase();
								}
								if (row26.Lon == null) {
									new_tUniqRow_1.Lon = null;
								} else {
									new_tUniqRow_1.Lon = row26.Lon.toLowerCase();
								}

								keystUniqRow_1.add(new_tUniqRow_1);
								if (row33 == null) {

									row33 = new row33Struct();
								}
								row33.Vile = row26.Vile;
								row33.Lat = row26.Lat;
								row33.Lon = row26.Lon;
								nb_uniques_tUniqRow_1++;
							} else {
								nb_duplicates_tUniqRow_1++;
							}

							tos_count_tUniqRow_1++;

							/**
							 * [tUniqRow_1 main ] stop
							 */

							/**
							 * [tUniqRow_1 process_data_begin ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_begin ] stop
							 */
// Start of branch "row33"
							if (row33 != null) {

								/**
								 * [tLogRow_5 main ] start
								 */

								currentComponent = "tLogRow_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row33"

									);
								}

///////////////////////		

								String[] row_tLogRow_5 = new String[3];

								if (row33.Vile != null) { //
									row_tLogRow_5[0] = String.valueOf(row33.Vile);

								} //

								if (row33.Lat != null) { //
									row_tLogRow_5[1] = String.valueOf(row33.Lat);

								} //

								if (row33.Lon != null) { //
									row_tLogRow_5[2] = String.valueOf(row33.Lon);

								} //

								util_tLogRow_5.addRow(row_tLogRow_5);
								nb_line_tLogRow_5++;
//////

//////                    

///////////////////////    			

								row31 = row33;

								tos_count_tLogRow_5++;

								/**
								 * [tLogRow_5 main ] stop
								 */

								/**
								 * [tLogRow_5 process_data_begin ] start
								 */

								currentComponent = "tLogRow_5";

								/**
								 * [tLogRow_5 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row31 main ] start
								 */

								currentComponent = "tAdvancedHash_row31";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row31"

									);
								}

								row31Struct row31_HashRow = new row31Struct();

								row31_HashRow.Vile = row31.Vile;

								row31_HashRow.Lat = row31.Lat;

								row31_HashRow.Lon = row31.Lon;

								tHash_Lookup_row31.put(row31_HashRow);

								tos_count_tAdvancedHash_row31++;

								/**
								 * [tAdvancedHash_row31 main ] stop
								 */

								/**
								 * [tAdvancedHash_row31 process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_row31";

								/**
								 * [tAdvancedHash_row31 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row31 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row31";

								/**
								 * [tAdvancedHash_row31 process_data_end ] stop
								 */

								/**
								 * [tLogRow_5 process_data_end ] start
								 */

								currentComponent = "tLogRow_5";

								/**
								 * [tLogRow_5 process_data_end ] stop
								 */

							} // End of branch "row33"

							/**
							 * [tUniqRow_1 process_data_end ] start
							 */

							currentComponent = "tUniqRow_1";

							/**
							 * [tUniqRow_1 process_data_end ] stop
							 */

						} // End of branch "row26"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tUniqRow_1 end ] start
				 */

				currentComponent = "tUniqRow_1";

				globalMap.put("tUniqRow_1_NB_UNIQUES", nb_uniques_tUniqRow_1);
				globalMap.put("tUniqRow_1_NB_DUPLICATES", nb_duplicates_tUniqRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row26");
				}

				ok_Hash.put("tUniqRow_1", true);
				end_Hash.put("tUniqRow_1", System.currentTimeMillis());

				/**
				 * [tUniqRow_1 end ] stop
				 */

				/**
				 * [tLogRow_5 end ] start
				 */

				currentComponent = "tLogRow_5";

//////

				java.io.PrintStream consoleOut_tLogRow_5 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_5 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_5 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_5);
				}

				consoleOut_tLogRow_5.println(util_tLogRow_5.format().toString());
				consoleOut_tLogRow_5.flush();
//////
				globalMap.put("tLogRow_5_NB_LINE", nb_line_tLogRow_5);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row33");
				}

				ok_Hash.put("tLogRow_5", true);
				end_Hash.put("tLogRow_5", System.currentTimeMillis());

				/**
				 * [tLogRow_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row31 end ] start
				 */

				currentComponent = "tAdvancedHash_row31";

				tHash_Lookup_row31.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row31");
				}

				ok_Hash.put("tAdvancedHash_row31", true);
				end_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row31 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tUniqRow_1 finally ] start
				 */

				currentComponent = "tUniqRow_1";

				/**
				 * [tUniqRow_1 finally ] stop
				 */

				/**
				 * [tLogRow_5 finally ] start
				 */

				currentComponent = "tLogRow_5";

				/**
				 * [tLogRow_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row31 finally ] start
				 */

				currentComponent = "tAdvancedHash_row31";

				/**
				 * [tAdvancedHash_row31 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_2_row15Struct
			implements routines.system.IPersistableRow<tHashInput_tUnite_2_row15Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public String ID_Capteur;

		public String getID_Capteur() {
			return this.ID_Capteur;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.ID_Capteur == null) ? 0 : this.ID_Capteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final tHashInput_tUnite_2_row15Struct other = (tHashInput_tUnite_2_row15Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Capteur == null) {
				if (other.ID_Capteur != null)
					return false;

			} else if (!this.ID_Capteur.equals(other.ID_Capteur))

				return false;

			return true;
		}

		public void copyDataTo(tHashInput_tUnite_2_row15Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;
			other.Localisation = this.Localisation;
			other.Taux_Releve = this.Taux_Releve;

		}

		public void copyKeysDataTo(tHashInput_tUnite_2_row15Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Localisation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Localisation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Localisation, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Localisation, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",ID_Capteur=" + ID_Capteur);
			sb.append(",Localisation=" + Localisation);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_2_row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Capteur, other.ID_Capteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public String ID_Capteur;

		public String getID_Capteur() {
			return this.ID_Capteur;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.ID_Capteur == null) ? 0 : this.ID_Capteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Capteur == null) {
				if (other.ID_Capteur != null)
					return false;

			} else if (!this.ID_Capteur.equals(other.ID_Capteur))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;
			other.Localisation = this.Localisation;
			other.Taux_Releve = this.Taux_Releve;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Localisation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Localisation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Localisation, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Localisation, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",ID_Capteur=" + ID_Capteur);
			sb.append(",Localisation=" + Localisation);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Capteur, other.ID_Capteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputExcel_15Struct
			implements routines.system.IPersistableRow<after_tFileInputExcel_15Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public String ID_Capteur;

		public String getID_Capteur() {
			return this.ID_Capteur;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.ID_Capteur == null) ? 0 : this.ID_Capteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputExcel_15Struct other = (after_tFileInputExcel_15Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Capteur == null) {
				if (other.ID_Capteur != null)
					return false;

			} else if (!this.ID_Capteur.equals(other.ID_Capteur))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputExcel_15Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;
			other.Localisation = this.Localisation;
			other.Taux_Releve = this.Taux_Releve;

		}

		public void copyKeysDataTo(after_tFileInputExcel_15Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Localisation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Localisation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Localisation, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Localisation, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",ID_Capteur=" + ID_Capteur);
			sb.append(",Localisation=" + Localisation);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputExcel_15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Capteur, other.ID_Capteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public String ID_Capteur;

		public String getID_Capteur() {
			return this.ID_Capteur;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.ID_Capteur == null) ? 0 : this.ID_Capteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Capteur == null) {
				if (other.ID_Capteur != null)
					return false;

			} else if (!this.ID_Capteur.equals(other.ID_Capteur))

				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;
			other.Localisation = this.Localisation;
			other.Taux_Releve = this.Taux_Releve;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Localisation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Localisation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Localisation, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Localisation, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",ID_Capteur=" + ID_Capteur);
			sb.append(",Localisation=" + Localisation);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Capteur, other.ID_Capteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_1Process(globalMap);

				row5Struct row5 = new row5Struct();

				row6Struct row6 = new row6Struct();

				tHashInput_tUnite_2_row15Struct tHashInput_tUnite_2_row15 = new tHashInput_tUnite_2_row15Struct();

				/**
				 * [tHashOutput_tUnite_2 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_2", false);
				start_Hash.put("tHashOutput_tUnite_2", System.currentTimeMillis());

				currentComponent = "tHashOutput_tUnite_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0,
							"tHashInput_tUnite_2_tHashInput_tUnite_2_row15");
				}

				int tos_count_tHashOutput_tUnite_2 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_2 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_2_row15Struct> tHashFile_tHashOutput_tUnite_2 = null;
				String hashKey_tHashOutput_tUnite_2 = "tHashFile_test_" + pid + "_tHashOutput_tUnite_2";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_tUnite_2)) {
					if (mf_tHashOutput_tUnite_2.getResourceMap().get(hashKey_tHashOutput_tUnite_2) == null) {
						mf_tHashOutput_tUnite_2.getResourceMap().put(hashKey_tHashOutput_tUnite_2,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_2_row15Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_tUnite_2 = mf_tHashOutput_tUnite_2.getResourceMap()
								.get(hashKey_tHashOutput_tUnite_2);
					} else {
						tHashFile_tHashOutput_tUnite_2 = mf_tHashOutput_tUnite_2.getResourceMap()
								.get(hashKey_tHashOutput_tUnite_2);
					}
				}
				int nb_line_tHashOutput_tUnite_2 = 0;

				/**
				 * [tHashOutput_tUnite_2 begin ] stop
				 */

				/**
				 * [tUnite_2 begin ] start
				 */

				ok_Hash.put("tUnite_2", false);
				start_Hash.put("tUnite_2", System.currentTimeMillis());

				currentComponent = "tUnite_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6", "row5");
				}

				int tos_count_tUnite_2 = 0;

				int nb_line_tUnite_2 = 0;

				/**
				 * [tUnite_2 begin ] stop
				 */

				/**
				 * [tFileInputExcel_15 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_15", false);
				start_Hash.put("tFileInputExcel_15", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_15";

				int tos_count_tFileInputExcel_15 = 0;

				final String decryptedPassword_tFileInputExcel_15 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:KRZkvggcePiUby0PIRx5WgHSn8EvnpGMhBeWRw==");
				String password_tFileInputExcel_15 = decryptedPassword_tFileInputExcel_15;
				if (password_tFileInputExcel_15.isEmpty()) {
					password_tFileInputExcel_15 = null;
				}
				class RegexUtil_tFileInputExcel_15 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_15 regexUtil_tFileInputExcel_15 = new RegexUtil_tFileInputExcel_15();

				Object source_tFileInputExcel_15 = "C:/Users/mahdj/Downloads/Données.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_15 = null;

				if (source_tFileInputExcel_15 instanceof String) {
					workbook_tFileInputExcel_15 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_15), password_tFileInputExcel_15,
									true);
				} else if (source_tFileInputExcel_15 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_15 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_15, password_tFileInputExcel_15);
				} else {
					workbook_tFileInputExcel_15 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_15 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_15
							.addAll(regexUtil_tFileInputExcel_15.getSheets(workbook_tFileInputExcel_15, "s4", false));
					if (sheetList_tFileInputExcel_15.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_15 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_15 : sheetList_tFileInputExcel_15) {
						if (sheet_FilterNull_tFileInputExcel_15 != null
								&& sheetList_FilterNull_tFileInputExcel_15.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_15.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_15.add(sheet_FilterNull_tFileInputExcel_15);
						}
					}
					sheetList_tFileInputExcel_15 = sheetList_FilterNull_tFileInputExcel_15;
					if (sheetList_tFileInputExcel_15.size() > 0) {
						int nb_line_tFileInputExcel_15 = 0;

						int begin_line_tFileInputExcel_15 = 1;

						int footer_input_tFileInputExcel_15 = 0;

						int end_line_tFileInputExcel_15 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_15 : sheetList_tFileInputExcel_15) {
							end_line_tFileInputExcel_15 += (sheet_tFileInputExcel_15.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_15 -= footer_input_tFileInputExcel_15;
						int limit_tFileInputExcel_15 = -1;
						int start_column_tFileInputExcel_15 = 1 - 1;
						int end_column_tFileInputExcel_15 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_15 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_15 = sheetList_tFileInputExcel_15
								.get(0);
						int rowCount_tFileInputExcel_15 = 0;
						int sheetIndex_tFileInputExcel_15 = 0;
						int currentRows_tFileInputExcel_15 = (sheetList_tFileInputExcel_15.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_15 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_15 = df_tFileInputExcel_15.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_15 = begin_line_tFileInputExcel_15; i_tFileInputExcel_15 < end_line_tFileInputExcel_15; i_tFileInputExcel_15++) {

							int emptyColumnCount_tFileInputExcel_15 = 0;

							if (limit_tFileInputExcel_15 != -1
									&& nb_line_tFileInputExcel_15 >= limit_tFileInputExcel_15) {
								break;
							}

							while (i_tFileInputExcel_15 >= rowCount_tFileInputExcel_15
									+ currentRows_tFileInputExcel_15) {
								rowCount_tFileInputExcel_15 += currentRows_tFileInputExcel_15;
								sheet_tFileInputExcel_15 = sheetList_tFileInputExcel_15
										.get(++sheetIndex_tFileInputExcel_15);
								currentRows_tFileInputExcel_15 = (sheet_tFileInputExcel_15.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_15_CURRENT_SHEET", sheet_tFileInputExcel_15.getSheetName());
							if (rowCount_tFileInputExcel_15 <= i_tFileInputExcel_15) {
								row_tFileInputExcel_15 = sheet_tFileInputExcel_15
										.getRow(i_tFileInputExcel_15 - rowCount_tFileInputExcel_15);
							}
							row5 = null;
							int tempRowLength_tFileInputExcel_15 = 5;

							int columnIndex_tFileInputExcel_15 = 0;

							String[] temp_row_tFileInputExcel_15 = new String[tempRowLength_tFileInputExcel_15];
							int excel_end_column_tFileInputExcel_15;
							if (row_tFileInputExcel_15 == null) {
								excel_end_column_tFileInputExcel_15 = 0;
							} else {
								excel_end_column_tFileInputExcel_15 = row_tFileInputExcel_15.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_15;
							if (end_column_tFileInputExcel_15 == -1) {
								actual_end_column_tFileInputExcel_15 = excel_end_column_tFileInputExcel_15;
							} else {
								actual_end_column_tFileInputExcel_15 = end_column_tFileInputExcel_15 > excel_end_column_tFileInputExcel_15
										? excel_end_column_tFileInputExcel_15
										: end_column_tFileInputExcel_15;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_15 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_15; i++) {
								if (i + start_column_tFileInputExcel_15 < actual_end_column_tFileInputExcel_15) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_15 = row_tFileInputExcel_15
											.getCell(i + start_column_tFileInputExcel_15);
									if (cell_tFileInputExcel_15 != null) {
										switch (cell_tFileInputExcel_15.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_15[i] = cell_tFileInputExcel_15
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_15)) {
												temp_row_tFileInputExcel_15[i] = cell_tFileInputExcel_15
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_15[i] = df_tFileInputExcel_15
														.format(cell_tFileInputExcel_15.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_15[i] = String
													.valueOf(cell_tFileInputExcel_15.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_15.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_15[i] = cell_tFileInputExcel_15
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_15)) {
													temp_row_tFileInputExcel_15[i] = cell_tFileInputExcel_15
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_15 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_15.getNumericCellValue());
													temp_row_tFileInputExcel_15[i] = ne_tFileInputExcel_15
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_15[i] = String
														.valueOf(cell_tFileInputExcel_15.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_15[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_15[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_15[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_15[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_15 = false;
							row5 = new row5Struct();
							int curColNum_tFileInputExcel_15 = -1;
							String curColName_tFileInputExcel_15 = "";
							try {
								columnIndex_tFileInputExcel_15 = 0;

								if (temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15].length() > 0) {
									curColNum_tFileInputExcel_15 = columnIndex_tFileInputExcel_15
											+ start_column_tFileInputExcel_15 + 1;
									curColName_tFileInputExcel_15 = "ID_Polluant";

									row5.ID_Polluant = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15];
								} else {
									row5.ID_Polluant = null;
									emptyColumnCount_tFileInputExcel_15++;
								}
								columnIndex_tFileInputExcel_15 = 1;

								if (temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15].length() > 0) {
									curColNum_tFileInputExcel_15 = columnIndex_tFileInputExcel_15
											+ start_column_tFileInputExcel_15 + 1;
									curColName_tFileInputExcel_15 = "Date";

									row5.Date = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15];
								} else {
									row5.Date = null;
									emptyColumnCount_tFileInputExcel_15++;
								}
								columnIndex_tFileInputExcel_15 = 2;

								if (temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15].length() > 0) {
									curColNum_tFileInputExcel_15 = columnIndex_tFileInputExcel_15
											+ start_column_tFileInputExcel_15 + 1;
									curColName_tFileInputExcel_15 = "ID_Capteur";

									row5.ID_Capteur = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15];
								} else {
									row5.ID_Capteur = null;
									emptyColumnCount_tFileInputExcel_15++;
								}
								columnIndex_tFileInputExcel_15 = 3;

								if (temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15].length() > 0) {
									curColNum_tFileInputExcel_15 = columnIndex_tFileInputExcel_15
											+ start_column_tFileInputExcel_15 + 1;
									curColName_tFileInputExcel_15 = "Localisation";

									row5.Localisation = temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15];
								} else {
									row5.Localisation = null;
									emptyColumnCount_tFileInputExcel_15++;
								}
								columnIndex_tFileInputExcel_15 = 4;

								if (temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15].length() > 0) {
									curColNum_tFileInputExcel_15 = columnIndex_tFileInputExcel_15
											+ start_column_tFileInputExcel_15 + 1;
									curColName_tFileInputExcel_15 = "Taux_Releve";

									row5.Taux_Releve = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_15[columnIndex_tFileInputExcel_15], null,
											'.' == decimalChar_tFileInputExcel_15 ? null
													: decimalChar_tFileInputExcel_15));
								} else {
									row5.Taux_Releve = null;
									emptyColumnCount_tFileInputExcel_15++;
								}

								nb_line_tFileInputExcel_15++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_15_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_15 = true;
								System.err.println(e.getMessage());
								row5 = null;
							}

							/**
							 * [tFileInputExcel_15 begin ] stop
							 */

							/**
							 * [tFileInputExcel_15 main ] start
							 */

							currentComponent = "tFileInputExcel_15";

							tos_count_tFileInputExcel_15++;

							/**
							 * [tFileInputExcel_15 main ] stop
							 */

							/**
							 * [tFileInputExcel_15 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_15";

							/**
							 * [tFileInputExcel_15 process_data_begin ] stop
							 */
// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tUnite_2 main ] start
								 */

								currentComponent = "tUnite_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row5"

									);
								}

//////////

// for output
								tHashInput_tUnite_2_row15 = new tHashInput_tUnite_2_row15Struct();

								tHashInput_tUnite_2_row15.ID_Polluant = row5.ID_Polluant;
								tHashInput_tUnite_2_row15.Date = row5.Date;
								tHashInput_tUnite_2_row15.ID_Capteur = row5.ID_Capteur;
								tHashInput_tUnite_2_row15.Localisation = row5.Localisation;
								tHashInput_tUnite_2_row15.Taux_Releve = row5.Taux_Releve;

								nb_line_tUnite_2++;

//////////

								tos_count_tUnite_2++;

								/**
								 * [tUnite_2 main ] stop
								 */

								/**
								 * [tUnite_2 process_data_begin ] start
								 */

								currentComponent = "tUnite_2";

								/**
								 * [tUnite_2 process_data_begin ] stop
								 */

								/**
								 * [tHashOutput_tUnite_2 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "tHashInput_tUnite_2_tHashInput_tUnite_2_row15"

									);
								}

								tHashInput_tUnite_2_row15Struct oneRow_tHashOutput_tUnite_2 = new tHashInput_tUnite_2_row15Struct();

								oneRow_tHashOutput_tUnite_2.ID_Polluant = tHashInput_tUnite_2_row15.ID_Polluant;
								oneRow_tHashOutput_tUnite_2.Date = tHashInput_tUnite_2_row15.Date;
								oneRow_tHashOutput_tUnite_2.ID_Capteur = tHashInput_tUnite_2_row15.ID_Capteur;
								oneRow_tHashOutput_tUnite_2.Localisation = tHashInput_tUnite_2_row15.Localisation;
								oneRow_tHashOutput_tUnite_2.Taux_Releve = tHashInput_tUnite_2_row15.Taux_Releve;

								tHashFile_tHashOutput_tUnite_2.put(oneRow_tHashOutput_tUnite_2);
								nb_line_tHashOutput_tUnite_2++;

								tos_count_tHashOutput_tUnite_2++;

								/**
								 * [tHashOutput_tUnite_2 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_2 process_data_begin ] start
								 */

								currentComponent = "tHashOutput_tUnite_2";

								/**
								 * [tHashOutput_tUnite_2 process_data_begin ] stop
								 */

								/**
								 * [tHashOutput_tUnite_2 process_data_end ] start
								 */

								currentComponent = "tHashOutput_tUnite_2";

								/**
								 * [tHashOutput_tUnite_2 process_data_end ] stop
								 */

								/**
								 * [tUnite_2 process_data_end ] start
								 */

								currentComponent = "tUnite_2";

								/**
								 * [tUnite_2 process_data_end ] stop
								 */

							} // End of branch "row5"

							/**
							 * [tFileInputExcel_15 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_15";

							/**
							 * [tFileInputExcel_15 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_15 end ] start
							 */

							currentComponent = "tFileInputExcel_15";

						}

						globalMap.put("tFileInputExcel_15_NB_LINE", nb_line_tFileInputExcel_15);

					}

				} finally {

					if (!(source_tFileInputExcel_15 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_15.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_15", true);
				end_Hash.put("tFileInputExcel_15", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_15 end ] stop
				 */

				/**
				 * [tFileInputExcel_21 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_21", false);
				start_Hash.put("tFileInputExcel_21", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_21";

				int tos_count_tFileInputExcel_21 = 0;

				final String decryptedPassword_tFileInputExcel_21 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:NYloymUiBMat4Yum90xRwvbwC3KxjQXTPvmH3w==");
				String password_tFileInputExcel_21 = decryptedPassword_tFileInputExcel_21;
				if (password_tFileInputExcel_21.isEmpty()) {
					password_tFileInputExcel_21 = null;
				}
				class RegexUtil_tFileInputExcel_21 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_21 regexUtil_tFileInputExcel_21 = new RegexUtil_tFileInputExcel_21();

				Object source_tFileInputExcel_21 = "C:/Users/mahdj/Downloads/Données.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_21 = null;

				if (source_tFileInputExcel_21 instanceof String) {
					workbook_tFileInputExcel_21 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_21), password_tFileInputExcel_21,
									true);
				} else if (source_tFileInputExcel_21 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_21 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_21, password_tFileInputExcel_21);
				} else {
					workbook_tFileInputExcel_21 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_21 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_21
							.addAll(regexUtil_tFileInputExcel_21.getSheets(workbook_tFileInputExcel_21, "s5", false));
					if (sheetList_tFileInputExcel_21.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_21 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_21 : sheetList_tFileInputExcel_21) {
						if (sheet_FilterNull_tFileInputExcel_21 != null
								&& sheetList_FilterNull_tFileInputExcel_21.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_21.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_21.add(sheet_FilterNull_tFileInputExcel_21);
						}
					}
					sheetList_tFileInputExcel_21 = sheetList_FilterNull_tFileInputExcel_21;
					if (sheetList_tFileInputExcel_21.size() > 0) {
						int nb_line_tFileInputExcel_21 = 0;

						int begin_line_tFileInputExcel_21 = 1;

						int footer_input_tFileInputExcel_21 = 0;

						int end_line_tFileInputExcel_21 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_21 : sheetList_tFileInputExcel_21) {
							end_line_tFileInputExcel_21 += (sheet_tFileInputExcel_21.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_21 -= footer_input_tFileInputExcel_21;
						int limit_tFileInputExcel_21 = -1;
						int start_column_tFileInputExcel_21 = 1 - 1;
						int end_column_tFileInputExcel_21 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_21 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_21 = sheetList_tFileInputExcel_21
								.get(0);
						int rowCount_tFileInputExcel_21 = 0;
						int sheetIndex_tFileInputExcel_21 = 0;
						int currentRows_tFileInputExcel_21 = (sheetList_tFileInputExcel_21.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_21 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_21 = df_tFileInputExcel_21.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_21 = begin_line_tFileInputExcel_21; i_tFileInputExcel_21 < end_line_tFileInputExcel_21; i_tFileInputExcel_21++) {

							int emptyColumnCount_tFileInputExcel_21 = 0;

							if (limit_tFileInputExcel_21 != -1
									&& nb_line_tFileInputExcel_21 >= limit_tFileInputExcel_21) {
								break;
							}

							while (i_tFileInputExcel_21 >= rowCount_tFileInputExcel_21
									+ currentRows_tFileInputExcel_21) {
								rowCount_tFileInputExcel_21 += currentRows_tFileInputExcel_21;
								sheet_tFileInputExcel_21 = sheetList_tFileInputExcel_21
										.get(++sheetIndex_tFileInputExcel_21);
								currentRows_tFileInputExcel_21 = (sheet_tFileInputExcel_21.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_21_CURRENT_SHEET", sheet_tFileInputExcel_21.getSheetName());
							if (rowCount_tFileInputExcel_21 <= i_tFileInputExcel_21) {
								row_tFileInputExcel_21 = sheet_tFileInputExcel_21
										.getRow(i_tFileInputExcel_21 - rowCount_tFileInputExcel_21);
							}
							row6 = null;
							int tempRowLength_tFileInputExcel_21 = 5;

							int columnIndex_tFileInputExcel_21 = 0;

							String[] temp_row_tFileInputExcel_21 = new String[tempRowLength_tFileInputExcel_21];
							int excel_end_column_tFileInputExcel_21;
							if (row_tFileInputExcel_21 == null) {
								excel_end_column_tFileInputExcel_21 = 0;
							} else {
								excel_end_column_tFileInputExcel_21 = row_tFileInputExcel_21.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_21;
							if (end_column_tFileInputExcel_21 == -1) {
								actual_end_column_tFileInputExcel_21 = excel_end_column_tFileInputExcel_21;
							} else {
								actual_end_column_tFileInputExcel_21 = end_column_tFileInputExcel_21 > excel_end_column_tFileInputExcel_21
										? excel_end_column_tFileInputExcel_21
										: end_column_tFileInputExcel_21;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_21 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_21; i++) {
								if (i + start_column_tFileInputExcel_21 < actual_end_column_tFileInputExcel_21) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_21 = row_tFileInputExcel_21
											.getCell(i + start_column_tFileInputExcel_21);
									if (cell_tFileInputExcel_21 != null) {
										switch (cell_tFileInputExcel_21.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_21[i] = cell_tFileInputExcel_21
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_21)) {
												temp_row_tFileInputExcel_21[i] = cell_tFileInputExcel_21
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_21[i] = df_tFileInputExcel_21
														.format(cell_tFileInputExcel_21.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_21[i] = String
													.valueOf(cell_tFileInputExcel_21.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_21.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_21[i] = cell_tFileInputExcel_21
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_21)) {
													temp_row_tFileInputExcel_21[i] = cell_tFileInputExcel_21
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_21 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_21.getNumericCellValue());
													temp_row_tFileInputExcel_21[i] = ne_tFileInputExcel_21
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_21[i] = String
														.valueOf(cell_tFileInputExcel_21.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_21[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_21[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_21[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_21[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_21 = false;
							row6 = new row6Struct();
							int curColNum_tFileInputExcel_21 = -1;
							String curColName_tFileInputExcel_21 = "";
							try {
								columnIndex_tFileInputExcel_21 = 0;

								if (temp_row_tFileInputExcel_21[columnIndex_tFileInputExcel_21].length() > 0) {
									curColNum_tFileInputExcel_21 = columnIndex_tFileInputExcel_21
											+ start_column_tFileInputExcel_21 + 1;
									curColName_tFileInputExcel_21 = "ID_Polluant";

									row6.ID_Polluant = temp_row_tFileInputExcel_21[columnIndex_tFileInputExcel_21];
								} else {
									row6.ID_Polluant = null;
									emptyColumnCount_tFileInputExcel_21++;
								}
								columnIndex_tFileInputExcel_21 = 1;

								if (temp_row_tFileInputExcel_21[columnIndex_tFileInputExcel_21].length() > 0) {
									curColNum_tFileInputExcel_21 = columnIndex_tFileInputExcel_21
											+ start_column_tFileInputExcel_21 + 1;
									curColName_tFileInputExcel_21 = "Date";

									row6.Date = temp_row_tFileInputExcel_21[columnIndex_tFileInputExcel_21];
								} else {
									row6.Date = null;
									emptyColumnCount_tFileInputExcel_21++;
								}
								columnIndex_tFileInputExcel_21 = 2;

								if (temp_row_tFileInputExcel_21[columnIndex_tFileInputExcel_21].length() > 0) {
									curColNum_tFileInputExcel_21 = columnIndex_tFileInputExcel_21
											+ start_column_tFileInputExcel_21 + 1;
									curColName_tFileInputExcel_21 = "ID_Capteur";

									row6.ID_Capteur = temp_row_tFileInputExcel_21[columnIndex_tFileInputExcel_21];
								} else {
									row6.ID_Capteur = null;
									emptyColumnCount_tFileInputExcel_21++;
								}
								columnIndex_tFileInputExcel_21 = 3;

								if (temp_row_tFileInputExcel_21[columnIndex_tFileInputExcel_21].length() > 0) {
									curColNum_tFileInputExcel_21 = columnIndex_tFileInputExcel_21
											+ start_column_tFileInputExcel_21 + 1;
									curColName_tFileInputExcel_21 = "Localisation";

									row6.Localisation = temp_row_tFileInputExcel_21[columnIndex_tFileInputExcel_21];
								} else {
									row6.Localisation = null;
									emptyColumnCount_tFileInputExcel_21++;
								}
								columnIndex_tFileInputExcel_21 = 4;

								if (temp_row_tFileInputExcel_21[columnIndex_tFileInputExcel_21].length() > 0) {
									curColNum_tFileInputExcel_21 = columnIndex_tFileInputExcel_21
											+ start_column_tFileInputExcel_21 + 1;
									curColName_tFileInputExcel_21 = "Taux_Releve";

									row6.Taux_Releve = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_21[columnIndex_tFileInputExcel_21], null,
											'.' == decimalChar_tFileInputExcel_21 ? null
													: decimalChar_tFileInputExcel_21));
								} else {
									row6.Taux_Releve = null;
									emptyColumnCount_tFileInputExcel_21++;
								}

								nb_line_tFileInputExcel_21++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_21_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_21 = true;
								System.err.println(e.getMessage());
								row6 = null;
							}

							/**
							 * [tFileInputExcel_21 begin ] stop
							 */

							/**
							 * [tFileInputExcel_21 main ] start
							 */

							currentComponent = "tFileInputExcel_21";

							tos_count_tFileInputExcel_21++;

							/**
							 * [tFileInputExcel_21 main ] stop
							 */

							/**
							 * [tFileInputExcel_21 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_21";

							/**
							 * [tFileInputExcel_21 process_data_begin ] stop
							 */
// Start of branch "row6"
							if (row6 != null) {

								/**
								 * [tUnite_2 main ] start
								 */

								currentComponent = "tUnite_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row6"

									);
								}

//////////

// for output
								tHashInput_tUnite_2_row15 = new tHashInput_tUnite_2_row15Struct();

								tHashInput_tUnite_2_row15.ID_Polluant = row6.ID_Polluant;
								tHashInput_tUnite_2_row15.Date = row6.Date;
								tHashInput_tUnite_2_row15.ID_Capteur = row6.ID_Capteur;
								tHashInput_tUnite_2_row15.Localisation = row6.Localisation;
								tHashInput_tUnite_2_row15.Taux_Releve = row6.Taux_Releve;

								nb_line_tUnite_2++;

//////////

								tos_count_tUnite_2++;

								/**
								 * [tUnite_2 main ] stop
								 */

								/**
								 * [tUnite_2 process_data_begin ] start
								 */

								currentComponent = "tUnite_2";

								/**
								 * [tUnite_2 process_data_begin ] stop
								 */

								/**
								 * [tHashOutput_tUnite_2 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "tHashInput_tUnite_2_tHashInput_tUnite_2_row15"

									);
								}

								tHashInput_tUnite_2_row15Struct oneRow_tHashOutput_tUnite_2 = new tHashInput_tUnite_2_row15Struct();

								oneRow_tHashOutput_tUnite_2.ID_Polluant = tHashInput_tUnite_2_row15.ID_Polluant;
								oneRow_tHashOutput_tUnite_2.Date = tHashInput_tUnite_2_row15.Date;
								oneRow_tHashOutput_tUnite_2.ID_Capteur = tHashInput_tUnite_2_row15.ID_Capteur;
								oneRow_tHashOutput_tUnite_2.Localisation = tHashInput_tUnite_2_row15.Localisation;
								oneRow_tHashOutput_tUnite_2.Taux_Releve = tHashInput_tUnite_2_row15.Taux_Releve;

								tHashFile_tHashOutput_tUnite_2.put(oneRow_tHashOutput_tUnite_2);
								nb_line_tHashOutput_tUnite_2++;

								tos_count_tHashOutput_tUnite_2++;

								/**
								 * [tHashOutput_tUnite_2 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_2 process_data_begin ] start
								 */

								currentComponent = "tHashOutput_tUnite_2";

								/**
								 * [tHashOutput_tUnite_2 process_data_begin ] stop
								 */

								/**
								 * [tHashOutput_tUnite_2 process_data_end ] start
								 */

								currentComponent = "tHashOutput_tUnite_2";

								/**
								 * [tHashOutput_tUnite_2 process_data_end ] stop
								 */

								/**
								 * [tUnite_2 process_data_end ] start
								 */

								currentComponent = "tUnite_2";

								/**
								 * [tUnite_2 process_data_end ] stop
								 */

							} // End of branch "row6"

							/**
							 * [tFileInputExcel_21 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_21";

							/**
							 * [tFileInputExcel_21 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_21 end ] start
							 */

							currentComponent = "tFileInputExcel_21";

						}

						globalMap.put("tFileInputExcel_21_NB_LINE", nb_line_tFileInputExcel_21);

					}

				} finally {

					if (!(source_tFileInputExcel_21 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_21.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_21", true);
				end_Hash.put("tFileInputExcel_21", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_21 end ] stop
				 */

				/**
				 * [tUnite_2 end ] start
				 */

				currentComponent = "tUnite_2";

				globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6", "row5");
				}

				ok_Hash.put("tUnite_2", true);
				end_Hash.put("tUnite_2", System.currentTimeMillis());

				/**
				 * [tUnite_2 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_2 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_2";

				globalMap.put("tHashOutput_tUnite_2_NB_LINE", nb_line_tHashOutput_tUnite_2);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "tHashInput_tUnite_2_tHashInput_tUnite_2_row15");
				}

				ok_Hash.put("tHashOutput_tUnite_2", true);
				end_Hash.put("tHashOutput_tUnite_2", System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_15 finally ] start
				 */

				currentComponent = "tFileInputExcel_15";

				/**
				 * [tFileInputExcel_15 finally ] stop
				 */

				/**
				 * [tFileInputExcel_21 finally ] start
				 */

				currentComponent = "tFileInputExcel_21";

				/**
				 * [tFileInputExcel_21 finally ] stop
				 */

				/**
				 * [tUnite_2 finally ] start
				 */

				currentComponent = "tUnite_2";

				/**
				 * [tUnite_2 finally ] stop
				 */

				/**
				 * [tHashOutput_tUnite_2 finally ] start
				 */

				currentComponent = "tHashOutput_tUnite_2";

				/**
				 * [tHashOutput_tUnite_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_15_SUBPROCESS_STATE", 1);
	}

	public static class row32Struct implements routines.system.IPersistableComparableLookupRow<row32Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Designation;

		public String getDesignation() {
			return this.Designation;
		}

		public Integer Seuil_tolere___g_m3;

		public Integer getSeuil_tolere___g_m3() {
			return this.Seuil_tolere___g_m3;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row32Struct other = (row32Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			return true;
		}

		public void copyDataTo(row32Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Designation = this.Designation;
			other.Seuil_tolere___g_m3 = this.Seuil_tolere___g_m3;

		}

		public void copyKeysDataTo(row32Struct other) {

			other.ID_Polluant = this.ID_Polluant;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Designation = readString(dis, ois);

				this.Seuil_tolere___g_m3 = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.Designation = readString(dis, objectIn);

				this.Seuil_tolere___g_m3 = readInteger(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Designation, dos, oos);

				writeInteger(this.Seuil_tolere___g_m3, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.Designation, dos, objectOut);

				writeInteger(this.Seuil_tolere___g_m3, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Designation=" + Designation);
			sb.append(",Seuil_tolere___g_m3=" + String.valueOf(Seuil_tolere___g_m3));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row32Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row32Struct row32 = new row32Struct();

				/**
				 * [tAdvancedHash_row32 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row32", false);
				start_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row32";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row32");
				}

				int tos_count_tAdvancedHash_row32 = 0;

				// connection name:row32
				// source node:tFileInputExcel_2 - inputs:(after_tFileInputExcel_6)
				// outputs:(row32,row32) | target node:tAdvancedHash_row32 - inputs:(row32)
				// outputs:()
				// linked node: tMap_5 - inputs:(row13,row32) outputs:(tauxMoyenStatus)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row32 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row32Struct>getLookup(matchingModeEnum_row32);

				globalMap.put("tHash_Lookup_row32", tHash_Lookup_row32);

				/**
				 * [tAdvancedHash_row32 begin ] stop
				 */

				/**
				 * [tFileInputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_2", false);
				start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_2";

				int tos_count_tFileInputExcel_2 = 0;

				final String decryptedPassword_tFileInputExcel_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:oxaQx7uawaxGuO/Lmc8j/BwYb1wXno0CkIBz3Q==");
				String password_tFileInputExcel_2 = decryptedPassword_tFileInputExcel_2;
				if (password_tFileInputExcel_2.isEmpty()) {
					password_tFileInputExcel_2 = null;
				}
				class RegexUtil_tFileInputExcel_2 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

				Object source_tFileInputExcel_2 = "C:/Users/mahdj/Downloads/Données.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

				if (source_tFileInputExcel_2 instanceof String) {
					workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_2), password_tFileInputExcel_2,
									true);
				} else if (source_tFileInputExcel_2 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_2, password_tFileInputExcel_2);
				} else {
					workbook_tFileInputExcel_2 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_2
							.addAll(regexUtil_tFileInputExcel_2.getSheets(workbook_tFileInputExcel_2, "s3", false));
					if (sheetList_tFileInputExcel_2.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
						if (sheet_FilterNull_tFileInputExcel_2 != null
								&& sheetList_FilterNull_tFileInputExcel_2.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
						}
					}
					sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
					if (sheetList_tFileInputExcel_2.size() > 0) {
						int nb_line_tFileInputExcel_2 = 0;

						int begin_line_tFileInputExcel_2 = 1;

						int footer_input_tFileInputExcel_2 = 0;

						int end_line_tFileInputExcel_2 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
							end_line_tFileInputExcel_2 += (sheet_tFileInputExcel_2.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
						int limit_tFileInputExcel_2 = -1;
						int start_column_tFileInputExcel_2 = 1 - 1;
						int end_column_tFileInputExcel_2 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
								.get(0);
						int rowCount_tFileInputExcel_2 = 0;
						int sheetIndex_tFileInputExcel_2 = 0;
						int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++) {

							int emptyColumnCount_tFileInputExcel_2 = 0;

							if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
								break;
							}

							while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
								rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
								sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
										.get(++sheetIndex_tFileInputExcel_2);
								currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_2_CURRENT_SHEET", sheet_tFileInputExcel_2.getSheetName());
							if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
								row_tFileInputExcel_2 = sheet_tFileInputExcel_2
										.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
							}
							row32 = null;
							row32 = null;
							int tempRowLength_tFileInputExcel_2 = 3;

							int columnIndex_tFileInputExcel_2 = 0;

							String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
							int excel_end_column_tFileInputExcel_2;
							if (row_tFileInputExcel_2 == null) {
								excel_end_column_tFileInputExcel_2 = 0;
							} else {
								excel_end_column_tFileInputExcel_2 = row_tFileInputExcel_2.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_2;
							if (end_column_tFileInputExcel_2 == -1) {
								actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
							} else {
								actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 > excel_end_column_tFileInputExcel_2
										? excel_end_column_tFileInputExcel_2
										: end_column_tFileInputExcel_2;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_2; i++) {
								if (i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2
											.getCell(i + start_column_tFileInputExcel_2);
									if (cell_tFileInputExcel_2 != null) {
										switch (cell_tFileInputExcel_2.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_2)) {
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2
														.format(cell_tFileInputExcel_2.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_2[i] = String
													.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_2)) {
													temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_2.getNumericCellValue());
													temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_2[i] = String
														.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_2[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_2[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_2[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_2[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_2 = false;
							row32 = new row32Struct();
							int curColNum_tFileInputExcel_2 = -1;
							String curColName_tFileInputExcel_2 = "";
							try {
								columnIndex_tFileInputExcel_2 = 0;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "ID_Polluant";

									row32.ID_Polluant = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row32.ID_Polluant = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 1;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Designation";

									row32.Designation = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row32.Designation = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 2;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Seuil_tolere___g_m3";

									row32.Seuil_tolere___g_m3 = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row32.Seuil_tolere___g_m3 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								nb_line_tFileInputExcel_2++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_2_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_2 = true;
								System.err.println(e.getMessage());
								row32 = null;
							}

							/**
							 * [tFileInputExcel_2 begin ] stop
							 */

							/**
							 * [tFileInputExcel_2 main ] start
							 */

							currentComponent = "tFileInputExcel_2";

							tos_count_tFileInputExcel_2++;

							/**
							 * [tFileInputExcel_2 main ] stop
							 */

							/**
							 * [tFileInputExcel_2 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_begin ] stop
							 */
// Start of branch "row32"
							if (row32 != null) {

								/**
								 * [tAdvancedHash_row32 main ] start
								 */

								currentComponent = "tAdvancedHash_row32";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row32"

									);
								}

								row32Struct row32_HashRow = new row32Struct();

								row32_HashRow.ID_Polluant = row32.ID_Polluant;

								row32_HashRow.Designation = row32.Designation;

								row32_HashRow.Seuil_tolere___g_m3 = row32.Seuil_tolere___g_m3;

								tHash_Lookup_row32.put(row32_HashRow);

								tos_count_tAdvancedHash_row32++;

								/**
								 * [tAdvancedHash_row32 main ] stop
								 */

								/**
								 * [tAdvancedHash_row32 process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_row32";

								/**
								 * [tAdvancedHash_row32 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row32 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row32";

								/**
								 * [tAdvancedHash_row32 process_data_end ] stop
								 */

							} // End of branch "row32"

							/**
							 * [tFileInputExcel_2 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_2 end ] start
							 */

							currentComponent = "tFileInputExcel_2";

						}

						globalMap.put("tFileInputExcel_2_NB_LINE", nb_line_tFileInputExcel_2);

					}

				} finally {

					if (!(source_tFileInputExcel_2 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_2.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_2", true);
				end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row32 end ] start
				 */

				currentComponent = "tAdvancedHash_row32";

				tHash_Lookup_row32.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row32");
				}

				ok_Hash.put("tAdvancedHash_row32", true);
				end_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row32 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_2 finally ] start
				 */

				currentComponent = "tFileInputExcel_2";

				/**
				 * [tFileInputExcel_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row32 finally ] start
				 */

				currentComponent = "tAdvancedHash_row32";

				/**
				 * [tAdvancedHash_row32 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_3_row34Struct
			implements routines.system.IPersistableRow<tHashInput_tUnite_3_row34Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID_Station;

		public Integer getID_Station() {
			return this.ID_Station;
		}

		public String Numero;

		public String getNumero() {
			return this.Numero;
		}

		public String Rue;

		public String getRue() {
			return this.Rue;
		}

		public Integer Code_postal;

		public Integer getCode_postal() {
			return this.Code_postal;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		public String Contact_Mail;

		public String getContact_Mail() {
			return this.Contact_Mail;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Station == null) ? 0 : this.ID_Station.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final tHashInput_tUnite_3_row34Struct other = (tHashInput_tUnite_3_row34Struct) obj;

			if (this.ID_Station == null) {
				if (other.ID_Station != null)
					return false;

			} else if (!this.ID_Station.equals(other.ID_Station))

				return false;

			return true;
		}

		public void copyDataTo(tHashInput_tUnite_3_row34Struct other) {

			other.ID_Station = this.ID_Station;
			other.Numero = this.Numero;
			other.Rue = this.Rue;
			other.Code_postal = this.Code_postal;
			other.Ville = this.Ville;
			other.Telephone = this.Telephone;
			other.Contact_Mail = this.Contact_Mail;

		}

		public void copyKeysDataTo(tHashInput_tUnite_3_row34Struct other) {

			other.ID_Station = this.ID_Station;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

					this.Numero = readString(dis);

					this.Rue = readString(dis);

					this.Code_postal = readInteger(dis);

					this.Ville = readString(dis);

					this.Telephone = readString(dis);

					this.Contact_Mail = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

					this.Numero = readString(dis);

					this.Rue = readString(dis);

					this.Code_postal = readInteger(dis);

					this.Ville = readString(dis);

					this.Telephone = readString(dis);

					this.Contact_Mail = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

				// String

				writeString(this.Numero, dos);

				// String

				writeString(this.Rue, dos);

				// Integer

				writeInteger(this.Code_postal, dos);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.Telephone, dos);

				// String

				writeString(this.Contact_Mail, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

				// String

				writeString(this.Numero, dos);

				// String

				writeString(this.Rue, dos);

				// Integer

				writeInteger(this.Code_postal, dos);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.Telephone, dos);

				// String

				writeString(this.Contact_Mail, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Numero=" + Numero);
			sb.append(",Rue=" + Rue);
			sb.append(",Code_postal=" + String.valueOf(Code_postal));
			sb.append(",Ville=" + Ville);
			sb.append(",Telephone=" + Telephone);
			sb.append(",Contact_Mail=" + Contact_Mail);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_3_row34Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID_Station;

		public Integer getID_Station() {
			return this.ID_Station;
		}

		public String Numero;

		public String getNumero() {
			return this.Numero;
		}

		public String Rue;

		public String getRue() {
			return this.Rue;
		}

		public Integer Code_postal;

		public Integer getCode_postal() {
			return this.Code_postal;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		public String Contact_Mail;

		public String getContact_Mail() {
			return this.Contact_Mail;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Station == null) ? 0 : this.ID_Station.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.ID_Station == null) {
				if (other.ID_Station != null)
					return false;

			} else if (!this.ID_Station.equals(other.ID_Station))

				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.ID_Station = this.ID_Station;
			other.Numero = this.Numero;
			other.Rue = this.Rue;
			other.Code_postal = this.Code_postal;
			other.Ville = this.Ville;
			other.Telephone = this.Telephone;
			other.Contact_Mail = this.Contact_Mail;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.ID_Station = this.ID_Station;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

					this.Numero = readString(dis);

					this.Rue = readString(dis);

					this.Code_postal = readInteger(dis);

					this.Ville = readString(dis);

					this.Telephone = readString(dis);

					this.Contact_Mail = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

					this.Numero = readString(dis);

					this.Rue = readString(dis);

					this.Code_postal = readInteger(dis);

					this.Ville = readString(dis);

					this.Telephone = readString(dis);

					this.Contact_Mail = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

				// String

				writeString(this.Numero, dos);

				// String

				writeString(this.Rue, dos);

				// Integer

				writeInteger(this.Code_postal, dos);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.Telephone, dos);

				// String

				writeString(this.Contact_Mail, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

				// String

				writeString(this.Numero, dos);

				// String

				writeString(this.Rue, dos);

				// Integer

				writeInteger(this.Code_postal, dos);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.Telephone, dos);

				// String

				writeString(this.Contact_Mail, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Numero=" + Numero);
			sb.append(",Rue=" + Rue);
			sb.append(",Code_postal=" + String.valueOf(Code_postal));
			sb.append(",Ville=" + Ville);
			sb.append(",Telephone=" + Telephone);
			sb.append(",Contact_Mail=" + Contact_Mail);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID_Station;

		public Integer getID_Station() {
			return this.ID_Station;
		}

		public String Numero;

		public String getNumero() {
			return this.Numero;
		}

		public String Rue;

		public String getRue() {
			return this.Rue;
		}

		public Integer Code_postal;

		public Integer getCode_postal() {
			return this.Code_postal;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		public String Contact_Mail;

		public String getContact_Mail() {
			return this.Contact_Mail;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Station == null) ? 0 : this.ID_Station.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.ID_Station == null) {
				if (other.ID_Station != null)
					return false;

			} else if (!this.ID_Station.equals(other.ID_Station))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.ID_Station = this.ID_Station;
			other.Numero = this.Numero;
			other.Rue = this.Rue;
			other.Code_postal = this.Code_postal;
			other.Ville = this.Ville;
			other.Telephone = this.Telephone;
			other.Contact_Mail = this.Contact_Mail;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.ID_Station = this.ID_Station;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

					this.Numero = readString(dis);

					this.Rue = readString(dis);

					this.Code_postal = readInteger(dis);

					this.Ville = readString(dis);

					this.Telephone = readString(dis);

					this.Contact_Mail = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

					this.Numero = readString(dis);

					this.Rue = readString(dis);

					this.Code_postal = readInteger(dis);

					this.Ville = readString(dis);

					this.Telephone = readString(dis);

					this.Contact_Mail = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

				// String

				writeString(this.Numero, dos);

				// String

				writeString(this.Rue, dos);

				// Integer

				writeInteger(this.Code_postal, dos);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.Telephone, dos);

				// String

				writeString(this.Contact_Mail, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

				// String

				writeString(this.Numero, dos);

				// String

				writeString(this.Rue, dos);

				// Integer

				writeInteger(this.Code_postal, dos);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.Telephone, dos);

				// String

				writeString(this.Contact_Mail, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Numero=" + Numero);
			sb.append(",Rue=" + Rue);
			sb.append(",Code_postal=" + String.valueOf(Code_postal));
			sb.append(",Ville=" + Ville);
			sb.append(",Telephone=" + Telephone);
			sb.append(",Contact_Mail=" + Contact_Mail);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				row4Struct row4 = new row4Struct();

				tHashInput_tUnite_3_row34Struct tHashInput_tUnite_3_row34 = new tHashInput_tUnite_3_row34Struct();

				/**
				 * [tHashOutput_tUnite_3 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_3", false);
				start_Hash.put("tHashOutput_tUnite_3", System.currentTimeMillis());

				currentComponent = "tHashOutput_tUnite_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0,
							"tHashInput_tUnite_3_tHashInput_tUnite_3_row34");
				}

				int tos_count_tHashOutput_tUnite_3 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_3 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_3_row34Struct> tHashFile_tHashOutput_tUnite_3 = null;
				String hashKey_tHashOutput_tUnite_3 = "tHashFile_test_" + pid + "_tHashOutput_tUnite_3";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_tUnite_3)) {
					if (mf_tHashOutput_tUnite_3.getResourceMap().get(hashKey_tHashOutput_tUnite_3) == null) {
						mf_tHashOutput_tUnite_3.getResourceMap().put(hashKey_tHashOutput_tUnite_3,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_3_row34Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_tUnite_3 = mf_tHashOutput_tUnite_3.getResourceMap()
								.get(hashKey_tHashOutput_tUnite_3);
					} else {
						tHashFile_tHashOutput_tUnite_3 = mf_tHashOutput_tUnite_3.getResourceMap()
								.get(hashKey_tHashOutput_tUnite_3);
					}
				}
				int nb_line_tHashOutput_tUnite_3 = 0;

				/**
				 * [tHashOutput_tUnite_3 begin ] stop
				 */

				/**
				 * [tUnite_3 begin ] start
				 */

				ok_Hash.put("tUnite_3", false);
				start_Hash.put("tUnite_3", System.currentTimeMillis());

				currentComponent = "tUnite_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4", "row3");
				}

				int tos_count_tUnite_3 = 0;

				int nb_line_tUnite_3 = 0;

				/**
				 * [tUnite_3 begin ] stop
				 */

				/**
				 * [tFileInputExcel_3 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_3", false);
				start_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_3";

				int tos_count_tFileInputExcel_3 = 0;

				final String decryptedPassword_tFileInputExcel_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:u3awQggjB4h6WRvZd31RVCQr3B8ElygA1rsLeg==");
				String password_tFileInputExcel_3 = decryptedPassword_tFileInputExcel_3;
				if (password_tFileInputExcel_3.isEmpty()) {
					password_tFileInputExcel_3 = null;
				}
				class RegexUtil_tFileInputExcel_3 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_3 regexUtil_tFileInputExcel_3 = new RegexUtil_tFileInputExcel_3();

				Object source_tFileInputExcel_3 = "C:/Users/mahdj/Downloads/Données.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_3 = null;

				if (source_tFileInputExcel_3 instanceof String) {
					workbook_tFileInputExcel_3 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_3), password_tFileInputExcel_3,
									true);
				} else if (source_tFileInputExcel_3 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_3 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_3, password_tFileInputExcel_3);
				} else {
					workbook_tFileInputExcel_3 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_3.addAll(
							regexUtil_tFileInputExcel_3.getSheets(workbook_tFileInputExcel_3, "s1_station", false));
					if (sheetList_tFileInputExcel_3.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_3 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
						if (sheet_FilterNull_tFileInputExcel_3 != null
								&& sheetList_FilterNull_tFileInputExcel_3.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_3.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_3.add(sheet_FilterNull_tFileInputExcel_3);
						}
					}
					sheetList_tFileInputExcel_3 = sheetList_FilterNull_tFileInputExcel_3;
					if (sheetList_tFileInputExcel_3.size() > 0) {
						int nb_line_tFileInputExcel_3 = 0;

						int begin_line_tFileInputExcel_3 = 1;

						int footer_input_tFileInputExcel_3 = 0;

						int end_line_tFileInputExcel_3 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3 : sheetList_tFileInputExcel_3) {
							end_line_tFileInputExcel_3 += (sheet_tFileInputExcel_3.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_3 -= footer_input_tFileInputExcel_3;
						int limit_tFileInputExcel_3 = -1;
						int start_column_tFileInputExcel_3 = 1 - 1;
						int end_column_tFileInputExcel_3 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_3 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3
								.get(0);
						int rowCount_tFileInputExcel_3 = 0;
						int sheetIndex_tFileInputExcel_3 = 0;
						int currentRows_tFileInputExcel_3 = (sheetList_tFileInputExcel_3.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_3 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_3 = df_tFileInputExcel_3.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_3 = begin_line_tFileInputExcel_3; i_tFileInputExcel_3 < end_line_tFileInputExcel_3; i_tFileInputExcel_3++) {

							int emptyColumnCount_tFileInputExcel_3 = 0;

							if (limit_tFileInputExcel_3 != -1 && nb_line_tFileInputExcel_3 >= limit_tFileInputExcel_3) {
								break;
							}

							while (i_tFileInputExcel_3 >= rowCount_tFileInputExcel_3 + currentRows_tFileInputExcel_3) {
								rowCount_tFileInputExcel_3 += currentRows_tFileInputExcel_3;
								sheet_tFileInputExcel_3 = sheetList_tFileInputExcel_3
										.get(++sheetIndex_tFileInputExcel_3);
								currentRows_tFileInputExcel_3 = (sheet_tFileInputExcel_3.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_3_CURRENT_SHEET", sheet_tFileInputExcel_3.getSheetName());
							if (rowCount_tFileInputExcel_3 <= i_tFileInputExcel_3) {
								row_tFileInputExcel_3 = sheet_tFileInputExcel_3
										.getRow(i_tFileInputExcel_3 - rowCount_tFileInputExcel_3);
							}
							row3 = null;
							int tempRowLength_tFileInputExcel_3 = 7;

							int columnIndex_tFileInputExcel_3 = 0;

							String[] temp_row_tFileInputExcel_3 = new String[tempRowLength_tFileInputExcel_3];
							int excel_end_column_tFileInputExcel_3;
							if (row_tFileInputExcel_3 == null) {
								excel_end_column_tFileInputExcel_3 = 0;
							} else {
								excel_end_column_tFileInputExcel_3 = row_tFileInputExcel_3.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_3;
							if (end_column_tFileInputExcel_3 == -1) {
								actual_end_column_tFileInputExcel_3 = excel_end_column_tFileInputExcel_3;
							} else {
								actual_end_column_tFileInputExcel_3 = end_column_tFileInputExcel_3 > excel_end_column_tFileInputExcel_3
										? excel_end_column_tFileInputExcel_3
										: end_column_tFileInputExcel_3;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_3 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_3; i++) {
								if (i + start_column_tFileInputExcel_3 < actual_end_column_tFileInputExcel_3) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_3 = row_tFileInputExcel_3
											.getCell(i + start_column_tFileInputExcel_3);
									if (cell_tFileInputExcel_3 != null) {
										switch (cell_tFileInputExcel_3.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_3)) {
												temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_3[i] = df_tFileInputExcel_3
														.format(cell_tFileInputExcel_3.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_3[i] = String
													.valueOf(cell_tFileInputExcel_3.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_3.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_3)) {
													temp_row_tFileInputExcel_3[i] = cell_tFileInputExcel_3
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_3 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_3.getNumericCellValue());
													temp_row_tFileInputExcel_3[i] = ne_tFileInputExcel_3
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_3[i] = String
														.valueOf(cell_tFileInputExcel_3.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_3[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_3[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_3[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_3[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_3 = false;
							row3 = new row3Struct();
							int curColNum_tFileInputExcel_3 = -1;
							String curColName_tFileInputExcel_3 = "";
							try {
								columnIndex_tFileInputExcel_3 = 0;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "ID_Station";

									row3.ID_Station = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3], null,
											'.' == decimalChar_tFileInputExcel_3 ? null
													: decimalChar_tFileInputExcel_3));
								} else {
									row3.ID_Station = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 1;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "Numero";

									row3.Numero = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.Numero = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 2;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "Rue";

									row3.Rue = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.Rue = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 3;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "Code_postal";

									row3.Code_postal = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3], null,
											'.' == decimalChar_tFileInputExcel_3 ? null
													: decimalChar_tFileInputExcel_3));
								} else {
									row3.Code_postal = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 4;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "Ville";

									row3.Ville = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.Ville = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 5;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "Telephone";

									row3.Telephone = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.Telephone = null;
									emptyColumnCount_tFileInputExcel_3++;
								}
								columnIndex_tFileInputExcel_3 = 6;

								if (temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3].length() > 0) {
									curColNum_tFileInputExcel_3 = columnIndex_tFileInputExcel_3
											+ start_column_tFileInputExcel_3 + 1;
									curColName_tFileInputExcel_3 = "Contact_Mail";

									row3.Contact_Mail = temp_row_tFileInputExcel_3[columnIndex_tFileInputExcel_3];
								} else {
									row3.Contact_Mail = null;
									emptyColumnCount_tFileInputExcel_3++;
								}

								nb_line_tFileInputExcel_3++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_3_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_3 = true;
								System.err.println(e.getMessage());
								row3 = null;
							}

							/**
							 * [tFileInputExcel_3 begin ] stop
							 */

							/**
							 * [tFileInputExcel_3 main ] start
							 */

							currentComponent = "tFileInputExcel_3";

							tos_count_tFileInputExcel_3++;

							/**
							 * [tFileInputExcel_3 main ] stop
							 */

							/**
							 * [tFileInputExcel_3 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_3";

							/**
							 * [tFileInputExcel_3 process_data_begin ] stop
							 */
// Start of branch "row3"
							if (row3 != null) {

								/**
								 * [tUnite_3 main ] start
								 */

								currentComponent = "tUnite_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row3"

									);
								}

//////////

// for output
								tHashInput_tUnite_3_row34 = new tHashInput_tUnite_3_row34Struct();

								tHashInput_tUnite_3_row34.ID_Station = row3.ID_Station;
								tHashInput_tUnite_3_row34.Numero = row3.Numero;
								tHashInput_tUnite_3_row34.Rue = row3.Rue;
								tHashInput_tUnite_3_row34.Code_postal = row3.Code_postal;
								tHashInput_tUnite_3_row34.Ville = row3.Ville;
								tHashInput_tUnite_3_row34.Telephone = row3.Telephone;
								tHashInput_tUnite_3_row34.Contact_Mail = row3.Contact_Mail;

								nb_line_tUnite_3++;

//////////

								tos_count_tUnite_3++;

								/**
								 * [tUnite_3 main ] stop
								 */

								/**
								 * [tUnite_3 process_data_begin ] start
								 */

								currentComponent = "tUnite_3";

								/**
								 * [tUnite_3 process_data_begin ] stop
								 */

								/**
								 * [tHashOutput_tUnite_3 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "tHashInput_tUnite_3_tHashInput_tUnite_3_row34"

									);
								}

								tHashInput_tUnite_3_row34Struct oneRow_tHashOutput_tUnite_3 = new tHashInput_tUnite_3_row34Struct();

								oneRow_tHashOutput_tUnite_3.ID_Station = tHashInput_tUnite_3_row34.ID_Station;
								oneRow_tHashOutput_tUnite_3.Numero = tHashInput_tUnite_3_row34.Numero;
								oneRow_tHashOutput_tUnite_3.Rue = tHashInput_tUnite_3_row34.Rue;
								oneRow_tHashOutput_tUnite_3.Code_postal = tHashInput_tUnite_3_row34.Code_postal;
								oneRow_tHashOutput_tUnite_3.Ville = tHashInput_tUnite_3_row34.Ville;
								oneRow_tHashOutput_tUnite_3.Telephone = tHashInput_tUnite_3_row34.Telephone;
								oneRow_tHashOutput_tUnite_3.Contact_Mail = tHashInput_tUnite_3_row34.Contact_Mail;

								tHashFile_tHashOutput_tUnite_3.put(oneRow_tHashOutput_tUnite_3);
								nb_line_tHashOutput_tUnite_3++;

								tos_count_tHashOutput_tUnite_3++;

								/**
								 * [tHashOutput_tUnite_3 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_3 process_data_begin ] start
								 */

								currentComponent = "tHashOutput_tUnite_3";

								/**
								 * [tHashOutput_tUnite_3 process_data_begin ] stop
								 */

								/**
								 * [tHashOutput_tUnite_3 process_data_end ] start
								 */

								currentComponent = "tHashOutput_tUnite_3";

								/**
								 * [tHashOutput_tUnite_3 process_data_end ] stop
								 */

								/**
								 * [tUnite_3 process_data_end ] start
								 */

								currentComponent = "tUnite_3";

								/**
								 * [tUnite_3 process_data_end ] stop
								 */

							} // End of branch "row3"

							/**
							 * [tFileInputExcel_3 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_3";

							/**
							 * [tFileInputExcel_3 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_3 end ] start
							 */

							currentComponent = "tFileInputExcel_3";

						}

						globalMap.put("tFileInputExcel_3_NB_LINE", nb_line_tFileInputExcel_3);

					}

				} finally {

					if (!(source_tFileInputExcel_3 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_3.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_3", true);
				end_Hash.put("tFileInputExcel_3", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_3 end ] stop
				 */

				/**
				 * [tFileInputExcel_10 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_10", false);
				start_Hash.put("tFileInputExcel_10", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_10";

				int tos_count_tFileInputExcel_10 = 0;

				final String decryptedPassword_tFileInputExcel_10 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:sNRASHYdFhu5wuH5Ky7Vykl0wpLwXTNSZ82Mpw==");
				String password_tFileInputExcel_10 = decryptedPassword_tFileInputExcel_10;
				if (password_tFileInputExcel_10.isEmpty()) {
					password_tFileInputExcel_10 = null;
				}
				class RegexUtil_tFileInputExcel_10 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_10 regexUtil_tFileInputExcel_10 = new RegexUtil_tFileInputExcel_10();

				Object source_tFileInputExcel_10 = "C:/Users/mahdj/Downloads/Données.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_10 = null;

				if (source_tFileInputExcel_10 instanceof String) {
					workbook_tFileInputExcel_10 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_10), password_tFileInputExcel_10,
									true);
				} else if (source_tFileInputExcel_10 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_10 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_10, password_tFileInputExcel_10);
				} else {
					workbook_tFileInputExcel_10 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_10 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_10.addAll(
							regexUtil_tFileInputExcel_10.getSheets(workbook_tFileInputExcel_10, "s2_station", false));
					if (sheetList_tFileInputExcel_10.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_10 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_10 : sheetList_tFileInputExcel_10) {
						if (sheet_FilterNull_tFileInputExcel_10 != null
								&& sheetList_FilterNull_tFileInputExcel_10.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_10.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_10.add(sheet_FilterNull_tFileInputExcel_10);
						}
					}
					sheetList_tFileInputExcel_10 = sheetList_FilterNull_tFileInputExcel_10;
					if (sheetList_tFileInputExcel_10.size() > 0) {
						int nb_line_tFileInputExcel_10 = 0;

						int begin_line_tFileInputExcel_10 = 1;

						int footer_input_tFileInputExcel_10 = 0;

						int end_line_tFileInputExcel_10 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_10 : sheetList_tFileInputExcel_10) {
							end_line_tFileInputExcel_10 += (sheet_tFileInputExcel_10.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_10 -= footer_input_tFileInputExcel_10;
						int limit_tFileInputExcel_10 = -1;
						int start_column_tFileInputExcel_10 = 1 - 1;
						int end_column_tFileInputExcel_10 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_10 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_10 = sheetList_tFileInputExcel_10
								.get(0);
						int rowCount_tFileInputExcel_10 = 0;
						int sheetIndex_tFileInputExcel_10 = 0;
						int currentRows_tFileInputExcel_10 = (sheetList_tFileInputExcel_10.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_10 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_10 = df_tFileInputExcel_10.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_10 = begin_line_tFileInputExcel_10; i_tFileInputExcel_10 < end_line_tFileInputExcel_10; i_tFileInputExcel_10++) {

							int emptyColumnCount_tFileInputExcel_10 = 0;

							if (limit_tFileInputExcel_10 != -1
									&& nb_line_tFileInputExcel_10 >= limit_tFileInputExcel_10) {
								break;
							}

							while (i_tFileInputExcel_10 >= rowCount_tFileInputExcel_10
									+ currentRows_tFileInputExcel_10) {
								rowCount_tFileInputExcel_10 += currentRows_tFileInputExcel_10;
								sheet_tFileInputExcel_10 = sheetList_tFileInputExcel_10
										.get(++sheetIndex_tFileInputExcel_10);
								currentRows_tFileInputExcel_10 = (sheet_tFileInputExcel_10.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_10_CURRENT_SHEET", sheet_tFileInputExcel_10.getSheetName());
							if (rowCount_tFileInputExcel_10 <= i_tFileInputExcel_10) {
								row_tFileInputExcel_10 = sheet_tFileInputExcel_10
										.getRow(i_tFileInputExcel_10 - rowCount_tFileInputExcel_10);
							}
							row4 = null;
							int tempRowLength_tFileInputExcel_10 = 7;

							int columnIndex_tFileInputExcel_10 = 0;

							String[] temp_row_tFileInputExcel_10 = new String[tempRowLength_tFileInputExcel_10];
							int excel_end_column_tFileInputExcel_10;
							if (row_tFileInputExcel_10 == null) {
								excel_end_column_tFileInputExcel_10 = 0;
							} else {
								excel_end_column_tFileInputExcel_10 = row_tFileInputExcel_10.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_10;
							if (end_column_tFileInputExcel_10 == -1) {
								actual_end_column_tFileInputExcel_10 = excel_end_column_tFileInputExcel_10;
							} else {
								actual_end_column_tFileInputExcel_10 = end_column_tFileInputExcel_10 > excel_end_column_tFileInputExcel_10
										? excel_end_column_tFileInputExcel_10
										: end_column_tFileInputExcel_10;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_10 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_10; i++) {
								if (i + start_column_tFileInputExcel_10 < actual_end_column_tFileInputExcel_10) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_10 = row_tFileInputExcel_10
											.getCell(i + start_column_tFileInputExcel_10);
									if (cell_tFileInputExcel_10 != null) {
										switch (cell_tFileInputExcel_10.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_10[i] = cell_tFileInputExcel_10
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_10)) {
												temp_row_tFileInputExcel_10[i] = cell_tFileInputExcel_10
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_10[i] = df_tFileInputExcel_10
														.format(cell_tFileInputExcel_10.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_10[i] = String
													.valueOf(cell_tFileInputExcel_10.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_10.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_10[i] = cell_tFileInputExcel_10
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_10)) {
													temp_row_tFileInputExcel_10[i] = cell_tFileInputExcel_10
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_10 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_10.getNumericCellValue());
													temp_row_tFileInputExcel_10[i] = ne_tFileInputExcel_10
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_10[i] = String
														.valueOf(cell_tFileInputExcel_10.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_10[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_10[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_10[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_10[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_10 = false;
							row4 = new row4Struct();
							int curColNum_tFileInputExcel_10 = -1;
							String curColName_tFileInputExcel_10 = "";
							try {
								columnIndex_tFileInputExcel_10 = 0;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "ID_Station";

									row4.ID_Station = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10], null,
											'.' == decimalChar_tFileInputExcel_10 ? null
													: decimalChar_tFileInputExcel_10));
								} else {
									row4.ID_Station = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 1;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "Numero";

									row4.Numero = temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10];
								} else {
									row4.Numero = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 2;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "Rue";

									row4.Rue = temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10];
								} else {
									row4.Rue = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 3;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "Code_postal";

									row4.Code_postal = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10], null,
											'.' == decimalChar_tFileInputExcel_10 ? null
													: decimalChar_tFileInputExcel_10));
								} else {
									row4.Code_postal = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 4;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "Ville";

									row4.Ville = temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10];
								} else {
									row4.Ville = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 5;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "Telephone";

									row4.Telephone = temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10];
								} else {
									row4.Telephone = null;
									emptyColumnCount_tFileInputExcel_10++;
								}
								columnIndex_tFileInputExcel_10 = 6;

								if (temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10].length() > 0) {
									curColNum_tFileInputExcel_10 = columnIndex_tFileInputExcel_10
											+ start_column_tFileInputExcel_10 + 1;
									curColName_tFileInputExcel_10 = "Contact_Mail";

									row4.Contact_Mail = temp_row_tFileInputExcel_10[columnIndex_tFileInputExcel_10];
								} else {
									row4.Contact_Mail = null;
									emptyColumnCount_tFileInputExcel_10++;
								}

								nb_line_tFileInputExcel_10++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_10_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_10 = true;
								System.err.println(e.getMessage());
								row4 = null;
							}

							/**
							 * [tFileInputExcel_10 begin ] stop
							 */

							/**
							 * [tFileInputExcel_10 main ] start
							 */

							currentComponent = "tFileInputExcel_10";

							tos_count_tFileInputExcel_10++;

							/**
							 * [tFileInputExcel_10 main ] stop
							 */

							/**
							 * [tFileInputExcel_10 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_10";

							/**
							 * [tFileInputExcel_10 process_data_begin ] stop
							 */
// Start of branch "row4"
							if (row4 != null) {

								/**
								 * [tUnite_3 main ] start
								 */

								currentComponent = "tUnite_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row4"

									);
								}

//////////

// for output
								tHashInput_tUnite_3_row34 = new tHashInput_tUnite_3_row34Struct();

								tHashInput_tUnite_3_row34.ID_Station = row4.ID_Station;
								tHashInput_tUnite_3_row34.Numero = row4.Numero;
								tHashInput_tUnite_3_row34.Rue = row4.Rue;
								tHashInput_tUnite_3_row34.Code_postal = row4.Code_postal;
								tHashInput_tUnite_3_row34.Ville = row4.Ville;
								tHashInput_tUnite_3_row34.Telephone = row4.Telephone;
								tHashInput_tUnite_3_row34.Contact_Mail = row4.Contact_Mail;

								nb_line_tUnite_3++;

//////////

								tos_count_tUnite_3++;

								/**
								 * [tUnite_3 main ] stop
								 */

								/**
								 * [tUnite_3 process_data_begin ] start
								 */

								currentComponent = "tUnite_3";

								/**
								 * [tUnite_3 process_data_begin ] stop
								 */

								/**
								 * [tHashOutput_tUnite_3 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "tHashInput_tUnite_3_tHashInput_tUnite_3_row34"

									);
								}

								tHashInput_tUnite_3_row34Struct oneRow_tHashOutput_tUnite_3 = new tHashInput_tUnite_3_row34Struct();

								oneRow_tHashOutput_tUnite_3.ID_Station = tHashInput_tUnite_3_row34.ID_Station;
								oneRow_tHashOutput_tUnite_3.Numero = tHashInput_tUnite_3_row34.Numero;
								oneRow_tHashOutput_tUnite_3.Rue = tHashInput_tUnite_3_row34.Rue;
								oneRow_tHashOutput_tUnite_3.Code_postal = tHashInput_tUnite_3_row34.Code_postal;
								oneRow_tHashOutput_tUnite_3.Ville = tHashInput_tUnite_3_row34.Ville;
								oneRow_tHashOutput_tUnite_3.Telephone = tHashInput_tUnite_3_row34.Telephone;
								oneRow_tHashOutput_tUnite_3.Contact_Mail = tHashInput_tUnite_3_row34.Contact_Mail;

								tHashFile_tHashOutput_tUnite_3.put(oneRow_tHashOutput_tUnite_3);
								nb_line_tHashOutput_tUnite_3++;

								tos_count_tHashOutput_tUnite_3++;

								/**
								 * [tHashOutput_tUnite_3 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_3 process_data_begin ] start
								 */

								currentComponent = "tHashOutput_tUnite_3";

								/**
								 * [tHashOutput_tUnite_3 process_data_begin ] stop
								 */

								/**
								 * [tHashOutput_tUnite_3 process_data_end ] start
								 */

								currentComponent = "tHashOutput_tUnite_3";

								/**
								 * [tHashOutput_tUnite_3 process_data_end ] stop
								 */

								/**
								 * [tUnite_3 process_data_end ] start
								 */

								currentComponent = "tUnite_3";

								/**
								 * [tUnite_3 process_data_end ] stop
								 */

							} // End of branch "row4"

							/**
							 * [tFileInputExcel_10 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_10";

							/**
							 * [tFileInputExcel_10 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_10 end ] start
							 */

							currentComponent = "tFileInputExcel_10";

						}

						globalMap.put("tFileInputExcel_10_NB_LINE", nb_line_tFileInputExcel_10);

					}

				} finally {

					if (!(source_tFileInputExcel_10 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_10.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_10", true);
				end_Hash.put("tFileInputExcel_10", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_10 end ] stop
				 */

				/**
				 * [tUnite_3 end ] start
				 */

				currentComponent = "tUnite_3";

				globalMap.put("tUnite_3_NB_LINE", nb_line_tUnite_3);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4", "row3");
				}

				ok_Hash.put("tUnite_3", true);
				end_Hash.put("tUnite_3", System.currentTimeMillis());

				/**
				 * [tUnite_3 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_3 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_3";

				globalMap.put("tHashOutput_tUnite_3_NB_LINE", nb_line_tHashOutput_tUnite_3);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "tHashInput_tUnite_3_tHashInput_tUnite_3_row34");
				}

				ok_Hash.put("tHashOutput_tUnite_3", true);
				end_Hash.put("tHashOutput_tUnite_3", System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_3 finally ] start
				 */

				currentComponent = "tFileInputExcel_3";

				/**
				 * [tFileInputExcel_3 finally ] stop
				 */

				/**
				 * [tFileInputExcel_10 finally ] start
				 */

				currentComponent = "tFileInputExcel_10";

				/**
				 * [tFileInputExcel_10 finally ] stop
				 */

				/**
				 * [tUnite_3 finally ] start
				 */

				currentComponent = "tUnite_3";

				/**
				 * [tUnite_3 finally ] stop
				 */

				/**
				 * [tHashOutput_tUnite_3 finally ] start
				 */

				currentComponent = "tHashOutput_tUnite_3";

				/**
				 * [tHashOutput_tUnite_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_3_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_1_row7Struct
			implements routines.system.IPersistableRow<tHashInput_tUnite_1_row7Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Integer ID_Station;

		public Integer getID_Station() {
			return this.ID_Station;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.ID_Station == null) ? 0 : this.ID_Station.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final tHashInput_tUnite_1_row7Struct other = (tHashInput_tUnite_1_row7Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Station == null) {
				if (other.ID_Station != null)
					return false;

			} else if (!this.ID_Station.equals(other.ID_Station))

				return false;

			return true;
		}

		public void copyDataTo(tHashInput_tUnite_1_row7Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;
			other.Taux_Releve = this.Taux_Releve;

		}

		public void copyKeysDataTo(tHashInput_tUnite_1_row7Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Station = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Station = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Integer

				writeInteger(this.ID_Station, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Integer

				writeInteger(this.ID_Station, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_1_row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Integer ID_Station;

		public Integer getID_Station() {
			return this.ID_Station;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.ID_Station == null) ? 0 : this.ID_Station.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Station == null) {
				if (other.ID_Station != null)
					return false;

			} else if (!this.ID_Station.equals(other.ID_Station))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;
			other.Taux_Releve = this.Taux_Releve;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Station = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Station = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Integer

				writeInteger(this.ID_Station, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Integer

				writeInteger(this.ID_Station, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Integer ID_Station;

		public Integer getID_Station() {
			return this.ID_Station;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.ID_Station == null) ? 0 : this.ID_Station.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Station == null) {
				if (other.ID_Station != null)
					return false;

			} else if (!this.ID_Station.equals(other.ID_Station))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;
			other.Taux_Releve = this.Taux_Releve;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Station = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Station = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Integer

				writeInteger(this.ID_Station, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Integer

				writeInteger(this.ID_Station, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				row2Struct row2 = new row2Struct();

				tHashInput_tUnite_1_row7Struct tHashInput_tUnite_1_row7 = new tHashInput_tUnite_1_row7Struct();

				/**
				 * [tHashOutput_tUnite_1 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_1", false);
				start_Hash.put("tHashOutput_tUnite_1", System.currentTimeMillis());

				currentComponent = "tHashOutput_tUnite_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0,
							"tHashInput_tUnite_1_tHashInput_tUnite_1_row7");
				}

				int tos_count_tHashOutput_tUnite_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_1_row7Struct> tHashFile_tHashOutput_tUnite_1 = null;
				String hashKey_tHashOutput_tUnite_1 = "tHashFile_test_" + pid + "_tHashOutput_tUnite_1";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_tUnite_1)) {
					if (mf_tHashOutput_tUnite_1.getResourceMap().get(hashKey_tHashOutput_tUnite_1) == null) {
						mf_tHashOutput_tUnite_1.getResourceMap().put(hashKey_tHashOutput_tUnite_1,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_1_row7Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_tUnite_1 = mf_tHashOutput_tUnite_1.getResourceMap()
								.get(hashKey_tHashOutput_tUnite_1);
					} else {
						tHashFile_tHashOutput_tUnite_1 = mf_tHashOutput_tUnite_1.getResourceMap()
								.get(hashKey_tHashOutput_tUnite_1);
					}
				}
				int nb_line_tHashOutput_tUnite_1 = 0;

				/**
				 * [tHashOutput_tUnite_1 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1", "row2");
				}

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_6 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_6", false);
				start_Hash.put("tFileInputExcel_6", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_6";

				int tos_count_tFileInputExcel_6 = 0;

				final String decryptedPassword_tFileInputExcel_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:wal1/X7BW1bratzp4RvCDmDvfsovKvQU/QVSJw==");
				String password_tFileInputExcel_6 = decryptedPassword_tFileInputExcel_6;
				if (password_tFileInputExcel_6.isEmpty()) {
					password_tFileInputExcel_6 = null;
				}
				class RegexUtil_tFileInputExcel_6 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_6 regexUtil_tFileInputExcel_6 = new RegexUtil_tFileInputExcel_6();

				Object source_tFileInputExcel_6 = "C:/Users/mahdj/Downloads/Données.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_6 = null;

				if (source_tFileInputExcel_6 instanceof String) {
					workbook_tFileInputExcel_6 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_6), password_tFileInputExcel_6,
									true);
				} else if (source_tFileInputExcel_6 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_6 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_6, password_tFileInputExcel_6);
				} else {
					workbook_tFileInputExcel_6 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_6 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_6.addAll(
							regexUtil_tFileInputExcel_6.getSheets(workbook_tFileInputExcel_6, "s2_mesure", false));
					if (sheetList_tFileInputExcel_6.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_6 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_6 : sheetList_tFileInputExcel_6) {
						if (sheet_FilterNull_tFileInputExcel_6 != null
								&& sheetList_FilterNull_tFileInputExcel_6.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_6.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_6.add(sheet_FilterNull_tFileInputExcel_6);
						}
					}
					sheetList_tFileInputExcel_6 = sheetList_FilterNull_tFileInputExcel_6;
					if (sheetList_tFileInputExcel_6.size() > 0) {
						int nb_line_tFileInputExcel_6 = 0;

						int begin_line_tFileInputExcel_6 = 1;

						int footer_input_tFileInputExcel_6 = 0;

						int end_line_tFileInputExcel_6 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_6 : sheetList_tFileInputExcel_6) {
							end_line_tFileInputExcel_6 += (sheet_tFileInputExcel_6.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_6 -= footer_input_tFileInputExcel_6;
						int limit_tFileInputExcel_6 = -1;
						int start_column_tFileInputExcel_6 = 1 - 1;
						int end_column_tFileInputExcel_6 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_6 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_6 = sheetList_tFileInputExcel_6
								.get(0);
						int rowCount_tFileInputExcel_6 = 0;
						int sheetIndex_tFileInputExcel_6 = 0;
						int currentRows_tFileInputExcel_6 = (sheetList_tFileInputExcel_6.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_6 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_6 = df_tFileInputExcel_6.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_6 = begin_line_tFileInputExcel_6; i_tFileInputExcel_6 < end_line_tFileInputExcel_6; i_tFileInputExcel_6++) {

							int emptyColumnCount_tFileInputExcel_6 = 0;

							if (limit_tFileInputExcel_6 != -1 && nb_line_tFileInputExcel_6 >= limit_tFileInputExcel_6) {
								break;
							}

							while (i_tFileInputExcel_6 >= rowCount_tFileInputExcel_6 + currentRows_tFileInputExcel_6) {
								rowCount_tFileInputExcel_6 += currentRows_tFileInputExcel_6;
								sheet_tFileInputExcel_6 = sheetList_tFileInputExcel_6
										.get(++sheetIndex_tFileInputExcel_6);
								currentRows_tFileInputExcel_6 = (sheet_tFileInputExcel_6.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_6_CURRENT_SHEET", sheet_tFileInputExcel_6.getSheetName());
							if (rowCount_tFileInputExcel_6 <= i_tFileInputExcel_6) {
								row_tFileInputExcel_6 = sheet_tFileInputExcel_6
										.getRow(i_tFileInputExcel_6 - rowCount_tFileInputExcel_6);
							}
							row1 = null;
							int tempRowLength_tFileInputExcel_6 = 4;

							int columnIndex_tFileInputExcel_6 = 0;

							String[] temp_row_tFileInputExcel_6 = new String[tempRowLength_tFileInputExcel_6];
							int excel_end_column_tFileInputExcel_6;
							if (row_tFileInputExcel_6 == null) {
								excel_end_column_tFileInputExcel_6 = 0;
							} else {
								excel_end_column_tFileInputExcel_6 = row_tFileInputExcel_6.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_6;
							if (end_column_tFileInputExcel_6 == -1) {
								actual_end_column_tFileInputExcel_6 = excel_end_column_tFileInputExcel_6;
							} else {
								actual_end_column_tFileInputExcel_6 = end_column_tFileInputExcel_6 > excel_end_column_tFileInputExcel_6
										? excel_end_column_tFileInputExcel_6
										: end_column_tFileInputExcel_6;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_6 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_6; i++) {
								if (i + start_column_tFileInputExcel_6 < actual_end_column_tFileInputExcel_6) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_6 = row_tFileInputExcel_6
											.getCell(i + start_column_tFileInputExcel_6);
									if (cell_tFileInputExcel_6 != null) {
										switch (cell_tFileInputExcel_6.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_6[i] = cell_tFileInputExcel_6
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_6)) {
												temp_row_tFileInputExcel_6[i] = cell_tFileInputExcel_6
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_6[i] = df_tFileInputExcel_6
														.format(cell_tFileInputExcel_6.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_6[i] = String
													.valueOf(cell_tFileInputExcel_6.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_6.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_6[i] = cell_tFileInputExcel_6
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_6)) {
													temp_row_tFileInputExcel_6[i] = cell_tFileInputExcel_6
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_6 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_6.getNumericCellValue());
													temp_row_tFileInputExcel_6[i] = ne_tFileInputExcel_6
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_6[i] = String
														.valueOf(cell_tFileInputExcel_6.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_6[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_6[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_6[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_6[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_6 = false;
							row1 = new row1Struct();
							int curColNum_tFileInputExcel_6 = -1;
							String curColName_tFileInputExcel_6 = "";
							try {
								columnIndex_tFileInputExcel_6 = 0;

								if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6].length() > 0) {
									curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
											+ start_column_tFileInputExcel_6 + 1;
									curColName_tFileInputExcel_6 = "ID_Polluant";

									row1.ID_Polluant = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6];
								} else {
									row1.ID_Polluant = null;
									emptyColumnCount_tFileInputExcel_6++;
								}
								columnIndex_tFileInputExcel_6 = 1;

								if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6].length() > 0) {
									curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
											+ start_column_tFileInputExcel_6 + 1;
									curColName_tFileInputExcel_6 = "Date";

									row1.Date = temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6];
								} else {
									row1.Date = null;
									emptyColumnCount_tFileInputExcel_6++;
								}
								columnIndex_tFileInputExcel_6 = 2;

								if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6].length() > 0) {
									curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
											+ start_column_tFileInputExcel_6 + 1;
									curColName_tFileInputExcel_6 = "ID_Station";

									row1.ID_Station = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6], null,
											'.' == decimalChar_tFileInputExcel_6 ? null
													: decimalChar_tFileInputExcel_6));
								} else {
									row1.ID_Station = null;
									emptyColumnCount_tFileInputExcel_6++;
								}
								columnIndex_tFileInputExcel_6 = 3;

								if (temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6].length() > 0) {
									curColNum_tFileInputExcel_6 = columnIndex_tFileInputExcel_6
											+ start_column_tFileInputExcel_6 + 1;
									curColName_tFileInputExcel_6 = "Taux_Releve";

									row1.Taux_Releve = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_6[columnIndex_tFileInputExcel_6], null,
											'.' == decimalChar_tFileInputExcel_6 ? null
													: decimalChar_tFileInputExcel_6));
								} else {
									row1.Taux_Releve = null;
									emptyColumnCount_tFileInputExcel_6++;
								}

								nb_line_tFileInputExcel_6++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_6_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_6 = true;
								System.err.println(e.getMessage());
								row1 = null;
							}

							/**
							 * [tFileInputExcel_6 begin ] stop
							 */

							/**
							 * [tFileInputExcel_6 main ] start
							 */

							currentComponent = "tFileInputExcel_6";

							tos_count_tFileInputExcel_6++;

							/**
							 * [tFileInputExcel_6 main ] stop
							 */

							/**
							 * [tFileInputExcel_6 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_6";

							/**
							 * [tFileInputExcel_6 process_data_begin ] stop
							 */
// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row1"

									);
								}

//////////

// for output
								tHashInput_tUnite_1_row7 = new tHashInput_tUnite_1_row7Struct();

								tHashInput_tUnite_1_row7.ID_Polluant = row1.ID_Polluant;
								tHashInput_tUnite_1_row7.Date = row1.Date;
								tHashInput_tUnite_1_row7.ID_Station = row1.ID_Station;
								tHashInput_tUnite_1_row7.Taux_Releve = row1.Taux_Releve;

								nb_line_tUnite_1++;

//////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUnite_1 process_data_begin ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_begin ] stop
								 */

								/**
								 * [tHashOutput_tUnite_1 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "tHashInput_tUnite_1_tHashInput_tUnite_1_row7"

									);
								}

								tHashInput_tUnite_1_row7Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row7Struct();

								oneRow_tHashOutput_tUnite_1.ID_Polluant = tHashInput_tUnite_1_row7.ID_Polluant;
								oneRow_tHashOutput_tUnite_1.Date = tHashInput_tUnite_1_row7.Date;
								oneRow_tHashOutput_tUnite_1.ID_Station = tHashInput_tUnite_1_row7.ID_Station;
								oneRow_tHashOutput_tUnite_1.Taux_Releve = tHashInput_tUnite_1_row7.Taux_Releve;

								tHashFile_tHashOutput_tUnite_1.put(oneRow_tHashOutput_tUnite_1);
								nb_line_tHashOutput_tUnite_1++;

								tos_count_tHashOutput_tUnite_1++;

								/**
								 * [tHashOutput_tUnite_1 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_1 process_data_begin ] start
								 */

								currentComponent = "tHashOutput_tUnite_1";

								/**
								 * [tHashOutput_tUnite_1 process_data_begin ] stop
								 */

								/**
								 * [tHashOutput_tUnite_1 process_data_end ] start
								 */

								currentComponent = "tHashOutput_tUnite_1";

								/**
								 * [tHashOutput_tUnite_1 process_data_end ] stop
								 */

								/**
								 * [tUnite_1 process_data_end ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_end ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tFileInputExcel_6 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_6";

							/**
							 * [tFileInputExcel_6 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_6 end ] start
							 */

							currentComponent = "tFileInputExcel_6";

						}

						globalMap.put("tFileInputExcel_6_NB_LINE", nb_line_tFileInputExcel_6);

					}

				} finally {

					if (!(source_tFileInputExcel_6 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_6.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_6", true);
				end_Hash.put("tFileInputExcel_6", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_6 end ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:vPoWUdTDW41TWJueyxJghUcitn/jCBv3UFr1Fg==");
				String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
				if (password_tFileInputExcel_1.isEmpty()) {
					password_tFileInputExcel_1 = null;
				}
				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

				Object source_tFileInputExcel_1 = "C:/Users/mahdj/Downloads/Données.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof String) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_1), password_tFileInputExcel_1,
									true);
				} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_1, password_tFileInputExcel_1);
				} else {
					workbook_tFileInputExcel_1 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					sheetList_tFileInputExcel_1.addAll(
							regexUtil_tFileInputExcel_1.getSheets(workbook_tFileInputExcel_1, "s1_mesure", false));
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1 != null
								&& sheetList_FilterNull_tFileInputExcel_1.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 1;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += (sheet_tFileInputExcel_1.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = -1;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET", sheet_tFileInputExcel_1.getSheetName());
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
							}
							row2 = null;
							int tempRowLength_tFileInputExcel_1 = 4;

							int columnIndex_tFileInputExcel_1 = 0;

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int excel_end_column_tFileInputExcel_1;
							if (row_tFileInputExcel_1 == null) {
								excel_end_column_tFileInputExcel_1 = 0;
							} else {
								excel_end_column_tFileInputExcel_1 = row_tFileInputExcel_1.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_1;
							if (end_column_tFileInputExcel_1 == -1) {
								actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
							} else {
								actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > excel_end_column_tFileInputExcel_1
										? excel_end_column_tFileInputExcel_1
										: end_column_tFileInputExcel_1;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {
								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1
											.getCell(i + start_column_tFileInputExcel_1);
									if (cell_tFileInputExcel_1 != null) {
										switch (cell_tFileInputExcel_1.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_1)) {
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
														.format(cell_tFileInputExcel_1.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_1[i] = String
													.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_1)) {
													temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_1.getNumericCellValue());
													temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_1[i] = String
														.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_1[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_1[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_1[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_1 = false;
							row2 = new row2Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ID_Polluant";

									row2.ID_Polluant = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row2.ID_Polluant = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Date";

									row2.Date = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row2.Date = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 2;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ID_Station";

									row2.ID_Station = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row2.ID_Station = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 3;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Taux_Releve";

									row2.Taux_Releve = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row2.Taux_Releve = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								globalMap.put("tFileInputExcel_1_ERROR_MESSAGE", e.getMessage());
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row2 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */

							/**
							 * [tFileInputExcel_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_begin ] stop
							 */
// Start of branch "row2"
							if (row2 != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row2"

									);
								}

//////////

// for output
								tHashInput_tUnite_1_row7 = new tHashInput_tUnite_1_row7Struct();

								tHashInput_tUnite_1_row7.ID_Polluant = row2.ID_Polluant;
								tHashInput_tUnite_1_row7.Date = row2.Date;
								tHashInput_tUnite_1_row7.ID_Station = row2.ID_Station;
								tHashInput_tUnite_1_row7.Taux_Releve = row2.Taux_Releve;

								nb_line_tUnite_1++;

//////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUnite_1 process_data_begin ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_begin ] stop
								 */

								/**
								 * [tHashOutput_tUnite_1 main ] start
								 */

								currentComponent = "tHashOutput_tUnite_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "tHashInput_tUnite_1_tHashInput_tUnite_1_row7"

									);
								}

								tHashInput_tUnite_1_row7Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row7Struct();

								oneRow_tHashOutput_tUnite_1.ID_Polluant = tHashInput_tUnite_1_row7.ID_Polluant;
								oneRow_tHashOutput_tUnite_1.Date = tHashInput_tUnite_1_row7.Date;
								oneRow_tHashOutput_tUnite_1.ID_Station = tHashInput_tUnite_1_row7.ID_Station;
								oneRow_tHashOutput_tUnite_1.Taux_Releve = tHashInput_tUnite_1_row7.Taux_Releve;

								tHashFile_tHashOutput_tUnite_1.put(oneRow_tHashOutput_tUnite_1);
								nb_line_tHashOutput_tUnite_1++;

								tos_count_tHashOutput_tUnite_1++;

								/**
								 * [tHashOutput_tUnite_1 main ] stop
								 */

								/**
								 * [tHashOutput_tUnite_1 process_data_begin ] start
								 */

								currentComponent = "tHashOutput_tUnite_1";

								/**
								 * [tHashOutput_tUnite_1 process_data_begin ] stop
								 */

								/**
								 * [tHashOutput_tUnite_1 process_data_end ] start
								 */

								currentComponent = "tHashOutput_tUnite_1";

								/**
								 * [tHashOutput_tUnite_1 process_data_end ] stop
								 */

								/**
								 * [tUnite_1 process_data_end ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_end ] stop
								 */

							} // End of branch "row2"

							/**
							 * [tFileInputExcel_1 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE", nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1", "row2");
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_1 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_1";

				globalMap.put("tHashOutput_tUnite_1_NB_LINE", nb_line_tHashOutput_tUnite_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "tHashInput_tUnite_1_tHashInput_tUnite_1_row7");
				}

				ok_Hash.put("tHashOutput_tUnite_1", true);
				end_Hash.put("tHashOutput_tUnite_1", System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_6 finally ] start
				 */

				currentComponent = "tFileInputExcel_6";

				/**
				 * [tFileInputExcel_6 finally ] stop
				 */

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tHashOutput_tUnite_1 finally ] start
				 */

				currentComponent = "tHashOutput_tUnite_1";

				/**
				 * [tHashOutput_tUnite_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_6_SUBPROCESS_STATE", 1);
	}

	public static class tHashInput_tUnite_4_row21Struct
			implements routines.system.IPersistableRow<tHashInput_tUnite_4_row21Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final tHashInput_tUnite_4_row21Struct other = (tHashInput_tUnite_4_row21Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			return true;
		}

		public void copyDataTo(tHashInput_tUnite_4_row21Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Taux_Releve = this.Taux_Releve;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(tHashInput_tUnite_4_row21Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Ville = this.Ville;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_4_row21Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public int NBS;

		public int getNBS() {
			return this.NBS;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.NBS = this.NBS;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Ville = this.Ville;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.NBS = dis.readInt();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.NBS = dis.readInt();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// int

				dos.writeInt(this.NBS);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// int

				dos.writeInt(this.NBS);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",NBS=" + String.valueOf(NBS));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public int NBS;

		public int getNBS() {
			return this.NBS;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row12Struct other = (row12Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			return true;
		}

		public void copyDataTo(row12Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.NBS = this.NBS;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(row12Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Ville = this.Ville;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.NBS = dis.readInt();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.NBS = dis.readInt();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// int

				dos.writeInt(this.NBS);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// int

				dos.writeInt(this.NBS);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",NBS=" + String.valueOf(NBS));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_2
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public int NBS;

		public int getNBS() {
			return this.NBS;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtAggregateRow_2 other = (OnRowsEndStructtAggregateRow_2) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtAggregateRow_2 other) {

			other.ID_Polluant = this.ID_Polluant;
			other.NBS = this.NBS;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(OnRowsEndStructtAggregateRow_2 other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Ville = this.Ville;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.NBS = dis.readInt();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.NBS = dis.readInt();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// int

				dos.writeInt(this.NBS);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// int

				dos.writeInt(this.NBS);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",NBS=" + String.valueOf(NBS));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row11Struct other = (row11Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			return true;
		}

		public void copyDataTo(row11Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Taux_Releve = this.Taux_Releve;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(row11Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Ville = this.Ville;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Taux_Releve = this.Taux_Releve;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Ville = this.Ville;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mesure_fixStruct implements routines.system.IPersistableRow<mesure_fixStruct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final mesure_fixStruct other = (mesure_fixStruct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			return true;
		}

		public void copyDataTo(mesure_fixStruct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Taux_Releve = this.Taux_Releve;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(mesure_fixStruct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mesure_fixStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Integer ID_Station;

		public Integer getID_Station() {
			return this.ID_Station;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Station = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Station = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Integer

				writeInteger(this.ID_Station, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Integer

				writeInteger(this.ID_Station, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_1_RunAfterStruct
			implements routines.system.IPersistableRow<tHashInput_tUnite_1_RunAfterStruct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_1_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_2_RunAfterStruct
			implements routines.system.IPersistableRow<tHashInput_tUnite_2_RunAfterStruct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_2_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Vile;

		public String getVile() {
			return this.Vile;
		}

		public String Lat;

		public String getLat() {
			return this.Lat;
		}

		public String Lon;

		public String getLon() {
			return this.Lon;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Lat == null) ? 0 : this.Lat.hashCode());

				result = prime * result + ((this.Lon == null) ? 0 : this.Lon.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row20Struct other = (row20Struct) obj;

			if (this.Lat == null) {
				if (other.Lat != null)
					return false;

			} else if (!this.Lat.equals(other.Lat))

				return false;

			if (this.Lon == null) {
				if (other.Lon != null)
					return false;

			} else if (!this.Lon.equals(other.Lon))

				return false;

			return true;
		}

		public void copyDataTo(row20Struct other) {

			other.Vile = this.Vile;
			other.Lat = this.Lat;
			other.Lon = this.Lon;

		}

		public void copyKeysDataTo(row20Struct other) {

			other.Lat = this.Lat;
			other.Lon = this.Lon;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.Vile = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.Vile = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Vile, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Vile, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Vile=" + Vile);
			sb.append(",Lat=" + Lat);
			sb.append(",Lon=" + Lon);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Lat, other.Lat);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Lon, other.Lon);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class FlatenGeoStruct implements routines.system.IPersistableRow<FlatenGeoStruct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Vile;

		public String getVile() {
			return this.Vile;
		}

		public String Lat;

		public String getLat() {
			return this.Lat;
		}

		public String Lon;

		public String getLon() {
			return this.Lon;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Lat == null) ? 0 : this.Lat.hashCode());

				result = prime * result + ((this.Lon == null) ? 0 : this.Lon.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final FlatenGeoStruct other = (FlatenGeoStruct) obj;

			if (this.Lat == null) {
				if (other.Lat != null)
					return false;

			} else if (!this.Lat.equals(other.Lat))

				return false;

			if (this.Lon == null) {
				if (other.Lon != null)
					return false;

			} else if (!this.Lon.equals(other.Lon))

				return false;

			return true;
		}

		public void copyDataTo(FlatenGeoStruct other) {

			other.Vile = this.Vile;
			other.Lat = this.Lat;
			other.Lon = this.Lon;

		}

		public void copyKeysDataTo(FlatenGeoStruct other) {

			other.Lat = this.Lat;
			other.Lon = this.Lon;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.Vile = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.Vile = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Vile, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.Vile, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Vile=" + Vile);
			sb.append(",Lat=" + Lat);
			sb.append(",Lon=" + Lon);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(FlatenGeoStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Lat, other.Lat);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Lon, other.Lon);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];

		public List Vile;

		public List getVile() {
			return this.Vile;
		}

		public List Lat;

		public List getLat() {
			return this.Lat;
		}

		public List Lon;

		public List getLon() {
			return this.Lon;
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.Vile = (List) dis.readObject();

					this.Lat = (List) dis.readObject();

					this.Lon = (List) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.Vile = (List) dis.readObject();

					this.Lat = (List) dis.readObject();

					this.Lon = (List) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// List

				dos.writeObject(this.Vile);

				// List

				dos.writeObject(this.Lat);

				// List

				dos.writeObject(this.Lon);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// List

				dos.writeObject(this.Vile);

				// List

				dos.writeObject(this.Lat);

				// List

				dos.writeObject(this.Lon);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Vile=" + String.valueOf(Vile));
			sb.append(",Lat=" + String.valueOf(Lat));
			sb.append(",Lon=" + String.valueOf(Lon));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];

		public String ResponseContent;

		public String getResponseContent() {
			return this.ResponseContent;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ResponseContent = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ResponseContent = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ResponseContent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ResponseContent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ResponseContent=" + ResponseContent);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row30Struct other = (row30Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			return true;
		}

		public void copyDataTo(row30Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Taux_Releve = this.Taux_Releve;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(row30Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Ville = this.Ville;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row30Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_5
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_5> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtAggregateRow_5 other = (OnRowsEndStructtAggregateRow_5) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtAggregateRow_5 other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Taux_Releve = this.Taux_Releve;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(OnRowsEndStructtAggregateRow_5 other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Ville = this.Ville;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_5 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public Integer NBC;

		public Integer getNBC() {
			return this.NBC;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row29Struct other = (row29Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			return true;
		}

		public void copyDataTo(row29Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Ville = this.Ville;
			other.NBC = this.NBC;

		}

		public void copyKeysDataTo(row29Struct other) {

			other.ID_Polluant = this.ID_Polluant;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Ville = readString(dis);

					this.NBC = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Ville = readString(dis);

					this.NBC = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Ville, dos);

				// Integer

				writeInteger(this.NBC, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Ville, dos);

				// Integer

				writeInteger(this.NBC, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Ville=" + Ville);
			sb.append(",NBC=" + String.valueOf(NBC));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row29Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public Integer NBC;

		public Integer getNBC() {
			return this.NBC;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Ville = this.Ville;
			other.NBC = this.NBC;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.ID_Polluant = this.ID_Polluant;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Ville = readString(dis);

					this.NBC = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Ville = readString(dis);

					this.NBC = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Ville, dos);

				// Integer

				writeInteger(this.NBC, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Ville, dos);

				// Integer

				writeInteger(this.NBC, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Ville=" + Ville);
			sb.append(",NBC=" + String.valueOf(NBC));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_4
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_4> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public Integer NBC;

		public Integer getNBC() {
			return this.NBC;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtAggregateRow_4 other = (OnRowsEndStructtAggregateRow_4) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtAggregateRow_4 other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Ville = this.Ville;
			other.NBC = this.NBC;

		}

		public void copyKeysDataTo(OnRowsEndStructtAggregateRow_4 other) {

			other.ID_Polluant = this.ID_Polluant;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Ville = readString(dis);

					this.NBC = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Ville = readString(dis);

					this.NBC = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Ville, dos);

				// Integer

				writeInteger(this.NBC, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Ville, dos);

				// Integer

				writeInteger(this.NBC, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Ville=" + Ville);
			sb.append(",NBC=" + String.valueOf(NBC));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_4 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public String ID_Capteur;

		public String getID_Capteur() {
			return this.ID_Capteur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				result = prime * result + ((this.ID_Capteur == null) ? 0 : this.ID_Capteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row27Struct other = (row27Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			if (this.ID_Capteur == null) {
				if (other.ID_Capteur != null)
					return false;

			} else if (!this.ID_Capteur.equals(other.ID_Capteur))

				return false;

			return true;
		}

		public void copyDataTo(row27Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Taux_Releve = this.Taux_Releve;
			other.Ville = this.Ville;
			other.ID_Capteur = this.ID_Capteur;

		}

		public void copyKeysDataTo(row27Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Ville = this.Ville;
			other.ID_Capteur = this.ID_Capteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

					this.ID_Capteur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

					this.ID_Capteur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.ID_Capteur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.ID_Capteur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append(",Ville=" + Ville);
			sb.append(",ID_Capteur=" + ID_Capteur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Capteur, other.ID_Capteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public String ID_Capteur;

		public String getID_Capteur() {
			return this.ID_Capteur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				result = prime * result + ((this.ID_Capteur == null) ? 0 : this.ID_Capteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row28Struct other = (row28Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			if (this.ID_Capteur == null) {
				if (other.ID_Capteur != null)
					return false;

			} else if (!this.ID_Capteur.equals(other.ID_Capteur))

				return false;

			return true;
		}

		public void copyDataTo(row28Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Taux_Releve = this.Taux_Releve;
			other.Ville = this.Ville;
			other.ID_Capteur = this.ID_Capteur;

		}

		public void copyKeysDataTo(row28Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Ville = this.Ville;
			other.ID_Capteur = this.ID_Capteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

					this.ID_Capteur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

					this.ID_Capteur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.ID_Capteur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.ID_Capteur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append(",Ville=" + Ville);
			sb.append(",ID_Capteur=" + ID_Capteur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row28Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Capteur, other.ID_Capteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public String ID_Capteur;

		public String getID_Capteur() {
			return this.ID_Capteur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				result = prime * result + ((this.ID_Capteur == null) ? 0 : this.ID_Capteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row23Struct other = (row23Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			if (this.ID_Capteur == null) {
				if (other.ID_Capteur != null)
					return false;

			} else if (!this.ID_Capteur.equals(other.ID_Capteur))

				return false;

			return true;
		}

		public void copyDataTo(row23Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Taux_Releve = this.Taux_Releve;
			other.Ville = this.Ville;
			other.ID_Capteur = this.ID_Capteur;

		}

		public void copyKeysDataTo(row23Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Ville = this.Ville;
			other.ID_Capteur = this.ID_Capteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

					this.ID_Capteur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

					this.ID_Capteur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.ID_Capteur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.ID_Capteur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append(",Ville=" + Ville);
			sb.append(",ID_Capteur=" + ID_Capteur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Capteur, other.ID_Capteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mobileVileStruct implements routines.system.IPersistableRow<mobileVileStruct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public String ID_Capteur;

		public String getID_Capteur() {
			return this.ID_Capteur;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				result = prime * result + ((this.ID_Capteur == null) ? 0 : this.ID_Capteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final mobileVileStruct other = (mobileVileStruct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			if (this.ID_Capteur == null) {
				if (other.ID_Capteur != null)
					return false;

			} else if (!this.ID_Capteur.equals(other.ID_Capteur))

				return false;

			return true;
		}

		public void copyDataTo(mobileVileStruct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Taux_Releve = this.Taux_Releve;
			other.Ville = this.Ville;
			other.ID_Capteur = this.ID_Capteur;

		}

		public void copyKeysDataTo(mobileVileStruct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Ville = this.Ville;
			other.ID_Capteur = this.ID_Capteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

					this.ID_Capteur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

					this.ID_Capteur = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.ID_Capteur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.ID_Capteur, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append(",Ville=" + Ville);
			sb.append(",ID_Capteur=" + ID_Capteur);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mobileVileStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Capteur, other.ID_Capteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public String ID_Capteur;

		public String getID_Capteur() {
			return this.ID_Capteur;
		}

		public String Lat;

		public String getLat() {
			return this.Lat;
		}

		public String Lon;

		public String getLon() {
			return this.Lon;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",ID_Capteur=" + ID_Capteur);
			sb.append(",Lat=" + Lat);
			sb.append(",Lon=" + Lon);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public String ID_Capteur;

		public String getID_Capteur() {
			return this.ID_Capteur;
		}

		public String Lat;

		public String getLat() {
			return this.Lat;
		}

		public String Lon;

		public String getLon() {
			return this.Lon;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.ID_Capteur == null) ? 0 : this.ID_Capteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row24Struct other = (row24Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Capteur == null) {
				if (other.ID_Capteur != null)
					return false;

			} else if (!this.ID_Capteur.equals(other.ID_Capteur))

				return false;

			return true;
		}

		public void copyDataTo(row24Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;
			other.Lat = this.Lat;
			other.Lon = this.Lon;
			other.Taux_Releve = this.Taux_Releve;

		}

		public void copyKeysDataTo(row24Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",ID_Capteur=" + ID_Capteur);
			sb.append(",Lat=" + Lat);
			sb.append(",Lon=" + Lon);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Capteur, other.ID_Capteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public String ID_Capteur;

		public String getID_Capteur() {
			return this.ID_Capteur;
		}

		public String Lat;

		public String getLat() {
			return this.Lat;
		}

		public String Lon;

		public String getLon() {
			return this.Lon;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.ID_Capteur == null) ? 0 : this.ID_Capteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row19Struct other = (row19Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Capteur == null) {
				if (other.ID_Capteur != null)
					return false;

			} else if (!this.ID_Capteur.equals(other.ID_Capteur))

				return false;

			return true;
		}

		public void copyDataTo(row19Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;
			other.Lat = this.Lat;
			other.Lon = this.Lon;
			other.Taux_Releve = this.Taux_Releve;

		}

		public void copyKeysDataTo(row19Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",ID_Capteur=" + ID_Capteur);
			sb.append(",Lat=" + Lat);
			sb.append(",Lon=" + Lon);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Capteur, other.ID_Capteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class MobileStationStruct implements routines.system.IPersistableRow<MobileStationStruct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public String ID_Capteur;

		public String getID_Capteur() {
			return this.ID_Capteur;
		}

		public String Lat;

		public String getLat() {
			return this.Lat;
		}

		public String Lon;

		public String getLon() {
			return this.Lon;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.ID_Capteur == null) ? 0 : this.ID_Capteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final MobileStationStruct other = (MobileStationStruct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Capteur == null) {
				if (other.ID_Capteur != null)
					return false;

			} else if (!this.ID_Capteur.equals(other.ID_Capteur))

				return false;

			return true;
		}

		public void copyDataTo(MobileStationStruct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;
			other.Lat = this.Lat;
			other.Lon = this.Lon;
			other.Taux_Releve = this.Taux_Releve;

		}

		public void copyKeysDataTo(MobileStationStruct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Lat = readString(dis);

					this.Lon = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Lat, dos);

				// String

				writeString(this.Lon, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",ID_Capteur=" + ID_Capteur);
			sb.append(",Lat=" + Lat);
			sb.append(",Lon=" + Lon);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(MobileStationStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Capteur, other.ID_Capteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public String ID_Capteur;

		public String getID_Capteur() {
			return this.ID_Capteur;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Localisation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Capteur = readString(dis);

					this.Localisation = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Localisation, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// String

				writeString(this.ID_Capteur, dos);

				// String

				writeString(this.Localisation, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",ID_Capteur=" + ID_Capteur);
			sb.append(",Localisation=" + Localisation);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_tUnite_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_tUnite_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputExcel_6Process(globalMap);
				tFileInputExcel_15Process(globalMap);

				row7Struct row7 = new row7Struct();
				mesure_fixStruct mesure_fix = new mesure_fixStruct();
				row11Struct row11 = new row11Struct();
				row12Struct row12 = new row12Struct();
				row12Struct row16 = row12;
				row14Struct row14 = new row14Struct();

				row15Struct row15 = new row15Struct();
				MobileStationStruct MobileStation = new MobileStationStruct();
				row19Struct row19 = new row19Struct();
				row18Struct row18 = new row18Struct();
				mobileVileStruct mobileVile = new mobileVileStruct();
				mobileVileStruct row23 = mobileVile;
				row27Struct row27 = new row27Struct();
				row8Struct row8 = new row8Struct();
				row8Struct row29 = row8;
				row28Struct row28 = new row28Struct();
				row30Struct row30 = new row30Struct();
				row24Struct row24 = new row24Struct();
				row22Struct row22 = new row22Struct();
				row25Struct row25 = new row25Struct();
				FlatenGeoStruct FlatenGeo = new FlatenGeoStruct();
				FlatenGeoStruct row20 = FlatenGeo;

				tHashInput_tUnite_4_row21Struct tHashInput_tUnite_4_row21 = new tHashInput_tUnite_4_row21Struct();

				/**
				 * [tHashOutput_tUnite_4 begin ] start
				 */

				ok_Hash.put("tHashOutput_tUnite_4", false);
				start_Hash.put("tHashOutput_tUnite_4", System.currentTimeMillis());

				currentComponent = "tHashOutput_tUnite_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0,
							"tHashInput_tUnite_4_tHashInput_tUnite_4_row21");
				}

				int tos_count_tHashOutput_tUnite_4 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_4 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_4_row21Struct> tHashFile_tHashOutput_tUnite_4 = null;
				String hashKey_tHashOutput_tUnite_4 = "tHashFile_test_" + pid + "_tHashOutput_tUnite_4";
				synchronized (org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.get(hashKey_tHashOutput_tUnite_4)) {
					if (mf_tHashOutput_tUnite_4.getResourceMap().get(hashKey_tHashOutput_tUnite_4) == null) {
						mf_tHashOutput_tUnite_4.getResourceMap().put(hashKey_tHashOutput_tUnite_4,
								new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_4_row21Struct>(
										org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
						tHashFile_tHashOutput_tUnite_4 = mf_tHashOutput_tUnite_4.getResourceMap()
								.get(hashKey_tHashOutput_tUnite_4);
					} else {
						tHashFile_tHashOutput_tUnite_4 = mf_tHashOutput_tUnite_4.getResourceMap()
								.get(hashKey_tHashOutput_tUnite_4);
					}
				}
				int nb_line_tHashOutput_tUnite_4 = 0;

				/**
				 * [tHashOutput_tUnite_4 begin ] stop
				 */

				/**
				 * [tUnite_4 begin ] start
				 */

				ok_Hash.put("tUnite_4", false);
				start_Hash.put("tUnite_4", System.currentTimeMillis());

				currentComponent = "tUnite_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14", "row30");
				}

				int tos_count_tUnite_4 = 0;

				int nb_line_tUnite_4 = 0;

				/**
				 * [tUnite_4 begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGOUT", false);
				start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tAggregateRow_2_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

				class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ID_Polluant;
					String Ville;
					int count = 0;
					int NBS_clmCount = 0;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

							result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;

						if (this.ID_Polluant == null) {
							if (other.ID_Polluant != null)
								return false;
						} else if (!this.ID_Polluant.equals(other.ID_Polluant))
							return false;

						if (this.Ville == null) {
							if (other.Ville != null)
								return false;
						} else if (!this.Ville.equals(other.Ville))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
				AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
				java.util.Map<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2>();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "mesure_fix");
				}

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) globalMap
						.get("tHash_Lookup_row9"));

				row9Struct row9HashKey = new row9Struct();
				row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				mesure_fixStruct mesure_fix_tmp = new mesure_fixStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_1 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_1", false);
				start_Hash.put("tHashInput_tUnite_1", System.currentTimeMillis());

				currentComponent = "tHashInput_tUnite_1";

				int tos_count_tHashInput_tUnite_1 = 0;

				int nb_line_tHashInput_tUnite_1 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_1 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_1_row7Struct> tHashFile_tHashInput_tUnite_1 = mf_tHashInput_tUnite_1
						.getAdvancedMemoryHashFile("tHashFile_test_" + pid + "_tHashOutput_tUnite_1");
				if (tHashFile_tHashInput_tUnite_1 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_1_row7Struct> iterator_tHashInput_tUnite_1 = tHashFile_tHashInput_tUnite_1
						.iterator();
				while (iterator_tHashInput_tUnite_1.hasNext()) {
					tHashInput_tUnite_1_row7Struct next_tHashInput_tUnite_1 = iterator_tHashInput_tUnite_1.next();

					row7.ID_Polluant = next_tHashInput_tUnite_1.ID_Polluant;
					row7.Date = next_tHashInput_tUnite_1.Date;
					row7.ID_Station = next_tHashInput_tUnite_1.ID_Station;
					row7.Taux_Releve = next_tHashInput_tUnite_1.Taux_Releve;

					/**
					 * [tHashInput_tUnite_1 begin ] stop
					 */

					/**
					 * [tHashInput_tUnite_1 main ] start
					 */

					currentComponent = "tHashInput_tUnite_1";

					tos_count_tHashInput_tUnite_1++;

					/**
					 * [tHashInput_tUnite_1 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_1 process_data_begin ] start
					 */

					currentComponent = "tHashInput_tUnite_1";

					/**
					 * [tHashInput_tUnite_1 process_data_begin ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row7"

						);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					///////////////////////////////////////////////
					// Starting Lookup Table "row9"
					///////////////////////////////////////////////

					boolean forceLooprow9 = false;

					row9Struct row9ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_1 = false;

						row9HashKey.ID_Station = row7.ID_Station;

						row9HashKey.hashCodeDirty = true;

						tHash_Lookup_row9.lookup(row9HashKey);

					} // G_TM_M_020

					if (tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9'
						// and it contains more one result from keys : row9.ID_Station = '" +
						// row9HashKey.ID_Station + "'");
					} // G 071

					row9Struct row9 = null;

					row9Struct fromLookup_row9 = null;
					row9 = row9Default;

					if (tHash_Lookup_row9 != null && tHash_Lookup_row9.hasNext()) { // G 099

						fromLookup_row9 = tHash_Lookup_row9.next();

					} // G 099

					if (fromLookup_row9 != null) {
						row9 = fromLookup_row9;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						mesure_fix = null;

// # Output table : 'mesure_fix'
						mesure_fix_tmp.ID_Polluant = row7.ID_Polluant;
						mesure_fix_tmp.Date = row7.Date;
						mesure_fix_tmp.Taux_Releve = row7.Taux_Releve;
						mesure_fix_tmp.Ville = row9.Ville;
						mesure_fix = mesure_fix_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */

					/**
					 * [tMap_1 process_data_begin ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_begin ] stop
					 */
// Start of branch "mesure_fix"
					if (mesure_fix != null) {

						/**
						 * [tReplicate_1 main ] start
						 */

						currentComponent = "tReplicate_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "mesure_fix"

							);
						}

						row11 = new row11Struct();

						row11.ID_Polluant = mesure_fix.ID_Polluant;
						row11.Date = mesure_fix.Date;
						row11.Taux_Releve = mesure_fix.Taux_Releve;
						row11.Ville = mesure_fix.Ville;
						row14 = new row14Struct();

						row14.ID_Polluant = mesure_fix.ID_Polluant;
						row14.Date = mesure_fix.Date;
						row14.Taux_Releve = mesure_fix.Taux_Releve;
						row14.Ville = mesure_fix.Ville;

						tos_count_tReplicate_1++;

						/**
						 * [tReplicate_1 main ] stop
						 */

						/**
						 * [tReplicate_1 process_data_begin ] start
						 */

						currentComponent = "tReplicate_1";

						/**
						 * [tReplicate_1 process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_2_AGGOUT main ] start
						 */

						currentVirtualComponent = "tAggregateRow_2";

						currentComponent = "tAggregateRow_2_AGGOUT";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row11"

							);
						}

						operation_finder_tAggregateRow_2.ID_Polluant = row11.ID_Polluant;
						operation_finder_tAggregateRow_2.Ville = row11.Ville;

						operation_finder_tAggregateRow_2.hashCodeDirty = true;

						operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

						if (operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

							operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

							operation_result_tAggregateRow_2.ID_Polluant = operation_finder_tAggregateRow_2.ID_Polluant;
							operation_result_tAggregateRow_2.Ville = operation_finder_tAggregateRow_2.Ville;

							hash_tAggregateRow_2.put(operation_result_tAggregateRow_2,
									operation_result_tAggregateRow_2);

						} // G_OutMain_AggR_001

						operation_result_tAggregateRow_2.NBS_clmCount++;
						operation_result_tAggregateRow_2.count++;

						tos_count_tAggregateRow_2_AGGOUT++;

						/**
						 * [tAggregateRow_2_AGGOUT main ] stop
						 */

						/**
						 * [tAggregateRow_2_AGGOUT process_data_begin ] start
						 */

						currentVirtualComponent = "tAggregateRow_2";

						currentComponent = "tAggregateRow_2_AGGOUT";

						/**
						 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
						 */

						/**
						 * [tAggregateRow_2_AGGOUT process_data_end ] start
						 */

						currentVirtualComponent = "tAggregateRow_2";

						currentComponent = "tAggregateRow_2_AGGOUT";

						/**
						 * [tAggregateRow_2_AGGOUT process_data_end ] stop
						 */

						/**
						 * [tUnite_4 main ] start
						 */

						currentComponent = "tUnite_4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row14"

							);
						}

//////////

// for output
						tHashInput_tUnite_4_row21 = new tHashInput_tUnite_4_row21Struct();

						tHashInput_tUnite_4_row21.ID_Polluant = row14.ID_Polluant;
						tHashInput_tUnite_4_row21.Date = row14.Date;
						tHashInput_tUnite_4_row21.Taux_Releve = row14.Taux_Releve;
						tHashInput_tUnite_4_row21.Ville = row14.Ville;

						nb_line_tUnite_4++;

//////////

						tos_count_tUnite_4++;

						/**
						 * [tUnite_4 main ] stop
						 */

						/**
						 * [tUnite_4 process_data_begin ] start
						 */

						currentComponent = "tUnite_4";

						/**
						 * [tUnite_4 process_data_begin ] stop
						 */

						/**
						 * [tHashOutput_tUnite_4 main ] start
						 */

						currentComponent = "tHashOutput_tUnite_4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "tHashInput_tUnite_4_tHashInput_tUnite_4_row21"

							);
						}

						tHashInput_tUnite_4_row21Struct oneRow_tHashOutput_tUnite_4 = new tHashInput_tUnite_4_row21Struct();

						oneRow_tHashOutput_tUnite_4.ID_Polluant = tHashInput_tUnite_4_row21.ID_Polluant;
						oneRow_tHashOutput_tUnite_4.Date = tHashInput_tUnite_4_row21.Date;
						oneRow_tHashOutput_tUnite_4.Taux_Releve = tHashInput_tUnite_4_row21.Taux_Releve;
						oneRow_tHashOutput_tUnite_4.Ville = tHashInput_tUnite_4_row21.Ville;

						tHashFile_tHashOutput_tUnite_4.put(oneRow_tHashOutput_tUnite_4);
						nb_line_tHashOutput_tUnite_4++;

						tos_count_tHashOutput_tUnite_4++;

						/**
						 * [tHashOutput_tUnite_4 main ] stop
						 */

						/**
						 * [tHashOutput_tUnite_4 process_data_begin ] start
						 */

						currentComponent = "tHashOutput_tUnite_4";

						/**
						 * [tHashOutput_tUnite_4 process_data_begin ] stop
						 */

						/**
						 * [tHashOutput_tUnite_4 process_data_end ] start
						 */

						currentComponent = "tHashOutput_tUnite_4";

						/**
						 * [tHashOutput_tUnite_4 process_data_end ] stop
						 */

						/**
						 * [tUnite_4 process_data_end ] start
						 */

						currentComponent = "tUnite_4";

						/**
						 * [tUnite_4 process_data_end ] stop
						 */

						/**
						 * [tReplicate_1 process_data_end ] start
						 */

						currentComponent = "tReplicate_1";

						/**
						 * [tReplicate_1 process_data_end ] stop
						 */

					} // End of branch "mesure_fix"

					/**
					 * [tMap_1 process_data_end ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_end ] stop
					 */

					/**
					 * [tHashInput_tUnite_1 process_data_end ] start
					 */

					currentComponent = "tHashInput_tUnite_1";

					/**
					 * [tHashInput_tUnite_1 process_data_end ] stop
					 */

					/**
					 * [tHashInput_tUnite_1 end ] start
					 */

					currentComponent = "tHashInput_tUnite_1";

					nb_line_tHashInput_tUnite_1++;
				}

				mf_tHashInput_tUnite_1.clearCache("tHashFile_test_" + pid + "_tHashOutput_tUnite_1");

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_test_" + pid + "_tHashOutput_tUnite_1");

				globalMap.put("tHashInput_tUnite_1_NB_LINE", nb_line_tHashInput_tUnite_1);

				ok_Hash.put("tHashInput_tUnite_1", true);
				end_Hash.put("tHashInput_tUnite_1", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row9 != null) {
					tHash_Lookup_row9.endGet();
				}
				globalMap.remove("tHash_Lookup_row9");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "mesure_fix");
				}

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tAggregateRow_2_AGGOUT", true);
				end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"C:/Users/mahdj/Downloads/TOS_DI-20211109_1610-V8.0.1/TOS_DI-20211109_1610-V8.0.1/workspace/QDD/data/NBS.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "US-ASCII"));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("ID_Polluant");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("NBS");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Ville");
					outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				class Util_tLogRow_2 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[3];

					public void addRow(String[] row) {

						for (int i = 0; i < 3; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 2 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_2 util_tLogRow_2 = new Util_tLogRow_2();
				util_tLogRow_2.setTableName("log NBS");
				util_tLogRow_2.addRow(new String[] { "ID_Polluant", "NBS", "Ville", });
				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGIN", false);
				start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				int tos_count_tAggregateRow_2_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2
						.values();

				globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

				for (AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600

					/**
					 * [tAggregateRow_2_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					row12.ID_Polluant = aggregated_row_tAggregateRow_2.ID_Polluant;
					row12.NBS = (int) aggregated_row_tAggregateRow_2.count;
					row12.NBS = (int) aggregated_row_tAggregateRow_2.NBS_clmCount;

					row12.Ville = aggregated_row_tAggregateRow_2.Ville;

					tos_count_tAggregateRow_2_AGGIN++;

					/**
					 * [tAggregateRow_2_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tLogRow_2 main ] start
					 */

					currentComponent = "tLogRow_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row12"

						);
					}

///////////////////////		

					String[] row_tLogRow_2 = new String[3];

					if (row12.ID_Polluant != null) { //
						row_tLogRow_2[0] = String.valueOf(row12.ID_Polluant);

					} //

					row_tLogRow_2[1] = String.valueOf(row12.NBS);

					if (row12.Ville != null) { //
						row_tLogRow_2[2] = String.valueOf(row12.Ville);

					} //

					util_tLogRow_2.addRow(row_tLogRow_2);
					nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

					row16 = row12;

					tos_count_tLogRow_2++;

					/**
					 * [tLogRow_2 main ] stop
					 */

					/**
					 * [tLogRow_2 process_data_begin ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 main ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row16"

						);
					}

					StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
					if (row16.ID_Polluant != null) {
						sb_tFileOutputDelimited_3.append(row16.ID_Polluant);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					sb_tFileOutputDelimited_3.append(row16.NBS);
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row16.Ville != null) {
						sb_tFileOutputDelimited_3.append(row16.Ville);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

					nb_line_tFileOutputDelimited_3++;
					resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

					outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

					tos_count_tFileOutputDelimited_3++;

					/**
					 * [tFileOutputDelimited_3 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					/**
					 * [tFileOutputDelimited_3 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					/**
					 * [tFileOutputDelimited_3 process_data_end ] stop
					 */

					/**
					 * [tLogRow_2 process_data_end ] start
					 */

					currentComponent = "tLogRow_2";

					/**
					 * [tLogRow_2 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_2_AGGIN", true);
				end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGIN end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////

				java.io.PrintStream consoleOut_tLogRow_2 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}

				consoleOut_tLogRow_2.println(util_tLogRow_2.format().toString());
				consoleOut_tLogRow_2.flush();
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_4_AGGOUT", false);
				start_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row27");
				}

				int tos_count_tAggregateRow_4_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_4 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_4 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_4 utilClass_tAggregateRow_4 = new UtilClass_tAggregateRow_4();

				class AggOperationStruct_tAggregateRow_4 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ID_Polluant;
					String Ville;
					int count = 0;
					int NBC_clmCount = 0;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

							result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_4 other = (AggOperationStruct_tAggregateRow_4) obj;

						if (this.ID_Polluant == null) {
							if (other.ID_Polluant != null)
								return false;
						} else if (!this.ID_Polluant.equals(other.ID_Polluant))
							return false;

						if (this.Ville == null) {
							if (other.Ville != null)
								return false;
						} else if (!this.Ville.equals(other.Ville))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_4 operation_result_tAggregateRow_4 = null;
				AggOperationStruct_tAggregateRow_4 operation_finder_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();
				java.util.Map<AggOperationStruct_tAggregateRow_4, AggOperationStruct_tAggregateRow_4> hash_tAggregateRow_4 = new java.util.HashMap<AggOperationStruct_tAggregateRow_4, AggOperationStruct_tAggregateRow_4>();

				/**
				 * [tAggregateRow_4_AGGOUT begin ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_5_AGGOUT", false);
				start_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row28");
				}

				int tos_count_tAggregateRow_5_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_5 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_5 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_5 utilClass_tAggregateRow_5 = new UtilClass_tAggregateRow_5();

				class AggOperationStruct_tAggregateRow_5 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ID_Polluant;
					String Date;
					String Ville;
					BigDecimal Taux_Releve_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

							result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

							result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_5 other = (AggOperationStruct_tAggregateRow_5) obj;

						if (this.ID_Polluant == null) {
							if (other.ID_Polluant != null)
								return false;
						} else if (!this.ID_Polluant.equals(other.ID_Polluant))
							return false;

						if (this.Date == null) {
							if (other.Date != null)
								return false;
						} else if (!this.Date.equals(other.Date))
							return false;

						if (this.Ville == null) {
							if (other.Ville != null)
								return false;
						} else if (!this.Ville.equals(other.Ville))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_5 operation_result_tAggregateRow_5 = null;
				AggOperationStruct_tAggregateRow_5 operation_finder_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();
				java.util.Map<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5> hash_tAggregateRow_5 = new java.util.HashMap<AggOperationStruct_tAggregateRow_5, AggOperationStruct_tAggregateRow_5>();

				/**
				 * [tAggregateRow_5_AGGOUT begin ] stop
				 */

				/**
				 * [tReplicate_3 begin ] start
				 */

				ok_Hash.put("tReplicate_3", false);
				start_Hash.put("tReplicate_3", System.currentTimeMillis());

				currentComponent = "tReplicate_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row23");
				}

				int tos_count_tReplicate_3 = 0;

				/**
				 * [tReplicate_3 begin ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "mobileVile");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[5];

					public void addRow(String[] row) {

						for (int i = 0; i < 5; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 4 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("Mobile Station Logger");
				util_tLogRow_1.addRow(new String[] { "ID_Polluant", "Date", "Taux_Releve", "Ville", "ID_Capteur", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row18");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) globalMap
						.get("tHash_Lookup_row31"));

				row31Struct row31HashKey = new row31Struct();
				row31Struct row31Default = new row31Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				mobileVileStruct mobileVile_tmp = new mobileVileStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tHttpRequest_1 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row24");
				}

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tReplicate_2 begin ] start
				 */

				ok_Hash.put("tReplicate_2", false);
				start_Hash.put("tReplicate_2", System.currentTimeMillis());

				currentComponent = "tReplicate_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row19");
				}

				int tos_count_tReplicate_2 = 0;

				/**
				 * [tReplicate_2 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "MobileStation");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				MobileStationStruct MobileStation_tmp = new MobileStationStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_2 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_2", false);
				start_Hash.put("tHashInput_tUnite_2", System.currentTimeMillis());

				currentComponent = "tHashInput_tUnite_2";

				int tos_count_tHashInput_tUnite_2 = 0;

				int nb_line_tHashInput_tUnite_2 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_2 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_2_row15Struct> tHashFile_tHashInput_tUnite_2 = mf_tHashInput_tUnite_2
						.getAdvancedMemoryHashFile("tHashFile_test_" + pid + "_tHashOutput_tUnite_2");
				if (tHashFile_tHashInput_tUnite_2 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_2_row15Struct> iterator_tHashInput_tUnite_2 = tHashFile_tHashInput_tUnite_2
						.iterator();
				while (iterator_tHashInput_tUnite_2.hasNext()) {
					tHashInput_tUnite_2_row15Struct next_tHashInput_tUnite_2 = iterator_tHashInput_tUnite_2.next();

					row15.ID_Polluant = next_tHashInput_tUnite_2.ID_Polluant;
					row15.Date = next_tHashInput_tUnite_2.Date;
					row15.ID_Capteur = next_tHashInput_tUnite_2.ID_Capteur;
					row15.Localisation = next_tHashInput_tUnite_2.Localisation;
					row15.Taux_Releve = next_tHashInput_tUnite_2.Taux_Releve;

					/**
					 * [tHashInput_tUnite_2 begin ] stop
					 */

					/**
					 * [tHashInput_tUnite_2 main ] start
					 */

					currentComponent = "tHashInput_tUnite_2";

					tos_count_tHashInput_tUnite_2++;

					/**
					 * [tHashInput_tUnite_2 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_2 process_data_begin ] start
					 */

					currentComponent = "tHashInput_tUnite_2";

					/**
					 * [tHashInput_tUnite_2 process_data_begin ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row15"

						);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
						// ###############################
						// # Output tables

						MobileStation = null;

// # Output table : 'MobileStation'
						MobileStation_tmp.ID_Polluant = row15.ID_Polluant;
						MobileStation_tmp.Date = row15.Date;
						MobileStation_tmp.ID_Capteur = row15.ID_Capteur;
						MobileStation_tmp.Lat = (row15.Localisation != null && !row15.Localisation.isEmpty()
								&& row15.Localisation.matches("^\\s*-?\\d+\\.\\d+,\\s*-?\\d+\\.\\d+\\s*$"))
										? row15.Localisation.split(",\\s*")[0]
										: null;
						MobileStation_tmp.Lon = (row15.Localisation != null && !row15.Localisation.isEmpty()
								&& row15.Localisation.matches("^\\s*-?\\d+\\.\\d+,\\s*-?\\d+\\.\\d+\\s*$"))
										? row15.Localisation.split(",\\s*")[1]
										: null;
						MobileStation_tmp.Taux_Releve = row15.Taux_Releve;
						MobileStation = MobileStation_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_2 = false;

					tos_count_tMap_2++;

					/**
					 * [tMap_2 main ] stop
					 */

					/**
					 * [tMap_2 process_data_begin ] start
					 */

					currentComponent = "tMap_2";

					/**
					 * [tMap_2 process_data_begin ] stop
					 */
// Start of branch "MobileStation"
					if (MobileStation != null) {

						/**
						 * [tFilterRow_1 main ] start
						 */

						currentComponent = "tFilterRow_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "MobileStation"

							);
						}

						row19 = null;
						Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
						ope_tFilterRow_1.matches((MobileStation.Lat == null ? false : MobileStation.Lat.length() > 0),
								" Lat.length() > 0 failed");
						ope_tFilterRow_1.matches((MobileStation.Lon == null ? false : MobileStation.Lon.length() > 0),
								" Lon.length() > 0 failed");

						if (ope_tFilterRow_1.getMatchFlag()) {
							if (row19 == null) {
								row19 = new row19Struct();
							}
							row19.ID_Polluant = MobileStation.ID_Polluant;
							row19.Date = MobileStation.Date;
							row19.ID_Capteur = MobileStation.ID_Capteur;
							row19.Lat = MobileStation.Lat;
							row19.Lon = MobileStation.Lon;
							row19.Taux_Releve = MobileStation.Taux_Releve;
							nb_line_ok_tFilterRow_1++;
						} else {
							nb_line_reject_tFilterRow_1++;
						}

						nb_line_tFilterRow_1++;

						tos_count_tFilterRow_1++;

						/**
						 * [tFilterRow_1 main ] stop
						 */

						/**
						 * [tFilterRow_1 process_data_begin ] start
						 */

						currentComponent = "tFilterRow_1";

						/**
						 * [tFilterRow_1 process_data_begin ] stop
						 */
// Start of branch "row19"
						if (row19 != null) {

							/**
							 * [tReplicate_2 main ] start
							 */

							currentComponent = "tReplicate_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row19"

								);
							}

							row18 = new row18Struct();

							row18.ID_Polluant = row19.ID_Polluant;
							row18.Date = row19.Date;
							row18.ID_Capteur = row19.ID_Capteur;
							row18.Lat = row19.Lat;
							row18.Lon = row19.Lon;
							row18.Taux_Releve = row19.Taux_Releve;
							row24 = new row24Struct();

							row24.ID_Polluant = row19.ID_Polluant;
							row24.Date = row19.Date;
							row24.ID_Capteur = row19.ID_Capteur;
							row24.Lat = row19.Lat;
							row24.Lon = row19.Lon;
							row24.Taux_Releve = row19.Taux_Releve;

							tos_count_tReplicate_2++;

							/**
							 * [tReplicate_2 main ] stop
							 */

							/**
							 * [tReplicate_2 process_data_begin ] start
							 */

							currentComponent = "tReplicate_2";

							/**
							 * [tReplicate_2 process_data_begin ] stop
							 */

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row18"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row31"
							///////////////////////////////////////////////

							boolean forceLooprow31 = false;

							row31Struct row31ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								row31HashKey.Lat = row18.Lat;

								row31HashKey.Lon = row18.Lon;

								row31HashKey.hashCodeDirty = true;

								tHash_Lookup_row31.lookup(row31HashKey);

							} // G_TM_M_020

							row31Struct row31 = null;

							row31Struct fromLookup_row31 = null;
							row31 = row31Default;

							if (tHash_Lookup_row31 != null && tHash_Lookup_row31.hasNext()) { // G 099

								fromLookup_row31 = tHash_Lookup_row31.next();

							} // G 099

							if (fromLookup_row31 != null) {
								row31 = fromLookup_row31;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
								// ###############################
								// # Output tables

								mobileVile = null;

// # Output table : 'mobileVile'
								mobileVile_tmp.ID_Polluant = row18.ID_Polluant;
								mobileVile_tmp.Date = row18.Date;
								mobileVile_tmp.Taux_Releve = row18.Taux_Releve;
								mobileVile_tmp.Ville = row31.Vile;
								mobileVile_tmp.ID_Capteur = row18.ID_Capteur;
								mobileVile = mobileVile_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_4 = false;

							tos_count_tMap_4++;

							/**
							 * [tMap_4 main ] stop
							 */

							/**
							 * [tMap_4 process_data_begin ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_begin ] stop
							 */
// Start of branch "mobileVile"
							if (mobileVile != null) {

								/**
								 * [tLogRow_1 main ] start
								 */

								currentComponent = "tLogRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "mobileVile"

									);
								}

///////////////////////		

								String[] row_tLogRow_1 = new String[5];

								if (mobileVile.ID_Polluant != null) { //
									row_tLogRow_1[0] = String.valueOf(mobileVile.ID_Polluant);

								} //

								if (mobileVile.Date != null) { //
									row_tLogRow_1[1] = String.valueOf(mobileVile.Date);

								} //

								if (mobileVile.Taux_Releve != null) { //
									row_tLogRow_1[2] = FormatterUtils.formatUnwithE(mobileVile.Taux_Releve);

								} //

								if (mobileVile.Ville != null) { //
									row_tLogRow_1[3] = String.valueOf(mobileVile.Ville);

								} //

								if (mobileVile.ID_Capteur != null) { //
									row_tLogRow_1[4] = String.valueOf(mobileVile.ID_Capteur);

								} //

								util_tLogRow_1.addRow(row_tLogRow_1);
								nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

								row23 = mobileVile;

								tos_count_tLogRow_1++;

								/**
								 * [tLogRow_1 main ] stop
								 */

								/**
								 * [tLogRow_1 process_data_begin ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_begin ] stop
								 */

								/**
								 * [tReplicate_3 main ] start
								 */

								currentComponent = "tReplicate_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row23"

									);
								}

								row27 = new row27Struct();

								row27.ID_Polluant = row23.ID_Polluant;
								row27.Date = row23.Date;
								row27.Taux_Releve = row23.Taux_Releve;
								row27.Ville = row23.Ville;
								row27.ID_Capteur = row23.ID_Capteur;
								row28 = new row28Struct();

								row28.ID_Polluant = row23.ID_Polluant;
								row28.Date = row23.Date;
								row28.Taux_Releve = row23.Taux_Releve;
								row28.Ville = row23.Ville;
								row28.ID_Capteur = row23.ID_Capteur;

								tos_count_tReplicate_3++;

								/**
								 * [tReplicate_3 main ] stop
								 */

								/**
								 * [tReplicate_3 process_data_begin ] start
								 */

								currentComponent = "tReplicate_3";

								/**
								 * [tReplicate_3 process_data_begin ] stop
								 */

								/**
								 * [tAggregateRow_4_AGGOUT main ] start
								 */

								currentVirtualComponent = "tAggregateRow_4";

								currentComponent = "tAggregateRow_4_AGGOUT";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row27"

									);
								}

								operation_finder_tAggregateRow_4.ID_Polluant = row27.ID_Polluant;
								operation_finder_tAggregateRow_4.Ville = row27.Ville;

								operation_finder_tAggregateRow_4.hashCodeDirty = true;

								operation_result_tAggregateRow_4 = hash_tAggregateRow_4
										.get(operation_finder_tAggregateRow_4);

								if (operation_result_tAggregateRow_4 == null) { // G_OutMain_AggR_001

									operation_result_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();

									operation_result_tAggregateRow_4.ID_Polluant = operation_finder_tAggregateRow_4.ID_Polluant;
									operation_result_tAggregateRow_4.Ville = operation_finder_tAggregateRow_4.Ville;

									hash_tAggregateRow_4.put(operation_result_tAggregateRow_4,
											operation_result_tAggregateRow_4);

								} // G_OutMain_AggR_001

								operation_result_tAggregateRow_4.NBC_clmCount++;
								operation_result_tAggregateRow_4.count++;

								tos_count_tAggregateRow_4_AGGOUT++;

								/**
								 * [tAggregateRow_4_AGGOUT main ] stop
								 */

								/**
								 * [tAggregateRow_4_AGGOUT process_data_begin ] start
								 */

								currentVirtualComponent = "tAggregateRow_4";

								currentComponent = "tAggregateRow_4_AGGOUT";

								/**
								 * [tAggregateRow_4_AGGOUT process_data_begin ] stop
								 */

								/**
								 * [tAggregateRow_4_AGGOUT process_data_end ] start
								 */

								currentVirtualComponent = "tAggregateRow_4";

								currentComponent = "tAggregateRow_4_AGGOUT";

								/**
								 * [tAggregateRow_4_AGGOUT process_data_end ] stop
								 */

								/**
								 * [tAggregateRow_5_AGGOUT main ] start
								 */

								currentVirtualComponent = "tAggregateRow_5";

								currentComponent = "tAggregateRow_5_AGGOUT";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row28"

									);
								}

								operation_finder_tAggregateRow_5.ID_Polluant = row28.ID_Polluant;
								operation_finder_tAggregateRow_5.Date = row28.Date;
								operation_finder_tAggregateRow_5.Ville = row28.Ville;

								operation_finder_tAggregateRow_5.hashCodeDirty = true;

								operation_result_tAggregateRow_5 = hash_tAggregateRow_5
										.get(operation_finder_tAggregateRow_5);

								if (operation_result_tAggregateRow_5 == null) { // G_OutMain_AggR_001

									operation_result_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();

									operation_result_tAggregateRow_5.ID_Polluant = operation_finder_tAggregateRow_5.ID_Polluant;
									operation_result_tAggregateRow_5.Date = operation_finder_tAggregateRow_5.Date;
									operation_result_tAggregateRow_5.Ville = operation_finder_tAggregateRow_5.Ville;

									hash_tAggregateRow_5.put(operation_result_tAggregateRow_5,
											operation_result_tAggregateRow_5);

								} // G_OutMain_AggR_001

								if (row28.Taux_Releve != null) { // G_OutMain_AggR_546

									if (operation_result_tAggregateRow_5.Taux_Releve_sum == null) {
										operation_result_tAggregateRow_5.Taux_Releve_sum = new BigDecimal(0)
												.setScale(3);
									}
									operation_result_tAggregateRow_5.Taux_Releve_sum = operation_result_tAggregateRow_5.Taux_Releve_sum
											.add(new BigDecimal(String.valueOf(row28.Taux_Releve)));

								} // G_OutMain_AggR_546

								tos_count_tAggregateRow_5_AGGOUT++;

								/**
								 * [tAggregateRow_5_AGGOUT main ] stop
								 */

								/**
								 * [tAggregateRow_5_AGGOUT process_data_begin ] start
								 */

								currentVirtualComponent = "tAggregateRow_5";

								currentComponent = "tAggregateRow_5_AGGOUT";

								/**
								 * [tAggregateRow_5_AGGOUT process_data_begin ] stop
								 */

								/**
								 * [tAggregateRow_5_AGGOUT process_data_end ] start
								 */

								currentVirtualComponent = "tAggregateRow_5";

								currentComponent = "tAggregateRow_5_AGGOUT";

								/**
								 * [tAggregateRow_5_AGGOUT process_data_end ] stop
								 */

								/**
								 * [tReplicate_3 process_data_end ] start
								 */

								currentComponent = "tReplicate_3";

								/**
								 * [tReplicate_3 process_data_end ] stop
								 */

								/**
								 * [tLogRow_1 process_data_end ] start
								 */

								currentComponent = "tLogRow_1";

								/**
								 * [tLogRow_1 process_data_end ] stop
								 */

							} // End of branch "mobileVile"

							/**
							 * [tMap_4 process_data_end ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_end ] stop
							 */

							/**
							 * [tFlowToIterate_1 main ] start
							 */

							currentComponent = "tFlowToIterate_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row24"

								);
							}

							globalMap.put("row24.ID_Polluant", row24.ID_Polluant);

							globalMap.put("row24.Date", row24.Date);

							globalMap.put("row24.ID_Capteur", row24.ID_Capteur);

							globalMap.put("row24.Lat", row24.Lat);

							globalMap.put("row24.Lon", row24.Lon);

							globalMap.put("row24.Taux_Releve", row24.Taux_Releve);

							nb_line_tFlowToIterate_1++;
							counter_tFlowToIterate_1++;
							globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);

							tos_count_tFlowToIterate_1++;

							/**
							 * [tFlowToIterate_1 main ] stop
							 */

							/**
							 * [tFlowToIterate_1 process_data_begin ] start
							 */

							currentComponent = "tFlowToIterate_1";

							/**
							 * [tFlowToIterate_1 process_data_begin ] stop
							 */
							NB_ITERATE_tHttpRequest_1++;

							if (execStat) {
								runStat.updateStatOnConnection("row25", 3, 0);
							}

							if (execStat) {
								runStat.updateStatOnConnection("row22", 3, 0);
							}

							if (execStat) {
								runStat.updateStatOnConnection("row20", 3, 0);
							}

							if (execStat) {
								runStat.updateStatOnConnection("FlatenGeo", 3, 0);
							}

							if (execStat) {
								runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tHttpRequest_1);
								// Thread.sleep(1000);
							}

							/**
							 * [tFileOutputDelimited_1 begin ] start
							 */

							ok_Hash.put("tFileOutputDelimited_1", false);
							start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

							currentComponent = "tFileOutputDelimited_1";

							if (execStat) {
								runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row20");
							}

							int tos_count_tFileOutputDelimited_1 = 0;

							String fileName_tFileOutputDelimited_1 = "";
							fileName_tFileOutputDelimited_1 = (new java.io.File(
									"C:/Users/mahdj/Downloads/TOS_DI-20211109_1610-V8.0.1/TOS_DI-20211109_1610-V8.0.1/workspace/QDD/data/GeoLocalisation.csv"))
											.getAbsolutePath().replace("\\", "/");
							String fullName_tFileOutputDelimited_1 = null;
							String extension_tFileOutputDelimited_1 = null;
							String directory_tFileOutputDelimited_1 = null;
							if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
								if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
										.lastIndexOf("/")) {
									fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
									extension_tFileOutputDelimited_1 = "";
								} else {
									fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
											fileName_tFileOutputDelimited_1.lastIndexOf("."));
									extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
											.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
								}
								directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
										fileName_tFileOutputDelimited_1.lastIndexOf("/"));
							} else {
								if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
									fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
											fileName_tFileOutputDelimited_1.lastIndexOf("."));
									extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
											.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
								} else {
									fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
									extension_tFileOutputDelimited_1 = "";
								}
								directory_tFileOutputDelimited_1 = "";
							}
							boolean isFileGenerated_tFileOutputDelimited_1 = true;
							java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
							globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
							if (filetFileOutputDelimited_1.exists()) {
								isFileGenerated_tFileOutputDelimited_1 = false;
							}
							String[] headColutFileOutputDelimited_1 = new String[3];
							class CSVBasicSet_tFileOutputDelimited_1 {
								private char field_Delim;
								private char row_Delim;
								private char escape;
								private char textEnclosure;
								private boolean useCRLFRecordDelimiter;

								public boolean isUseCRLFRecordDelimiter() {
									return useCRLFRecordDelimiter;
								}

								public void setFieldSeparator(String fieldSep) throws IllegalArgumentException {
									char field_Delim_tFileOutputDelimited_1[] = null;

									// support passing value (property: Field Separator) by 'context.fs' or
									// 'globalMap.get("fs")'.
									if (fieldSep.length() > 0) {
										field_Delim_tFileOutputDelimited_1 = fieldSep.toCharArray();
									} else {
										throw new IllegalArgumentException("Field Separator must be assigned a char.");
									}
									this.field_Delim = field_Delim_tFileOutputDelimited_1[0];
								}

								public char getFieldDelim() {
									if (this.field_Delim == 0) {
										setFieldSeparator(",");
									}
									return this.field_Delim;
								}

								public void setRowSeparator(String rowSep) {
									if ("\r\n".equals(rowSep)) {
										useCRLFRecordDelimiter = true;
										return;
									}
									char row_DelimtFileOutputDelimited_1[] = null;

									// support passing value (property: Row Separator) by 'context.rs' or
									// 'globalMap.get("rs")'.
									if (rowSep.length() > 0) {
										row_DelimtFileOutputDelimited_1 = rowSep.toCharArray();
									} else {
										throw new IllegalArgumentException("Row Separator must be assigned a char.");
									}
									this.row_Delim = row_DelimtFileOutputDelimited_1[0];
								}

								public char getRowDelim() {
									if (this.row_Delim == 0) {
										setRowSeparator("\n");
									}
									return this.row_Delim;
								}

								public void setEscapeAndTextEnclosure(String strEscape, String strTextEnclosure)
										throws IllegalArgumentException {
									if (strEscape.length() <= 0) {
										throw new IllegalArgumentException("Escape Char must be assigned a char.");
									}

									if ("".equals(strTextEnclosure))
										strTextEnclosure = "\0";
									char textEnclosure_tFileOutputDelimited_1[] = null;

									if (strTextEnclosure.length() > 0) {
										textEnclosure_tFileOutputDelimited_1 = strTextEnclosure.toCharArray();
									} else {
										throw new IllegalArgumentException("Text Enclosure must be assigned a char.");
									}

									this.textEnclosure = textEnclosure_tFileOutputDelimited_1[0];

									if (("\\").equals(strEscape)) {
										this.escape = '\\';
									} else if (strEscape.equals(strTextEnclosure)) {
										this.escape = this.textEnclosure;
									} else {
										// the default escape mode is double escape
										this.escape = this.textEnclosure;
									}

								}

								public char getEscapeChar() {
									return (char) this.escape;
								}

								public char getTextEnclosure() {
									return this.textEnclosure;
								}
							}

							int nb_line_tFileOutputDelimited_1 = 0;
							int splitedFileNo_tFileOutputDelimited_1 = 0;
							int currentRow_tFileOutputDelimited_1 = 0;

							CSVBasicSet_tFileOutputDelimited_1 csvSettings_tFileOutputDelimited_1 = new CSVBasicSet_tFileOutputDelimited_1();
							csvSettings_tFileOutputDelimited_1.setFieldSeparator(",");
							csvSettings_tFileOutputDelimited_1.setRowSeparator("\n");
							csvSettings_tFileOutputDelimited_1.setEscapeAndTextEnclosure("\"", "\"");
							// create directory only if not exists
							if (directory_tFileOutputDelimited_1 != null
									&& directory_tFileOutputDelimited_1.trim().length() != 0) {
								java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
										directory_tFileOutputDelimited_1);
								if (!dir_tFileOutputDelimited_1.exists()) {
									dir_tFileOutputDelimited_1.mkdirs();
								}
							}
							com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = null;

							CsvWritertFileOutputDelimited_1 = new com.talend.csv.CSVWriter(
									new java.io.BufferedWriter(new java.io.OutputStreamWriter(
											new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),
											"US-ASCII")));
							CsvWritertFileOutputDelimited_1
									.setSeparator(csvSettings_tFileOutputDelimited_1.getFieldDelim());
							if (!csvSettings_tFileOutputDelimited_1.isUseCRLFRecordDelimiter()
									&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\r'
									&& csvSettings_tFileOutputDelimited_1.getRowDelim() != '\n') {
								CsvWritertFileOutputDelimited_1
										.setLineEnd("" + csvSettings_tFileOutputDelimited_1.getRowDelim());
							}
							if (filetFileOutputDelimited_1.length() == 0) {
								headColutFileOutputDelimited_1[0] = "Vile";
								headColutFileOutputDelimited_1[1] = "Lat";
								headColutFileOutputDelimited_1[2] = "Lon";
								CsvWritertFileOutputDelimited_1.writeNext(headColutFileOutputDelimited_1);
								CsvWritertFileOutputDelimited_1.flush();
							}
							CsvWritertFileOutputDelimited_1
									.setEscapeChar(csvSettings_tFileOutputDelimited_1.getEscapeChar());
							CsvWritertFileOutputDelimited_1
									.setQuoteChar(csvSettings_tFileOutputDelimited_1.getTextEnclosure());
							CsvWritertFileOutputDelimited_1.setQuoteStatus(com.talend.csv.CSVWriter.QuoteStatus.FORCE);

							resourceMap.put("CsvWriter_tFileOutputDelimited_1", CsvWritertFileOutputDelimited_1);
							resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

							/**
							 * [tFileOutputDelimited_1 begin ] stop
							 */

							/**
							 * [tLogRow_6 begin ] start
							 */

							ok_Hash.put("tLogRow_6", false);
							start_Hash.put("tLogRow_6", System.currentTimeMillis());

							currentComponent = "tLogRow_6";

							if (execStat) {
								runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "FlatenGeo");
							}

							int tos_count_tLogRow_6 = 0;

							///////////////////////

							class Util_tLogRow_6 {

								String[] des_top = { ".", ".", "-", "+" };

								String[] des_head = { "|=", "=|", "-", "+" };

								String[] des_bottom = { "'", "'", "-", "+" };

								String name = "";

								java.util.List<String[]> list = new java.util.ArrayList<String[]>();

								int[] colLengths = new int[3];

								public void addRow(String[] row) {

									for (int i = 0; i < 3; i++) {
										if (row[i] != null) {
											colLengths[i] = Math.max(colLengths[i], row[i].length());
										}
									}
									list.add(row);
								}

								public void setTableName(String name) {

									this.name = name;
								}

								public StringBuilder format() {

									StringBuilder sb = new StringBuilder();

									sb.append(print(des_top));

									int totals = 0;
									for (int i = 0; i < colLengths.length; i++) {
										totals = totals + colLengths[i];
									}

									// name
									sb.append("|");
									int k = 0;
									for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
										sb.append(' ');
									}
									sb.append(name);
									for (int i = 0; i < totals + 2 - name.length() - k; i++) {
										sb.append(' ');
									}
									sb.append("|\n");

									// head and rows
									sb.append(print(des_head));
									for (int i = 0; i < list.size(); i++) {

										String[] row = list.get(i);

										java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

										StringBuilder sbformat = new StringBuilder();
										sbformat.append("|%1$-");
										sbformat.append(colLengths[0]);
										sbformat.append("s");

										sbformat.append("|%2$-");
										sbformat.append(colLengths[1]);
										sbformat.append("s");

										sbformat.append("|%3$-");
										sbformat.append(colLengths[2]);
										sbformat.append("s");

										sbformat.append("|\n");

										formatter.format(sbformat.toString(), (Object[]) row);

										sb.append(formatter.toString());
										if (i == 0)
											sb.append(print(des_head)); // print the head
									}

									// end
									sb.append(print(des_bottom));
									return sb;
								}

								private StringBuilder print(String[] fillChars) {
									StringBuilder sb = new StringBuilder();
									// first column
									sb.append(fillChars[0]);
									for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
										sb.append(fillChars[2]);
									}
									sb.append(fillChars[3]);

									for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
										sb.append(fillChars[2]);
									}
									sb.append(fillChars[3]);

									// last column
									for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
										sb.append(fillChars[2]);
									}
									sb.append(fillChars[1]);
									sb.append("\n");
									return sb;
								}

								public boolean isTableEmpty() {
									if (list.size() > 1)
										return false;
									return true;
								}
							}
							Util_tLogRow_6 util_tLogRow_6 = new Util_tLogRow_6();
							util_tLogRow_6.setTableName("Localization Logger");
							util_tLogRow_6.addRow(new String[] { "Vile", "Lat", "Lon", });
							StringBuilder strBuffer_tLogRow_6 = null;
							int nb_line_tLogRow_6 = 0;
///////////////////////    			

							/**
							 * [tLogRow_6 begin ] stop
							 */

							/**
							 * [tMap_3 begin ] start
							 */

							ok_Hash.put("tMap_3", false);
							start_Hash.put("tMap_3", System.currentTimeMillis());

							currentComponent = "tMap_3";

							if (execStat) {
								runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row25");
							}

							int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
							class Var__tMap_3__Struct {
							}
							Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
							FlatenGeoStruct FlatenGeo_tmp = new FlatenGeoStruct();
// ###############################

							/**
							 * [tMap_3 begin ] stop
							 */

							/**
							 * [tExtractJSONFields_1 begin ] start
							 */

							ok_Hash.put("tExtractJSONFields_1", false);
							start_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

							currentComponent = "tExtractJSONFields_1";

							if (execStat) {
								runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row22");
							}

							int tos_count_tExtractJSONFields_1 = 0;

							int nb_line_tExtractJSONFields_1 = 0;
							String jsonStr_tExtractJSONFields_1 = "";

							class JsonPathCache_tExtractJSONFields_1 {
								final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

								public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
									if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
										return jsonPathString2compiledJsonPath.get(jsonPath);
									} else {
										com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
												.compile(jsonPath);
										jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
										return compiledLoopPath;
									}
								}
							}

							JsonPathCache_tExtractJSONFields_1 jsonPathCache_tExtractJSONFields_1 = new JsonPathCache_tExtractJSONFields_1();

							/**
							 * [tExtractJSONFields_1 begin ] stop
							 */

							/**
							 * [tHttpRequest_1 begin ] start
							 */

							ok_Hash.put("tHttpRequest_1", false);
							start_Hash.put("tHttpRequest_1", System.currentTimeMillis());

							currentComponent = "tHttpRequest_1";

							int tos_count_tHttpRequest_1 = 0;

							/**
							 * [tHttpRequest_1 begin ] stop
							 */

							/**
							 * [tHttpRequest_1 main ] start
							 */

							currentComponent = "tHttpRequest_1";

							int connectTimeOut_tHttpRequest_1 = Integer.valueOf(30) * 1000;
							int readTimeOut_tHttpRequest_1 = Integer.valueOf(0) * 1000;

							java.net.URL url_tHttpRequest_1 = new java.net.URL(
									"https://api-adresse.data.gouv.fr/reverse/?lat=" + (globalMap.get("row24.Lat"))
											+ "&lon=" + (globalMap.get("row24.Lon")));

							java.net.HttpURLConnection urlConn_tHttpRequest_1 = null;

							if ("local".equals(System.getProperty("http.proxySet"))) {
								java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance()
										.getProxyForUriString("https://api-adresse.data.gouv.fr/reverse/?lat="
												+ (globalMap.get("row24.Lat")) + "&lon="
												+ (globalMap.get("row24.Lon")));
								urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1
										.openConnection(proxyToUse);
							} else {
								urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1
										.openConnection();
							}
							urlConn_tHttpRequest_1.setRequestMethod("GET");
							urlConn_tHttpRequest_1.setDoOutput(true);
							urlConn_tHttpRequest_1.setDoInput(true);
							urlConn_tHttpRequest_1.setUseCaches(false);

							boolean connected_tHttpRequest_1 = false;
							int responseCode_tHttpRequest_1 = 0;
							globalMap.put("tHttpRequest_1_CONNECTED", false);
							try {
								urlConn_tHttpRequest_1.connect();
								connected_tHttpRequest_1 = true;
								globalMap.put("tHttpRequest_1_CONNECTED", true);

								byte[] buffer_tHttpRequest_1 = new byte[1024];
								int bos_buffer_tHttpRequest_1 = 0;
								java.io.ByteArrayOutputStream bytestream_tHttpRequest_1 = new java.io.ByteArrayOutputStream();

								responseCode_tHttpRequest_1 = urlConn_tHttpRequest_1.getResponseCode();
								globalMap.put("tHttpRequest_1_RESPONSE_CODE", responseCode_tHttpRequest_1);

								if (responseCode_tHttpRequest_1 >= 200 && responseCode_tHttpRequest_1 < 300) { // Status
																												// code
																												// 2XX
																												// indicates
																												// success
									java.io.InputStream bis_tHttpRequest_1 = new java.io.BufferedInputStream(
											urlConn_tHttpRequest_1.getInputStream());
									while ((bos_buffer_tHttpRequest_1 = bis_tHttpRequest_1
											.read(buffer_tHttpRequest_1)) != -1) {
										bytestream_tHttpRequest_1.write(buffer_tHttpRequest_1, 0,
												bos_buffer_tHttpRequest_1);
									}
									bis_tHttpRequest_1.close();
								} else {
									String responseMessage_tHttpRequest_1 = urlConn_tHttpRequest_1.getResponseMessage();

									// get details response information which will be used when error appear
									java.io.InputStream err_stream_tHttpRequest_1 = urlConn_tHttpRequest_1
											.getErrorStream();
									if (err_stream_tHttpRequest_1 != null) {
										java.io.InputStream es_tHttpRequest_1 = new java.io.BufferedInputStream(
												err_stream_tHttpRequest_1);
										java.io.ByteArrayOutputStream baos_tHttpRequest_1 = new java.io.ByteArrayOutputStream();

										byte[] buf_tHttpRequest_1 = new byte[1024];
										int read_tHttpRequest_1 = -1;
										try {
											while ((read_tHttpRequest_1 = es_tHttpRequest_1
													.read(buf_tHttpRequest_1)) > 0) {
												baos_tHttpRequest_1.write(buf_tHttpRequest_1, 0, read_tHttpRequest_1);
											}
										} finally {
											es_tHttpRequest_1.close();
										}

										responseMessage_tHttpRequest_1 += ("\n"
												+ new String(baos_tHttpRequest_1.toByteArray()));
									}

									System.err.println(
											responseCode_tHttpRequest_1 + " " + responseMessage_tHttpRequest_1);
									globalMap.put("tHttpRequest_1" + "_ERROR_MESSAGE", "Request failed:"
											+ responseCode_tHttpRequest_1 + " " + responseMessage_tHttpRequest_1);
								}

								row22.ResponseContent = new String(bytestream_tHttpRequest_1.toByteArray());
								urlConn_tHttpRequest_1.disconnect();
							} catch (Exception e) {
								globalMap.put("tHttpRequest_1_ERROR_MESSAGE", e.getMessage());
								System.err.println(e.getMessage());
							}

							tos_count_tHttpRequest_1++;

							/**
							 * [tHttpRequest_1 main ] stop
							 */

							/**
							 * [tHttpRequest_1 process_data_begin ] start
							 */

							currentComponent = "tHttpRequest_1";

							/**
							 * [tHttpRequest_1 process_data_begin ] stop
							 */

							/**
							 * [tExtractJSONFields_1 main ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row22"

								);
							}

							if (row22.ResponseContent != null) {// C_01
								jsonStr_tExtractJSONFields_1 = row22.ResponseContent.toString();

								row25 = null;

								String loopPath_tExtractJSONFields_1 = "$";
								java.util.List<Object> resultset_tExtractJSONFields_1 = new java.util.ArrayList<Object>();

								boolean isStructError_tExtractJSONFields_1 = true;
								com.jayway.jsonpath.ReadContext document_tExtractJSONFields_1 = null;
								try {
									document_tExtractJSONFields_1 = com.jayway.jsonpath.JsonPath
											.parse(jsonStr_tExtractJSONFields_1);
									com.jayway.jsonpath.JsonPath compiledLoopPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
											.getCompiledJsonPath(loopPath_tExtractJSONFields_1);
									Object result_tExtractJSONFields_1 = document_tExtractJSONFields_1.read(
											compiledLoopPath_tExtractJSONFields_1, net.minidev.json.JSONObject.class);
									if (result_tExtractJSONFields_1 instanceof net.minidev.json.JSONArray) {
										resultset_tExtractJSONFields_1 = (net.minidev.json.JSONArray) result_tExtractJSONFields_1;
									} else {
										resultset_tExtractJSONFields_1.add(result_tExtractJSONFields_1);
									}

									isStructError_tExtractJSONFields_1 = false;
								} catch (java.lang.Exception ex_tExtractJSONFields_1) {
									globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
											ex_tExtractJSONFields_1.getMessage());
									System.err.println(ex_tExtractJSONFields_1.getMessage());
								}

								String jsonPath_tExtractJSONFields_1 = null;
								com.jayway.jsonpath.JsonPath compiledJsonPath_tExtractJSONFields_1 = null;

								Object value_tExtractJSONFields_1 = null;

								Object root_tExtractJSONFields_1 = null;
								for (int i_tExtractJSONFields_1 = 0; isStructError_tExtractJSONFields_1
										|| (i_tExtractJSONFields_1 < resultset_tExtractJSONFields_1
												.size()); i_tExtractJSONFields_1++) {
									if (!isStructError_tExtractJSONFields_1) {
										Object row_tExtractJSONFields_1 = resultset_tExtractJSONFields_1
												.get(i_tExtractJSONFields_1);
										row25 = null;
										row25 = new row25Struct();
										nb_line_tExtractJSONFields_1++;
										try {
											jsonPath_tExtractJSONFields_1 = ".features[0].properties.city";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
														.read(row_tExtractJSONFields_1);

												if (value_tExtractJSONFields_1 != null
														&& !value_tExtractJSONFields_1.toString().isEmpty()) {
													row25.Vile = ParserUtils
															.parseTo_List(value_tExtractJSONFields_1.toString(), ",");
												} else {
													row25.Vile =

															null

													;
												}
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
														e_tExtractJSONFields_1.getMessage());
												row25.Vile =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = ".center[1]";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
														.read(row_tExtractJSONFields_1);

												if (value_tExtractJSONFields_1 != null
														&& !value_tExtractJSONFields_1.toString().isEmpty()) {
													row25.Lat = ParserUtils
															.parseTo_List(value_tExtractJSONFields_1.toString(), ",");
												} else {
													row25.Lat =

															null

													;
												}
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
														e_tExtractJSONFields_1.getMessage());
												row25.Lat =

														null

												;
											}
											jsonPath_tExtractJSONFields_1 = ".center[0]";
											compiledJsonPath_tExtractJSONFields_1 = jsonPathCache_tExtractJSONFields_1
													.getCompiledJsonPath(jsonPath_tExtractJSONFields_1);

											try {

												value_tExtractJSONFields_1 = compiledJsonPath_tExtractJSONFields_1
														.read(row_tExtractJSONFields_1);

												if (value_tExtractJSONFields_1 != null
														&& !value_tExtractJSONFields_1.toString().isEmpty()) {
													row25.Lon = ParserUtils
															.parseTo_List(value_tExtractJSONFields_1.toString(), ",");
												} else {
													row25.Lon =

															null

													;
												}
											} catch (com.jayway.jsonpath.PathNotFoundException e_tExtractJSONFields_1) {
												globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
														e_tExtractJSONFields_1.getMessage());
												row25.Lon =

														null

												;
											}
										} catch (java.lang.Exception ex_tExtractJSONFields_1) {
											globalMap.put("tExtractJSONFields_1_ERROR_MESSAGE",
													ex_tExtractJSONFields_1.getMessage());
											System.err.println(ex_tExtractJSONFields_1.getMessage());
											row25 = null;
										}

									}

									isStructError_tExtractJSONFields_1 = false;

//}

									tos_count_tExtractJSONFields_1++;

									/**
									 * [tExtractJSONFields_1 main ] stop
									 */

									/**
									 * [tExtractJSONFields_1 process_data_begin ] start
									 */

									currentComponent = "tExtractJSONFields_1";

									/**
									 * [tExtractJSONFields_1 process_data_begin ] stop
									 */
// Start of branch "row25"
									if (row25 != null) {

										/**
										 * [tMap_3 main ] start
										 */

										currentComponent = "tMap_3";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1

													, "row25"

											);
										}

										boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_3 = false;
										boolean mainRowRejected_tMap_3 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
											// ###############################
											// # Output tables

											FlatenGeo = null;

// # Output table : 'FlatenGeo'
											FlatenGeo_tmp.Vile = ((List<?>) row25.Vile).isEmpty() ? ""
													: ((List<?>) row25.Vile).get(0).toString().replace("\"", "");
											FlatenGeo_tmp.Lat = ((List<?>) row25.Lat).isEmpty() ? ""
													: ((List<?>) row25.Lat).get(0).toString().replace("\"", "");
											FlatenGeo_tmp.Lon = ((List<?>) row25.Lon).isEmpty() ? ""
													: ((List<?>) row25.Lon).get(0).toString().replace("\"", "");
											FlatenGeo = FlatenGeo_tmp;
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_3 = false;

										tos_count_tMap_3++;

										/**
										 * [tMap_3 main ] stop
										 */

										/**
										 * [tMap_3 process_data_begin ] start
										 */

										currentComponent = "tMap_3";

										/**
										 * [tMap_3 process_data_begin ] stop
										 */
// Start of branch "FlatenGeo"
										if (FlatenGeo != null) {

											/**
											 * [tLogRow_6 main ] start
											 */

											currentComponent = "tLogRow_6";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1

														, "FlatenGeo"

												);
											}

///////////////////////		

											String[] row_tLogRow_6 = new String[3];

											if (FlatenGeo.Vile != null) { //
												row_tLogRow_6[0] = String.valueOf(FlatenGeo.Vile);

											} //

											if (FlatenGeo.Lat != null) { //
												row_tLogRow_6[1] = String.valueOf(FlatenGeo.Lat);

											} //

											if (FlatenGeo.Lon != null) { //
												row_tLogRow_6[2] = String.valueOf(FlatenGeo.Lon);

											} //

											util_tLogRow_6.addRow(row_tLogRow_6);
											nb_line_tLogRow_6++;
//////

//////                    

///////////////////////    			

											row20 = FlatenGeo;

											tos_count_tLogRow_6++;

											/**
											 * [tLogRow_6 main ] stop
											 */

											/**
											 * [tLogRow_6 process_data_begin ] start
											 */

											currentComponent = "tLogRow_6";

											/**
											 * [tLogRow_6 process_data_begin ] stop
											 */

											/**
											 * [tFileOutputDelimited_1 main ] start
											 */

											currentComponent = "tFileOutputDelimited_1";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1

														, "row20"

												);
											}

											String[] rowtFileOutputDelimited_1 = new String[3];
											rowtFileOutputDelimited_1[0] = row20.Vile == null ? null : row20.Vile;
											rowtFileOutputDelimited_1[1] = row20.Lat == null ? null : row20.Lat;
											rowtFileOutputDelimited_1[2] = row20.Lon == null ? null : row20.Lon;
											nb_line_tFileOutputDelimited_1++;
											resourceMap.put("nb_line_tFileOutputDelimited_1",
													nb_line_tFileOutputDelimited_1);
											CsvWritertFileOutputDelimited_1.writeNext(rowtFileOutputDelimited_1);

											tos_count_tFileOutputDelimited_1++;

											/**
											 * [tFileOutputDelimited_1 main ] stop
											 */

											/**
											 * [tFileOutputDelimited_1 process_data_begin ] start
											 */

											currentComponent = "tFileOutputDelimited_1";

											/**
											 * [tFileOutputDelimited_1 process_data_begin ] stop
											 */

											/**
											 * [tFileOutputDelimited_1 process_data_end ] start
											 */

											currentComponent = "tFileOutputDelimited_1";

											/**
											 * [tFileOutputDelimited_1 process_data_end ] stop
											 */

											/**
											 * [tLogRow_6 process_data_end ] start
											 */

											currentComponent = "tLogRow_6";

											/**
											 * [tLogRow_6 process_data_end ] stop
											 */

										} // End of branch "FlatenGeo"

										/**
										 * [tMap_3 process_data_end ] start
										 */

										currentComponent = "tMap_3";

										/**
										 * [tMap_3 process_data_end ] stop
										 */

									} // End of branch "row25"

									// end for
								}

							} // C_01

							/**
							 * [tExtractJSONFields_1 process_data_end ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							/**
							 * [tExtractJSONFields_1 process_data_end ] stop
							 */

							/**
							 * [tHttpRequest_1 process_data_end ] start
							 */

							currentComponent = "tHttpRequest_1";

							/**
							 * [tHttpRequest_1 process_data_end ] stop
							 */

							/**
							 * [tHttpRequest_1 end ] start
							 */

							currentComponent = "tHttpRequest_1";

							ok_Hash.put("tHttpRequest_1", true);
							end_Hash.put("tHttpRequest_1", System.currentTimeMillis());

							/**
							 * [tHttpRequest_1 end ] stop
							 */

							/**
							 * [tExtractJSONFields_1 end ] start
							 */

							currentComponent = "tExtractJSONFields_1";

							globalMap.put("tExtractJSONFields_1_NB_LINE", nb_line_tExtractJSONFields_1);

							if (execStat) {
								runStat.updateStat(resourceMap, iterateId, 2, 0, "row22");
							}

							ok_Hash.put("tExtractJSONFields_1", true);
							end_Hash.put("tExtractJSONFields_1", System.currentTimeMillis());

							/**
							 * [tExtractJSONFields_1 end ] stop
							 */

							/**
							 * [tMap_3 end ] start
							 */

							currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

							if (execStat) {
								runStat.updateStat(resourceMap, iterateId, 2, 0, "row25");
							}

							ok_Hash.put("tMap_3", true);
							end_Hash.put("tMap_3", System.currentTimeMillis());

							/**
							 * [tMap_3 end ] stop
							 */

							/**
							 * [tLogRow_6 end ] start
							 */

							currentComponent = "tLogRow_6";

//////

							java.io.PrintStream consoleOut_tLogRow_6 = null;
							if (globalMap.get("tLogRow_CONSOLE") != null) {
								consoleOut_tLogRow_6 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
							} else {
								consoleOut_tLogRow_6 = new java.io.PrintStream(
										new java.io.BufferedOutputStream(System.out));
								globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_6);
							}

							consoleOut_tLogRow_6.println(util_tLogRow_6.format().toString());
							consoleOut_tLogRow_6.flush();
//////
							globalMap.put("tLogRow_6_NB_LINE", nb_line_tLogRow_6);

///////////////////////    			

							if (execStat) {
								runStat.updateStat(resourceMap, iterateId, 2, 0, "FlatenGeo");
							}

							ok_Hash.put("tLogRow_6", true);
							end_Hash.put("tLogRow_6", System.currentTimeMillis());

							/**
							 * [tLogRow_6 end ] stop
							 */

							/**
							 * [tFileOutputDelimited_1 end ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							if (CsvWritertFileOutputDelimited_1 != null) {
								CsvWritertFileOutputDelimited_1.close();
							}

							globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);

							resourceMap.put("finish_tFileOutputDelimited_1", true);

							if (execStat) {
								runStat.updateStat(resourceMap, iterateId, 2, 0, "row20");
							}

							ok_Hash.put("tFileOutputDelimited_1", true);
							end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

							/**
							 * [tFileOutputDelimited_1 end ] stop
							 */

							if (execStat) {
								runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tHttpRequest_1);
							}

							/**
							 * [tFlowToIterate_1 process_data_end ] start
							 */

							currentComponent = "tFlowToIterate_1";

							/**
							 * [tFlowToIterate_1 process_data_end ] stop
							 */

							/**
							 * [tReplicate_2 process_data_end ] start
							 */

							currentComponent = "tReplicate_2";

							/**
							 * [tReplicate_2 process_data_end ] stop
							 */

						} // End of branch "row19"

						/**
						 * [tFilterRow_1 process_data_end ] start
						 */

						currentComponent = "tFilterRow_1";

						/**
						 * [tFilterRow_1 process_data_end ] stop
						 */

					} // End of branch "MobileStation"

					/**
					 * [tMap_2 process_data_end ] start
					 */

					currentComponent = "tMap_2";

					/**
					 * [tMap_2 process_data_end ] stop
					 */

					/**
					 * [tHashInput_tUnite_2 process_data_end ] start
					 */

					currentComponent = "tHashInput_tUnite_2";

					/**
					 * [tHashInput_tUnite_2 process_data_end ] stop
					 */

					/**
					 * [tHashInput_tUnite_2 end ] start
					 */

					currentComponent = "tHashInput_tUnite_2";

					nb_line_tHashInput_tUnite_2++;
				}

				mf_tHashInput_tUnite_2.clearCache("tHashFile_test_" + pid + "_tHashOutput_tUnite_2");

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_test_" + pid + "_tHashOutput_tUnite_2");

				globalMap.put("tHashInput_tUnite_2_NB_LINE", nb_line_tHashInput_tUnite_2);

				ok_Hash.put("tHashInput_tUnite_2", true);
				end_Hash.put("tHashInput_tUnite_2", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "MobileStation");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tReplicate_2 end ] start
				 */

				currentComponent = "tReplicate_2";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row19");
				}

				ok_Hash.put("tReplicate_2", true);
				end_Hash.put("tReplicate_2", System.currentTimeMillis());

				/**
				 * [tReplicate_2 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row31 != null) {
					tHash_Lookup_row31.endGet();
				}
				globalMap.remove("tHash_Lookup_row31");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row18");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "mobileVile");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

				/**
				 * [tReplicate_3 end ] start
				 */

				currentComponent = "tReplicate_3";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row23");
				}

				ok_Hash.put("tReplicate_3", true);
				end_Hash.put("tReplicate_3", System.currentTimeMillis());

				/**
				 * [tReplicate_3 end ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row27");
				}

				ok_Hash.put("tAggregateRow_4_AGGOUT", true);
				end_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_4_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row29");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"C:/Users/mahdj/Downloads/TOS_DI-20211109_1610-V8.0.1/TOS_DI-20211109_1610-V8.0.1/workspace/QDD/data/NBC.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "US-ASCII"));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("ID_Polluant");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Ville");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("NBC");
					outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tLogRow_4 begin ] start
				 */

				ok_Hash.put("tLogRow_4", false);
				start_Hash.put("tLogRow_4", System.currentTimeMillis());

				currentComponent = "tLogRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tLogRow_4 = 0;

				///////////////////////

				class Util_tLogRow_4 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[3];

					public void addRow(String[] row) {

						for (int i = 0; i < 3; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 2 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_4 util_tLogRow_4 = new Util_tLogRow_4();
				util_tLogRow_4.setTableName("NBC_logger");
				util_tLogRow_4.addRow(new String[] { "ID_Polluant", "Ville", "NBC", });
				StringBuilder strBuffer_tLogRow_4 = null;
				int nb_line_tLogRow_4 = 0;
///////////////////////    			

				/**
				 * [tLogRow_4 begin ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_4_AGGIN", false);
				start_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGIN";

				int tos_count_tAggregateRow_4_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_4> values_tAggregateRow_4 = hash_tAggregateRow_4
						.values();

				globalMap.put("tAggregateRow_4_NB_LINE", values_tAggregateRow_4.size());

				for (AggOperationStruct_tAggregateRow_4 aggregated_row_tAggregateRow_4 : values_tAggregateRow_4) { // G_AggR_600

					/**
					 * [tAggregateRow_4_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

					row8.ID_Polluant = aggregated_row_tAggregateRow_4.ID_Polluant;

					row8.Ville = aggregated_row_tAggregateRow_4.Ville;
					row8.NBC = (int) aggregated_row_tAggregateRow_4.count;
					row8.NBC = (int) aggregated_row_tAggregateRow_4.NBC_clmCount;

					tos_count_tAggregateRow_4_AGGIN++;

					/**
					 * [tAggregateRow_4_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

					/**
					 * [tAggregateRow_4_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tLogRow_4 main ] start
					 */

					currentComponent = "tLogRow_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row8"

						);
					}

///////////////////////		

					String[] row_tLogRow_4 = new String[3];

					if (row8.ID_Polluant != null) { //
						row_tLogRow_4[0] = String.valueOf(row8.ID_Polluant);

					} //

					if (row8.Ville != null) { //
						row_tLogRow_4[1] = String.valueOf(row8.Ville);

					} //

					if (row8.NBC != null) { //
						row_tLogRow_4[2] = String.valueOf(row8.NBC);

					} //

					util_tLogRow_4.addRow(row_tLogRow_4);
					nb_line_tLogRow_4++;
//////

//////                    

///////////////////////    			

					row29 = row8;

					tos_count_tLogRow_4++;

					/**
					 * [tLogRow_4 main ] stop
					 */

					/**
					 * [tLogRow_4 process_data_begin ] start
					 */

					currentComponent = "tLogRow_4";

					/**
					 * [tLogRow_4 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 main ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row29"

						);
					}

					StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
					if (row29.ID_Polluant != null) {
						sb_tFileOutputDelimited_2.append(row29.ID_Polluant);
					}
					sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row29.Ville != null) {
						sb_tFileOutputDelimited_2.append(row29.Ville);
					}
					sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row29.NBC != null) {
						sb_tFileOutputDelimited_2.append(row29.NBC);
					}
					sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

					nb_line_tFileOutputDelimited_2++;
					resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

					outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

					tos_count_tFileOutputDelimited_2++;

					/**
					 * [tFileOutputDelimited_2 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					/**
					 * [tFileOutputDelimited_2 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					/**
					 * [tFileOutputDelimited_2 process_data_end ] stop
					 */

					/**
					 * [tLogRow_4 process_data_end ] start
					 */

					currentComponent = "tLogRow_4";

					/**
					 * [tLogRow_4 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

					/**
					 * [tAggregateRow_4_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_4_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_4";

					currentComponent = "tAggregateRow_4_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_4_AGGIN", true);
				end_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_4_AGGIN end ] stop
				 */

				/**
				 * [tLogRow_4 end ] start
				 */

				currentComponent = "tLogRow_4";

//////

				java.io.PrintStream consoleOut_tLogRow_4 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_4 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_4 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_4);
				}

				consoleOut_tLogRow_4.println(util_tLogRow_4.format().toString());
				consoleOut_tLogRow_4.flush();
//////
				globalMap.put("tLogRow_4_NB_LINE", nb_line_tLogRow_4);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tLogRow_4", true);
				end_Hash.put("tLogRow_4", System.currentTimeMillis());

				/**
				 * [tLogRow_4 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row29");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row28");
				}

				ok_Hash.put("tAggregateRow_5_AGGOUT", true);
				end_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_5_AGGOUT end ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_5_AGGIN", false);
				start_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGIN";

				int tos_count_tAggregateRow_5_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_5> values_tAggregateRow_5 = hash_tAggregateRow_5
						.values();

				globalMap.put("tAggregateRow_5_NB_LINE", values_tAggregateRow_5.size());

				for (AggOperationStruct_tAggregateRow_5 aggregated_row_tAggregateRow_5 : values_tAggregateRow_5) { // G_AggR_600

					/**
					 * [tAggregateRow_5_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

					row30.ID_Polluant = aggregated_row_tAggregateRow_5.ID_Polluant;

					row30.Date = aggregated_row_tAggregateRow_5.Date;

					if (aggregated_row_tAggregateRow_5.Taux_Releve_sum != null) {
						row30.Taux_Releve = aggregated_row_tAggregateRow_5.Taux_Releve_sum.floatValue();

					} else {

						row30.Taux_Releve = null;

					}

					row30.Ville = aggregated_row_tAggregateRow_5.Ville;

					tos_count_tAggregateRow_5_AGGIN++;

					/**
					 * [tAggregateRow_5_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

					/**
					 * [tAggregateRow_5_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tUnite_4 main ] start
					 */

					currentComponent = "tUnite_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row30"

						);
					}

//////////

// for output
					tHashInput_tUnite_4_row21 = new tHashInput_tUnite_4_row21Struct();

					tHashInput_tUnite_4_row21.ID_Polluant = row30.ID_Polluant;
					tHashInput_tUnite_4_row21.Date = row30.Date;
					tHashInput_tUnite_4_row21.Taux_Releve = row30.Taux_Releve;
					tHashInput_tUnite_4_row21.Ville = row30.Ville;

					nb_line_tUnite_4++;

//////////

					tos_count_tUnite_4++;

					/**
					 * [tUnite_4 main ] stop
					 */

					/**
					 * [tUnite_4 process_data_begin ] start
					 */

					currentComponent = "tUnite_4";

					/**
					 * [tUnite_4 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_tUnite_4 main ] start
					 */

					currentComponent = "tHashOutput_tUnite_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "tHashInput_tUnite_4_tHashInput_tUnite_4_row21"

						);
					}

					tHashInput_tUnite_4_row21Struct oneRow_tHashOutput_tUnite_4 = new tHashInput_tUnite_4_row21Struct();

					oneRow_tHashOutput_tUnite_4.ID_Polluant = tHashInput_tUnite_4_row21.ID_Polluant;
					oneRow_tHashOutput_tUnite_4.Date = tHashInput_tUnite_4_row21.Date;
					oneRow_tHashOutput_tUnite_4.Taux_Releve = tHashInput_tUnite_4_row21.Taux_Releve;
					oneRow_tHashOutput_tUnite_4.Ville = tHashInput_tUnite_4_row21.Ville;

					tHashFile_tHashOutput_tUnite_4.put(oneRow_tHashOutput_tUnite_4);
					nb_line_tHashOutput_tUnite_4++;

					tos_count_tHashOutput_tUnite_4++;

					/**
					 * [tHashOutput_tUnite_4 main ] stop
					 */

					/**
					 * [tHashOutput_tUnite_4 process_data_begin ] start
					 */

					currentComponent = "tHashOutput_tUnite_4";

					/**
					 * [tHashOutput_tUnite_4 process_data_begin ] stop
					 */

					/**
					 * [tHashOutput_tUnite_4 process_data_end ] start
					 */

					currentComponent = "tHashOutput_tUnite_4";

					/**
					 * [tHashOutput_tUnite_4 process_data_end ] stop
					 */

					/**
					 * [tUnite_4 process_data_end ] start
					 */

					currentComponent = "tUnite_4";

					/**
					 * [tUnite_4 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

					/**
					 * [tAggregateRow_5_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_5_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_5";

					currentComponent = "tAggregateRow_5_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_5_AGGIN", true);
				end_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_5_AGGIN end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE", nb_line_tFlowToIterate_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row24");
				}

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

				/**
				 * [tUnite_4 end ] start
				 */

				currentComponent = "tUnite_4";

				globalMap.put("tUnite_4_NB_LINE", nb_line_tUnite_4);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14", "row30");
				}

				ok_Hash.put("tUnite_4", true);
				end_Hash.put("tUnite_4", System.currentTimeMillis());

				/**
				 * [tUnite_4 end ] stop
				 */

				/**
				 * [tHashOutput_tUnite_4 end ] start
				 */

				currentComponent = "tHashOutput_tUnite_4";

				globalMap.put("tHashOutput_tUnite_4_NB_LINE", nb_line_tHashOutput_tUnite_4);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "tHashInput_tUnite_4_tHashInput_tUnite_4_row21");
				}

				ok_Hash.put("tHashOutput_tUnite_4", true);
				end_Hash.put("tHashOutput_tUnite_4", System.currentTimeMillis());

				/**
				 * [tHashOutput_tUnite_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_2_AGGIN"
			globalMap.remove("tAggregateRow_2");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row9");

			// free memory for "tAggregateRow_5_AGGIN"
			globalMap.remove("tAggregateRow_5");

			// free memory for "tAggregateRow_4_AGGIN"
			globalMap.remove("tAggregateRow_4");

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row31");

			try {

				/**
				 * [tHashInput_tUnite_1 finally ] start
				 */

				currentComponent = "tHashInput_tUnite_1";

				/**
				 * [tHashInput_tUnite_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				/**
				 * [tAggregateRow_2_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				/**
				 * [tAggregateRow_2_AGGIN finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

				/**
				 * [tHashInput_tUnite_2 finally ] start
				 */

				currentComponent = "tHashInput_tUnite_2";

				/**
				 * [tHashInput_tUnite_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tReplicate_2 finally ] start
				 */

				currentComponent = "tReplicate_2";

				/**
				 * [tReplicate_2 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

				/**
				 * [tReplicate_3 finally ] start
				 */

				currentComponent = "tReplicate_3";

				/**
				 * [tReplicate_3 finally ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGOUT";

				/**
				 * [tAggregateRow_4_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_4_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_4";

				currentComponent = "tAggregateRow_4_AGGIN";

				/**
				 * [tAggregateRow_4_AGGIN finally ] stop
				 */

				/**
				 * [tLogRow_4 finally ] start
				 */

				currentComponent = "tLogRow_4";

				/**
				 * [tLogRow_4 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGOUT";

				/**
				 * [tAggregateRow_5_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_5_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_5";

				currentComponent = "tAggregateRow_5_AGGIN";

				/**
				 * [tAggregateRow_5_AGGIN finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tHttpRequest_1 finally ] start
				 */

				currentComponent = "tHttpRequest_1";

				/**
				 * [tHttpRequest_1 finally ] stop
				 */

				/**
				 * [tExtractJSONFields_1 finally ] start
				 */

				currentComponent = "tExtractJSONFields_1";

				/**
				 * [tExtractJSONFields_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tLogRow_6 finally ] start
				 */

				currentComponent = "tLogRow_6";

				/**
				 * [tLogRow_6 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					com.talend.csv.CSVWriter CsvWritertFileOutputDelimited_1 = (com.talend.csv.CSVWriter) resourceMap
							.get("CsvWriter_tFileOutputDelimited_1");

					if (CsvWritertFileOutputDelimited_1 != null) {
						CsvWritertFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tUnite_4 finally ] start
				 */

				currentComponent = "tUnite_4";

				/**
				 * [tUnite_4 finally ] stop
				 */

				/**
				 * [tHashOutput_tUnite_4 finally ] start
				 */

				currentComponent = "tHashOutput_tUnite_4";

				/**
				 * [tHashOutput_tUnite_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_tUnite_1_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public float taux_moyen_jour;

		public float getTaux_moyen_jour() {
			return this.taux_moyen_jour;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.taux_moyen_jour = this.taux_moyen_jour;
			other.Ville = this.Ville;
			other.status = this.status;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Ville = this.Ville;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.taux_moyen_jour = dis.readFloat();

					this.Ville = readString(dis);

					this.status = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.taux_moyen_jour = dis.readFloat();

					this.Ville = readString(dis);

					this.status = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// float

				dos.writeFloat(this.taux_moyen_jour);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.status, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// float

				dos.writeFloat(this.taux_moyen_jour);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.status, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",taux_moyen_jour=" + String.valueOf(taux_moyen_jour));
			sb.append(",Ville=" + Ville);
			sb.append(",status=" + status);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tauxMoyenStatusStruct implements routines.system.IPersistableRow<tauxMoyenStatusStruct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public float taux_moyen_jour;

		public float getTaux_moyen_jour() {
			return this.taux_moyen_jour;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public String status;

		public String getStatus() {
			return this.status;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final tauxMoyenStatusStruct other = (tauxMoyenStatusStruct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			return true;
		}

		public void copyDataTo(tauxMoyenStatusStruct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.taux_moyen_jour = this.taux_moyen_jour;
			other.Ville = this.Ville;
			other.status = this.status;

		}

		public void copyKeysDataTo(tauxMoyenStatusStruct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Ville = this.Ville;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.taux_moyen_jour = dis.readFloat();

					this.Ville = readString(dis);

					this.status = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.taux_moyen_jour = dis.readFloat();

					this.Ville = readString(dis);

					this.status = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// float

				dos.writeFloat(this.taux_moyen_jour);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.status, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// float

				dos.writeFloat(this.taux_moyen_jour);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.status, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",taux_moyen_jour=" + String.valueOf(taux_moyen_jour));
			sb.append(",Ville=" + Ville);
			sb.append(",status=" + status);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tauxMoyenStatusStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public float taux_moyen_jour;

		public float getTaux_moyen_jour() {
			return this.taux_moyen_jour;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.taux_moyen_jour = dis.readFloat();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.taux_moyen_jour = dis.readFloat();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// float

				dos.writeFloat(this.taux_moyen_jour);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// float

				dos.writeFloat(this.taux_moyen_jour);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",taux_moyen_jour=" + String.valueOf(taux_moyen_jour));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_3
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public float taux_moyen_jour;

		public float getTaux_moyen_jour() {
			return this.taux_moyen_jour;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtAggregateRow_3 other = (OnRowsEndStructtAggregateRow_3) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtAggregateRow_3 other) {

			other.ID_Polluant = this.ID_Polluant;
			other.taux_moyen_jour = this.taux_moyen_jour;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(OnRowsEndStructtAggregateRow_3 other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Ville = this.Ville;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.taux_moyen_jour = dis.readFloat();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.taux_moyen_jour = dis.readFloat();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// float

				dos.writeFloat(this.taux_moyen_jour);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// float

				dos.writeFloat(this.taux_moyen_jour);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",taux_moyen_jour=" + String.valueOf(taux_moyen_jour));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public float taux_moyen;

		public float getTaux_moyen() {
			return this.taux_moyen;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row10Struct other = (row10Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			return true;
		}

		public void copyDataTo(row10Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.taux_moyen = this.taux_moyen;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(row10Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.taux_moyen = dis.readFloat();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.taux_moyen = dis.readFloat();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// float

				dos.writeFloat(this.taux_moyen);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// float

				dos.writeFloat(this.taux_moyen);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",taux_moyen=" + String.valueOf(taux_moyen));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public float taux_moyen;

		public float getTaux_moyen() {
			return this.taux_moyen;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final OnRowsEndStructtAggregateRow_1 other = (OnRowsEndStructtAggregateRow_1) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			return true;
		}

		public void copyDataTo(OnRowsEndStructtAggregateRow_1 other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.taux_moyen = this.taux_moyen;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(OnRowsEndStructtAggregateRow_1 other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.taux_moyen = dis.readFloat();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.taux_moyen = dis.readFloat();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// float

				dos.writeFloat(this.taux_moyen);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// float

				dos.writeFloat(this.taux_moyen);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",taux_moyen=" + String.valueOf(taux_moyen));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row21Struct other = (row21Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			return true;
		}

		public void copyDataTo(row21Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Taux_Releve = this.Taux_Releve;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(row21Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Ville = this.Ville;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputExcel_6Struct
			implements routines.system.IPersistableRow<after_tFileInputExcel_6Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public String Date;

		public String getDate() {
			return this.Date;
		}

		public Integer ID_Station;

		public Integer getID_Station() {
			return this.ID_Station;
		}

		public Float Taux_Releve;

		public Float getTaux_Releve() {
			return this.Taux_Releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.ID_Station == null) ? 0 : this.ID_Station.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputExcel_6Struct other = (after_tFileInputExcel_6Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Station == null) {
				if (other.ID_Station != null)
					return false;

			} else if (!this.ID_Station.equals(other.ID_Station))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputExcel_6Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;
			other.Taux_Releve = this.Taux_Releve;

		}

		public void copyKeysDataTo(after_tFileInputExcel_6Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Station = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readString(dis);

					this.ID_Station = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_Releve = null;
					} else {
						this.Taux_Releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Integer

				writeInteger(this.ID_Station, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Date, dos);

				// Integer

				writeInteger(this.ID_Station, dos);

				// Float

				if (this.Taux_Releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_Releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + Date);
			sb.append(",ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Taux_Releve=" + String.valueOf(Taux_Releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputExcel_6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_4_RunAfterStruct
			implements routines.system.IPersistableRow<tHashInput_tUnite_4_RunAfterStruct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_4_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_tUnite_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_tUnite_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tHashInput_tUnite_3Process(globalMap);
				tFileInputExcel_2Process(globalMap);
				tHashInput_tUnite_1Process(globalMap);

				row21Struct row21 = new row21Struct();
				row10Struct row10 = new row10Struct();
				row13Struct row13 = new row13Struct();
				tauxMoyenStatusStruct tauxMoyenStatus = new tauxMoyenStatusStruct();
				tauxMoyenStatusStruct row17 = tauxMoyenStatus;

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row21");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ID_Polluant;
					String Date;
					String Ville;
					BigDecimal taux_moyen_sum;
					int taux_moyen_count = 0;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

							result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

							result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.ID_Polluant == null) {
							if (other.ID_Polluant != null)
								return false;
						} else if (!this.ID_Polluant.equals(other.ID_Polluant))
							return false;

						if (this.Date == null) {
							if (other.Date != null)
								return false;
						} else if (!this.Date.equals(other.Date))
							return false;

						if (this.Ville == null) {
							if (other.Ville != null)
								return false;
						} else if (!this.Ville.equals(other.Ville))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_4 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_4", false);
				start_Hash.put("tHashInput_tUnite_4", System.currentTimeMillis());

				currentComponent = "tHashInput_tUnite_4";

				int tos_count_tHashInput_tUnite_4 = 0;

				int nb_line_tHashInput_tUnite_4 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_4 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_4_row21Struct> tHashFile_tHashInput_tUnite_4 = mf_tHashInput_tUnite_4
						.getAdvancedMemoryHashFile("tHashFile_test_" + pid + "_tHashOutput_tUnite_4");
				if (tHashFile_tHashInput_tUnite_4 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_4_row21Struct> iterator_tHashInput_tUnite_4 = tHashFile_tHashInput_tUnite_4
						.iterator();
				while (iterator_tHashInput_tUnite_4.hasNext()) {
					tHashInput_tUnite_4_row21Struct next_tHashInput_tUnite_4 = iterator_tHashInput_tUnite_4.next();

					row21.ID_Polluant = next_tHashInput_tUnite_4.ID_Polluant;
					row21.Date = next_tHashInput_tUnite_4.Date;
					row21.Taux_Releve = next_tHashInput_tUnite_4.Taux_Releve;
					row21.Ville = next_tHashInput_tUnite_4.Ville;

					/**
					 * [tHashInput_tUnite_4 begin ] stop
					 */

					/**
					 * [tHashInput_tUnite_4 main ] start
					 */

					currentComponent = "tHashInput_tUnite_4";

					tos_count_tHashInput_tUnite_4++;

					/**
					 * [tHashInput_tUnite_4 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_4 process_data_begin ] start
					 */

					currentComponent = "tHashInput_tUnite_4";

					/**
					 * [tHashInput_tUnite_4 process_data_begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGOUT main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGOUT";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row21"

						);
					}

					operation_finder_tAggregateRow_1.ID_Polluant = row21.ID_Polluant;
					operation_finder_tAggregateRow_1.Date = row21.Date;
					operation_finder_tAggregateRow_1.Ville = row21.Ville;

					operation_finder_tAggregateRow_1.hashCodeDirty = true;

					operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

					if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

						operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

						operation_result_tAggregateRow_1.ID_Polluant = operation_finder_tAggregateRow_1.ID_Polluant;
						operation_result_tAggregateRow_1.Date = operation_finder_tAggregateRow_1.Date;
						operation_result_tAggregateRow_1.Ville = operation_finder_tAggregateRow_1.Ville;

						hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);

					} // G_OutMain_AggR_001

					if (row21.Taux_Releve != null) { // G_OutMain_AggR_546

						operation_result_tAggregateRow_1.taux_moyen_count++;

						if (operation_result_tAggregateRow_1.taux_moyen_sum == null) {
							operation_result_tAggregateRow_1.taux_moyen_sum = new BigDecimal(0);
						}
						operation_result_tAggregateRow_1.taux_moyen_sum = operation_result_tAggregateRow_1.taux_moyen_sum
								.add(new BigDecimal(String.valueOf(row21.Taux_Releve)));

					} // G_OutMain_AggR_546

					tos_count_tAggregateRow_1_AGGOUT++;

					/**
					 * [tAggregateRow_1_AGGOUT main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGOUT process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGOUT";

					/**
					 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGOUT process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGOUT";

					/**
					 * [tAggregateRow_1_AGGOUT process_data_end ] stop
					 */

					/**
					 * [tHashInput_tUnite_4 process_data_end ] start
					 */

					currentComponent = "tHashInput_tUnite_4";

					/**
					 * [tHashInput_tUnite_4 process_data_end ] stop
					 */

					/**
					 * [tHashInput_tUnite_4 end ] start
					 */

					currentComponent = "tHashInput_tUnite_4";

					nb_line_tHashInput_tUnite_4++;
				}

				mf_tHashInput_tUnite_4.clearCache("tHashFile_test_" + pid + "_tHashOutput_tUnite_4");

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_test_" + pid + "_tHashOutput_tUnite_4");

				globalMap.put("tHashInput_tUnite_4_NB_LINE", nb_line_tHashInput_tUnite_4);

				ok_Hash.put("tHashInput_tUnite_4", true);
				end_Hash.put("tHashInput_tUnite_4", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_4 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row21");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_3_AGGOUT", false);
				start_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tAggregateRow_3_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_3 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_3 utilClass_tAggregateRow_3 = new UtilClass_tAggregateRow_3();

				class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ID_Polluant;
					String Ville;
					BigDecimal taux_moyen_jour_sum;
					int taux_moyen_jour_count = 0;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

							result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;

						if (this.ID_Polluant == null) {
							if (other.ID_Polluant != null)
								return false;
						} else if (!this.ID_Polluant.equals(other.ID_Polluant))
							return false;

						if (this.Ville == null) {
							if (other.Ville != null)
								return false;
						} else if (!this.Ville.equals(other.Ville))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
				AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
				java.util.Map<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3>();

				/**
				 * [tAggregateRow_3_AGGOUT begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row10.ID_Polluant = aggregated_row_tAggregateRow_1.ID_Polluant;

					row10.Date = aggregated_row_tAggregateRow_1.Date;

					if (aggregated_row_tAggregateRow_1.taux_moyen_count > 0) {

						row10.taux_moyen = aggregated_row_tAggregateRow_1.taux_moyen_sum
								.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.taux_moyen_count)),
										10, BigDecimal.ROUND_HALF_UP)

								.floatValue()

						;

					} else {
						String count = "0";

						row10.taux_moyen = ParserUtils.parseTo_float(count);

					}
					row10.Ville = aggregated_row_tAggregateRow_1.Ville;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGOUT main ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGOUT";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row10"

						);
					}

					operation_finder_tAggregateRow_3.ID_Polluant = row10.ID_Polluant;
					operation_finder_tAggregateRow_3.Ville = row10.Ville;

					operation_finder_tAggregateRow_3.hashCodeDirty = true;

					operation_result_tAggregateRow_3 = hash_tAggregateRow_3.get(operation_finder_tAggregateRow_3);

					if (operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

						operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

						operation_result_tAggregateRow_3.ID_Polluant = operation_finder_tAggregateRow_3.ID_Polluant;
						operation_result_tAggregateRow_3.Ville = operation_finder_tAggregateRow_3.Ville;

						hash_tAggregateRow_3.put(operation_result_tAggregateRow_3, operation_result_tAggregateRow_3);

					} // G_OutMain_AggR_001

					operation_result_tAggregateRow_3.taux_moyen_jour_count++;

					if (operation_result_tAggregateRow_3.taux_moyen_jour_sum == null) {
						operation_result_tAggregateRow_3.taux_moyen_jour_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_3.taux_moyen_jour_sum = operation_result_tAggregateRow_3.taux_moyen_jour_sum
							.add(new BigDecimal(String.valueOf(row10.taux_moyen)));

					tos_count_tAggregateRow_3_AGGOUT++;

					/**
					 * [tAggregateRow_3_AGGOUT main ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGOUT process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGOUT";

					/**
					 * [tAggregateRow_3_AGGOUT process_data_begin ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGOUT process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGOUT";

					/**
					 * [tAggregateRow_3_AGGOUT process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tAggregateRow_3_AGGOUT", true);
				end_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_3_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17");
				}

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						"C:/Users/mahdj/Downloads/TOS_DI-20211109_1610-V8.0.1/TOS_DI-20211109_1610-V8.0.1/workspace/QDD/data/TauxMoyen.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
							fileName_tFileOutputDelimited_6.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);
				int nb_line_tFileOutputDelimited_6 = 0;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				final String OUT_DELIM_tFileOutputDelimited_6 = /** Start field tFileOutputDelimited_6:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_6:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /**
																		 * Start field
																		 * tFileOutputDelimited_6:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null && directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_6 = null;

				java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
				if (fileToDelete_tFileOutputDelimited_6.exists()) {
					fileToDelete_tFileOutputDelimited_6.delete();
				}
				outtFileOutputDelimited_6 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_6, false), "US-ASCII"));
				if (filetFileOutputDelimited_6.length() == 0) {
					outtFileOutputDelimited_6.write("ID_Polluant");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("taux_moyen_jour");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Ville");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("status");
					outtFileOutputDelimited_6.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_6", outtFileOutputDelimited_6);
				resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

				/**
				 * [tFileOutputDelimited_6 begin ] stop
				 */

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "tauxMoyenStatus");
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				class Util_tLogRow_3 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[4];

					public void addRow(String[] row) {

						for (int i = 0; i < 4; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 3 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 3 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[3] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_3 util_tLogRow_3 = new Util_tLogRow_3();
				util_tLogRow_3.setTableName("taux_jour_logger");
				util_tLogRow_3.addRow(new String[] { "ID_Polluant", "taux_moyen_jour", "Ville", "status", });
				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) globalMap
						.get("tHash_Lookup_row32"));

				row32Struct row32HashKey = new row32Struct();
				row32Struct row32Default = new row32Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				tauxMoyenStatusStruct tauxMoyenStatus_tmp = new tauxMoyenStatusStruct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_3_AGGIN", false);
				start_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGIN";

				int tos_count_tAggregateRow_3_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3
						.values();

				globalMap.put("tAggregateRow_3_NB_LINE", values_tAggregateRow_3.size());

				for (AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600

					/**
					 * [tAggregateRow_3_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

					row13.ID_Polluant = aggregated_row_tAggregateRow_3.ID_Polluant;

					if (aggregated_row_tAggregateRow_3.taux_moyen_jour_count > 0) {

						row13.taux_moyen_jour = aggregated_row_tAggregateRow_3.taux_moyen_jour_sum
								.divide(new BigDecimal(
										String.valueOf(aggregated_row_tAggregateRow_3.taux_moyen_jour_count)), 10,
										BigDecimal.ROUND_HALF_UP)

								.floatValue()

						;

					} else {
						String count = "0";

						row13.taux_moyen_jour = ParserUtils.parseTo_float(count);

					}
					row13.Ville = aggregated_row_tAggregateRow_3.Ville;

					tos_count_tAggregateRow_3_AGGIN++;

					/**
					 * [tAggregateRow_3_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

					/**
					 * [tAggregateRow_3_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tMap_5 main ] start
					 */

					currentComponent = "tMap_5";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row13"

						);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_5 = false;
					boolean mainRowRejected_tMap_5 = false;

					///////////////////////////////////////////////
					// Starting Lookup Table "row32"
					///////////////////////////////////////////////

					boolean forceLooprow32 = false;

					row32Struct row32ObjectFromLookup = null;

					if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

						hasCasePrimitiveKeyWithNull_tMap_5 = false;

						row32HashKey.ID_Polluant = row13.ID_Polluant;

						row32HashKey.hashCodeDirty = true;

						tHash_Lookup_row32.lookup(row32HashKey);

					} // G_TM_M_020

					if (tHash_Lookup_row32 != null && tHash_Lookup_row32.getCount(row32HashKey) > 1) { // G 071

						// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
						// 'row32' and it contains more one result from keys : row32.ID_Polluant = '" +
						// row32HashKey.ID_Polluant + "'");
					} // G 071

					row32Struct row32 = null;

					row32Struct fromLookup_row32 = null;
					row32 = row32Default;

					if (tHash_Lookup_row32 != null && tHash_Lookup_row32.hasNext()) { // G 099

						fromLookup_row32 = tHash_Lookup_row32.next();

					} // G 099

					if (fromLookup_row32 != null) {
						row32 = fromLookup_row32;
					}

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
						// ###############################
						// # Output tables

						tauxMoyenStatus = null;

// # Output table : 'tauxMoyenStatus'
						tauxMoyenStatus_tmp.ID_Polluant = row13.ID_Polluant;
						tauxMoyenStatus_tmp.taux_moyen_jour = row13.taux_moyen_jour;
						tauxMoyenStatus_tmp.Ville = row13.Ville;
						tauxMoyenStatus_tmp.status = row13.taux_moyen_jour >= row32.Seuil_tolere___g_m3
								? "Alerte_pollution"
								: "Normal";
						tauxMoyenStatus = tauxMoyenStatus_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_5 = false;

					tos_count_tMap_5++;

					/**
					 * [tMap_5 main ] stop
					 */

					/**
					 * [tMap_5 process_data_begin ] start
					 */

					currentComponent = "tMap_5";

					/**
					 * [tMap_5 process_data_begin ] stop
					 */
// Start of branch "tauxMoyenStatus"
					if (tauxMoyenStatus != null) {

						/**
						 * [tLogRow_3 main ] start
						 */

						currentComponent = "tLogRow_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "tauxMoyenStatus"

							);
						}

///////////////////////		

						String[] row_tLogRow_3 = new String[4];

						if (tauxMoyenStatus.ID_Polluant != null) { //
							row_tLogRow_3[0] = String.valueOf(tauxMoyenStatus.ID_Polluant);

						} //

						row_tLogRow_3[1] = FormatterUtils.formatUnwithE(tauxMoyenStatus.taux_moyen_jour);

						if (tauxMoyenStatus.Ville != null) { //
							row_tLogRow_3[2] = String.valueOf(tauxMoyenStatus.Ville);

						} //

						if (tauxMoyenStatus.status != null) { //
							row_tLogRow_3[3] = String.valueOf(tauxMoyenStatus.status);

						} //

						util_tLogRow_3.addRow(row_tLogRow_3);
						nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

						row17 = tauxMoyenStatus;

						tos_count_tLogRow_3++;

						/**
						 * [tLogRow_3 main ] stop
						 */

						/**
						 * [tLogRow_3 process_data_begin ] start
						 */

						currentComponent = "tLogRow_3";

						/**
						 * [tLogRow_3 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_6 main ] start
						 */

						currentComponent = "tFileOutputDelimited_6";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row17"

							);
						}

						StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();
						if (row17.ID_Polluant != null) {
							sb_tFileOutputDelimited_6.append(row17.ID_Polluant);
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
						sb_tFileOutputDelimited_6.append(row17.taux_moyen_jour);
						sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row17.Ville != null) {
							sb_tFileOutputDelimited_6.append(row17.Ville);
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
						if (row17.status != null) {
							sb_tFileOutputDelimited_6.append(row17.status);
						}
						sb_tFileOutputDelimited_6.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);

						nb_line_tFileOutputDelimited_6++;
						resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

						outtFileOutputDelimited_6.write(sb_tFileOutputDelimited_6.toString());

						tos_count_tFileOutputDelimited_6++;

						/**
						 * [tFileOutputDelimited_6 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_6 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_6";

						/**
						 * [tFileOutputDelimited_6 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_6 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_6";

						/**
						 * [tFileOutputDelimited_6 process_data_end ] stop
						 */

						/**
						 * [tLogRow_3 process_data_end ] start
						 */

						currentComponent = "tLogRow_3";

						/**
						 * [tLogRow_3 process_data_end ] stop
						 */

					} // End of branch "tauxMoyenStatus"

					/**
					 * [tMap_5 process_data_end ] start
					 */

					currentComponent = "tMap_5";

					/**
					 * [tMap_5 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

					/**
					 * [tAggregateRow_3_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_3_AGGIN", true);
				end_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_3_AGGIN end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row32 != null) {
					tHash_Lookup_row32.endGet();
				}
				globalMap.remove("tHash_Lookup_row32");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////

				java.io.PrintStream consoleOut_tLogRow_3 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_3 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
				}

				consoleOut_tLogRow_3.println(util_tLogRow_3.format().toString());
				consoleOut_tLogRow_3.flush();
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "tauxMoyenStatus");
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 end ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (outtFileOutputDelimited_6 != null) {
					outtFileOutputDelimited_6.flush();
					outtFileOutputDelimited_6.close();
				}

				globalMap.put("tFileOutputDelimited_6_NB_LINE", nb_line_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);

				resourceMap.put("finish_tFileOutputDelimited_6", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17");
				}

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row32");

			// free memory for "tAggregateRow_3_AGGIN"
			globalMap.remove("tAggregateRow_3");

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			try {

				/**
				 * [tHashInput_tUnite_4 finally ] start
				 */

				currentComponent = "tHashInput_tUnite_4";

				/**
				 * [tHashInput_tUnite_4 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				/**
				 * [tAggregateRow_3_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGIN";

				/**
				 * [tAggregateRow_3_AGGIN finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (resourceMap.get("finish_tFileOutputDelimited_6") == null) {

					java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_6");
					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}

				}

				/**
				 * [tFileOutputDelimited_6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_tUnite_4_SUBPROCESS_STATE", 1);
	}

	public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID_Station;

		public Integer getID_Station() {
			return this.ID_Station;
		}

		public String Address;

		public String getAddress() {
			return this.Address;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		public String Contact_Mail;

		public String getContact_Mail() {
			return this.Contact_Mail;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Station == null) ? 0 : this.ID_Station.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row36Struct other = (row36Struct) obj;

			if (this.ID_Station == null) {
				if (other.ID_Station != null)
					return false;

			} else if (!this.ID_Station.equals(other.ID_Station))

				return false;

			return true;
		}

		public void copyDataTo(row36Struct other) {

			other.ID_Station = this.ID_Station;
			other.Address = this.Address;
			other.Telephone = this.Telephone;
			other.Contact_Mail = this.Contact_Mail;

		}

		public void copyKeysDataTo(row36Struct other) {

			other.ID_Station = this.ID_Station;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

					this.Address = readString(dis);

					this.Telephone = readString(dis);

					this.Contact_Mail = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

					this.Address = readString(dis);

					this.Telephone = readString(dis);

					this.Contact_Mail = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.Telephone, dos);

				// String

				writeString(this.Contact_Mail, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.Telephone, dos);

				// String

				writeString(this.Contact_Mail, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Address=" + Address);
			sb.append(",Telephone=" + Telephone);
			sb.append(",Contact_Mail=" + Contact_Mail);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row36Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class StationsOutStruct implements routines.system.IPersistableRow<StationsOutStruct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID_Station;

		public Integer getID_Station() {
			return this.ID_Station;
		}

		public String Address;

		public String getAddress() {
			return this.Address;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		public String Contact_Mail;

		public String getContact_Mail() {
			return this.Contact_Mail;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Station == null) ? 0 : this.ID_Station.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final StationsOutStruct other = (StationsOutStruct) obj;

			if (this.ID_Station == null) {
				if (other.ID_Station != null)
					return false;

			} else if (!this.ID_Station.equals(other.ID_Station))

				return false;

			return true;
		}

		public void copyDataTo(StationsOutStruct other) {

			other.ID_Station = this.ID_Station;
			other.Address = this.Address;
			other.Telephone = this.Telephone;
			other.Contact_Mail = this.Contact_Mail;

		}

		public void copyKeysDataTo(StationsOutStruct other) {

			other.ID_Station = this.ID_Station;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

					this.Address = readString(dis);

					this.Telephone = readString(dis);

					this.Contact_Mail = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

					this.Address = readString(dis);

					this.Telephone = readString(dis);

					this.Contact_Mail = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.Telephone, dos);

				// String

				writeString(this.Contact_Mail, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

				// String

				writeString(this.Address, dos);

				// String

				writeString(this.Telephone, dos);

				// String

				writeString(this.Contact_Mail, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Address=" + Address);
			sb.append(",Telephone=" + Telephone);
			sb.append(",Contact_Mail=" + Contact_Mail);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(StationsOutStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID_Station;

		public Integer getID_Station() {
			return this.ID_Station;
		}

		public String Numero;

		public String getNumero() {
			return this.Numero;
		}

		public String Rue;

		public String getRue() {
			return this.Rue;
		}

		public Integer Code_postal;

		public Integer getCode_postal() {
			return this.Code_postal;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		public String Contact_Mail;

		public String getContact_Mail() {
			return this.Contact_Mail;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Station == null) ? 0 : this.ID_Station.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.ID_Station == null) {
				if (other.ID_Station != null)
					return false;

			} else if (!this.ID_Station.equals(other.ID_Station))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.ID_Station = this.ID_Station;
			other.Numero = this.Numero;
			other.Rue = this.Rue;
			other.Code_postal = this.Code_postal;
			other.Ville = this.Ville;
			other.Telephone = this.Telephone;
			other.Contact_Mail = this.Contact_Mail;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.ID_Station = this.ID_Station;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			Integer intReturn;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = unmarshaller.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Numero = readString(dis, ois);

				this.Rue = readString(dis, ois);

				this.Code_postal = readInteger(dis, ois);

				this.Ville = readString(dis, ois);

				this.Telephone = readString(dis, ois);

				this.Contact_Mail = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.Numero = readString(dis, objectIn);

				this.Rue = readString(dis, objectIn);

				this.Code_postal = readInteger(dis, objectIn);

				this.Ville = readString(dis, objectIn);

				this.Telephone = readString(dis, objectIn);

				this.Contact_Mail = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Numero, dos, oos);

				writeString(this.Rue, dos, oos);

				writeInteger(this.Code_postal, dos, oos);

				writeString(this.Ville, dos, oos);

				writeString(this.Telephone, dos, oos);

				writeString(this.Contact_Mail, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeString(this.Numero, dos, objectOut);

				writeString(this.Rue, dos, objectOut);

				writeInteger(this.Code_postal, dos, objectOut);

				writeString(this.Ville, dos, objectOut);

				writeString(this.Telephone, dos, objectOut);

				writeString(this.Contact_Mail, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Numero=" + Numero);
			sb.append(",Rue=" + Rue);
			sb.append(",Code_postal=" + String.valueOf(Code_postal));
			sb.append(",Ville=" + Ville);
			sb.append(",Telephone=" + Telephone);
			sb.append(",Contact_Mail=" + Contact_Mail);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];

		public Integer ID_Station;

		public Integer getID_Station() {
			return this.ID_Station;
		}

		public String Numero;

		public String getNumero() {
			return this.Numero;
		}

		public String Rue;

		public String getRue() {
			return this.Rue;
		}

		public Integer Code_postal;

		public Integer getCode_postal() {
			return this.Code_postal;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		public String Contact_Mail;

		public String getContact_Mail() {
			return this.Contact_Mail;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

					this.Numero = readString(dis);

					this.Rue = readString(dis);

					this.Code_postal = readInteger(dis);

					this.Ville = readString(dis);

					this.Telephone = readString(dis);

					this.Contact_Mail = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

					this.Numero = readString(dis);

					this.Rue = readString(dis);

					this.Code_postal = readInteger(dis);

					this.Ville = readString(dis);

					this.Telephone = readString(dis);

					this.Contact_Mail = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

				// String

				writeString(this.Numero, dos);

				// String

				writeString(this.Rue, dos);

				// Integer

				writeInteger(this.Code_postal, dos);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.Telephone, dos);

				// String

				writeString(this.Contact_Mail, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

				// String

				writeString(this.Numero, dos);

				// String

				writeString(this.Rue, dos);

				// Integer

				writeInteger(this.Code_postal, dos);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.Telephone, dos);

				// String

				writeString(this.Contact_Mail, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Numero=" + Numero);
			sb.append(",Rue=" + Rue);
			sb.append(",Code_postal=" + String.valueOf(Code_postal));
			sb.append(",Ville=" + Ville);
			sb.append(",Telephone=" + Telephone);
			sb.append(",Contact_Mail=" + Contact_Mail);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row37Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID_Station;

		public Integer getID_Station() {
			return this.ID_Station;
		}

		public String Numero;

		public String getNumero() {
			return this.Numero;
		}

		public String Rue;

		public String getRue() {
			return this.Rue;
		}

		public Integer Code_postal;

		public Integer getCode_postal() {
			return this.Code_postal;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public String Telephone;

		public String getTelephone() {
			return this.Telephone;
		}

		public String Contact_Mail;

		public String getContact_Mail() {
			return this.Contact_Mail;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Station == null) ? 0 : this.ID_Station.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row34Struct other = (row34Struct) obj;

			if (this.ID_Station == null) {
				if (other.ID_Station != null)
					return false;

			} else if (!this.ID_Station.equals(other.ID_Station))

				return false;

			return true;
		}

		public void copyDataTo(row34Struct other) {

			other.ID_Station = this.ID_Station;
			other.Numero = this.Numero;
			other.Rue = this.Rue;
			other.Code_postal = this.Code_postal;
			other.Ville = this.Ville;
			other.Telephone = this.Telephone;
			other.Contact_Mail = this.Contact_Mail;

		}

		public void copyKeysDataTo(row34Struct other) {

			other.ID_Station = this.ID_Station;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_test.length) {
					if (length < 1024 && commonByteArray_QDD_test.length == 0) {
						commonByteArray_QDD_test = new byte[1024];
					} else {
						commonByteArray_QDD_test = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_test, 0, length);
				strReturn = new String(commonByteArray_QDD_test, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

					this.Numero = readString(dis);

					this.Rue = readString(dis);

					this.Code_postal = readInteger(dis);

					this.Ville = readString(dis);

					this.Telephone = readString(dis);

					this.Contact_Mail = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

					this.ID_Station = readInteger(dis);

					this.Numero = readString(dis);

					this.Rue = readString(dis);

					this.Code_postal = readInteger(dis);

					this.Ville = readString(dis);

					this.Telephone = readString(dis);

					this.Contact_Mail = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

				// String

				writeString(this.Numero, dos);

				// String

				writeString(this.Rue, dos);

				// Integer

				writeInteger(this.Code_postal, dos);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.Telephone, dos);

				// String

				writeString(this.Contact_Mail, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.ID_Station, dos);

				// String

				writeString(this.Numero, dos);

				// String

				writeString(this.Rue, dos);

				// Integer

				writeInteger(this.Code_postal, dos);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.Telephone, dos);

				// String

				writeString(this.Contact_Mail, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Numero=" + Numero);
			sb.append(",Rue=" + Rue);
			sb.append(",Code_postal=" + String.valueOf(Code_postal));
			sb.append(",Ville=" + Ville);
			sb.append(",Telephone=" + Telephone);
			sb.append(",Contact_Mail=" + Contact_Mail);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row34Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class tHashInput_tUnite_3_RunAfterStruct
			implements routines.system.IPersistableRow<tHashInput_tUnite_3_RunAfterStruct> {
		final static byte[] commonByteArrayLock_QDD_test = new byte[0];
		static byte[] commonByteArray_QDD_test = new byte[0];

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_test) {

				try {

					int length = 0;

				}

				finally {
				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

			}

			finally {
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

			}

			finally {
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(tHashInput_tUnite_3_RunAfterStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tHashInput_tUnite_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tHashInput_tUnite_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputExcel_3Process(globalMap);

				row34Struct row34 = new row34Struct();
				row37Struct row37 = new row37Struct();
				StationsOutStruct StationsOut = new StationsOutStruct();
				StationsOutStruct row36 = StationsOut;
				row9Struct row9 = new row9Struct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row36");
				}

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						"C:/Users/mahdj/Downloads/TOS_DI-20211109_1610-V8.0.1/TOS_DI-20211109_1610-V8.0.1/workspace/QDD/data/Stations"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
							fileName_tFileOutputDelimited_4.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */
						","/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
																		 * Start field
																		 * tFileOutputDelimited_4:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("ID_Station");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Address");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Telephone");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Contact_Mail");
					outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tLogRow_7 begin ] start
				 */

				ok_Hash.put("tLogRow_7", false);
				start_Hash.put("tLogRow_7", System.currentTimeMillis());

				currentComponent = "tLogRow_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "StationsOut");
				}

				int tos_count_tLogRow_7 = 0;

				///////////////////////

				class Util_tLogRow_7 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[4];

					public void addRow(String[] row) {

						for (int i = 0; i < 4; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 3 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 3 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[3] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_7 util_tLogRow_7 = new Util_tLogRow_7();
				util_tLogRow_7.setTableName("Stations Logger");
				util_tLogRow_7.addRow(new String[] { "ID_Station", "Address", "Telephone", "Contact_Mail", });
				StringBuilder strBuffer_tLogRow_7 = null;
				int nb_line_tLogRow_7 = 0;
///////////////////////    			

				/**
				 * [tLogRow_7 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row37");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				StationsOutStruct StationsOut_tmp = new StationsOutStruct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tAdvancedHash_row9 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row9", false);
				start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tAdvancedHash_row9 = 0;

				// connection name:row9
				// source node:tReplicate_4 - inputs:(row34) outputs:(row9,row37,row9) | target
				// node:tAdvancedHash_row9 - inputs:(row9) outputs:()
				// linked node: tMap_1 - inputs:(row7,row9) outputs:(mesure_fix)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row9Struct>getLookup(matchingModeEnum_row9);

				globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);

				/**
				 * [tAdvancedHash_row9 begin ] stop
				 */

				/**
				 * [tReplicate_4 begin ] start
				 */

				ok_Hash.put("tReplicate_4", false);
				start_Hash.put("tReplicate_4", System.currentTimeMillis());

				currentComponent = "tReplicate_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row34");
				}

				int tos_count_tReplicate_4 = 0;

				/**
				 * [tReplicate_4 begin ] stop
				 */

				/**
				 * [tHashInput_tUnite_3 begin ] start
				 */

				ok_Hash.put("tHashInput_tUnite_3", false);
				start_Hash.put("tHashInput_tUnite_3", System.currentTimeMillis());

				currentComponent = "tHashInput_tUnite_3";

				int tos_count_tHashInput_tUnite_3 = 0;

				int nb_line_tHashInput_tUnite_3 = 0;

				org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_3 = org.talend.designer.components.hashfile.common.MapHashFile
						.getMapHashFile();
				org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_3_row34Struct> tHashFile_tHashInput_tUnite_3 = mf_tHashInput_tUnite_3
						.getAdvancedMemoryHashFile("tHashFile_test_" + pid + "_tHashOutput_tUnite_3");
				if (tHashFile_tHashInput_tUnite_3 == null) {
					throw new RuntimeException(
							"The hash is not initialized : The hash must exist before you read from it");
				}
				java.util.Iterator<tHashInput_tUnite_3_row34Struct> iterator_tHashInput_tUnite_3 = tHashFile_tHashInput_tUnite_3
						.iterator();
				while (iterator_tHashInput_tUnite_3.hasNext()) {
					tHashInput_tUnite_3_row34Struct next_tHashInput_tUnite_3 = iterator_tHashInput_tUnite_3.next();

					row34.ID_Station = next_tHashInput_tUnite_3.ID_Station;
					row34.Numero = next_tHashInput_tUnite_3.Numero;
					row34.Rue = next_tHashInput_tUnite_3.Rue;
					row34.Code_postal = next_tHashInput_tUnite_3.Code_postal;
					row34.Ville = next_tHashInput_tUnite_3.Ville;
					row34.Telephone = next_tHashInput_tUnite_3.Telephone;
					row34.Contact_Mail = next_tHashInput_tUnite_3.Contact_Mail;

					/**
					 * [tHashInput_tUnite_3 begin ] stop
					 */

					/**
					 * [tHashInput_tUnite_3 main ] start
					 */

					currentComponent = "tHashInput_tUnite_3";

					tos_count_tHashInput_tUnite_3++;

					/**
					 * [tHashInput_tUnite_3 main ] stop
					 */

					/**
					 * [tHashInput_tUnite_3 process_data_begin ] start
					 */

					currentComponent = "tHashInput_tUnite_3";

					/**
					 * [tHashInput_tUnite_3 process_data_begin ] stop
					 */

					/**
					 * [tReplicate_4 main ] start
					 */

					currentComponent = "tReplicate_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row34"

						);
					}

					row37 = new row37Struct();

					row37.ID_Station = row34.ID_Station;
					row37.Numero = row34.Numero;
					row37.Rue = row34.Rue;
					row37.Code_postal = row34.Code_postal;
					row37.Ville = row34.Ville;
					row37.Telephone = row34.Telephone;
					row37.Contact_Mail = row34.Contact_Mail;
					row9 = new row9Struct();

					row9.ID_Station = row34.ID_Station;
					row9.Numero = row34.Numero;
					row9.Rue = row34.Rue;
					row9.Code_postal = row34.Code_postal;
					row9.Ville = row34.Ville;
					row9.Telephone = row34.Telephone;
					row9.Contact_Mail = row34.Contact_Mail;

					tos_count_tReplicate_4++;

					/**
					 * [tReplicate_4 main ] stop
					 */

					/**
					 * [tReplicate_4 process_data_begin ] start
					 */

					currentComponent = "tReplicate_4";

					/**
					 * [tReplicate_4 process_data_begin ] stop
					 */

					/**
					 * [tMap_6 main ] start
					 */

					currentComponent = "tMap_6";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row37"

						);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_6 = false;
					boolean mainRowRejected_tMap_6 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
						// ###############################
						// # Output tables

						StationsOut = null;

// # Output table : 'StationsOut'
						StationsOut_tmp.ID_Station = row37.ID_Station;
						StationsOut_tmp.Address = row37.Numero + "\t" + row37.Rue + ", " + row37.Ville;
						StationsOut_tmp.Telephone = row37.Telephone;
						StationsOut_tmp.Contact_Mail = row37.Contact_Mail;
						StationsOut = StationsOut_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_6 = false;

					tos_count_tMap_6++;

					/**
					 * [tMap_6 main ] stop
					 */

					/**
					 * [tMap_6 process_data_begin ] start
					 */

					currentComponent = "tMap_6";

					/**
					 * [tMap_6 process_data_begin ] stop
					 */
// Start of branch "StationsOut"
					if (StationsOut != null) {

						/**
						 * [tLogRow_7 main ] start
						 */

						currentComponent = "tLogRow_7";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "StationsOut"

							);
						}

///////////////////////		

						String[] row_tLogRow_7 = new String[4];

						if (StationsOut.ID_Station != null) { //
							row_tLogRow_7[0] = String.valueOf(StationsOut.ID_Station);

						} //

						if (StationsOut.Address != null) { //
							row_tLogRow_7[1] = String.valueOf(StationsOut.Address);

						} //

						if (StationsOut.Telephone != null) { //
							row_tLogRow_7[2] = String.valueOf(StationsOut.Telephone);

						} //

						if (StationsOut.Contact_Mail != null) { //
							row_tLogRow_7[3] = String.valueOf(StationsOut.Contact_Mail);

						} //

						util_tLogRow_7.addRow(row_tLogRow_7);
						nb_line_tLogRow_7++;
//////

//////                    

///////////////////////    			

						row36 = StationsOut;

						tos_count_tLogRow_7++;

						/**
						 * [tLogRow_7 main ] stop
						 */

						/**
						 * [tLogRow_7 process_data_begin ] start
						 */

						currentComponent = "tLogRow_7";

						/**
						 * [tLogRow_7 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_4 main ] start
						 */

						currentComponent = "tFileOutputDelimited_4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row36"

							);
						}

						StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
						if (row36.ID_Station != null) {
							sb_tFileOutputDelimited_4.append(row36.ID_Station);
						}
						sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
						if (row36.Address != null) {
							sb_tFileOutputDelimited_4.append(row36.Address);
						}
						sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
						if (row36.Telephone != null) {
							sb_tFileOutputDelimited_4.append(row36.Telephone);
						}
						sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
						if (row36.Contact_Mail != null) {
							sb_tFileOutputDelimited_4.append(row36.Contact_Mail);
						}
						sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

						nb_line_tFileOutputDelimited_4++;
						resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

						outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());

						tos_count_tFileOutputDelimited_4++;

						/**
						 * [tFileOutputDelimited_4 main ] stop
						 */

						/**
						 * [tFileOutputDelimited_4 process_data_begin ] start
						 */

						currentComponent = "tFileOutputDelimited_4";

						/**
						 * [tFileOutputDelimited_4 process_data_begin ] stop
						 */

						/**
						 * [tFileOutputDelimited_4 process_data_end ] start
						 */

						currentComponent = "tFileOutputDelimited_4";

						/**
						 * [tFileOutputDelimited_4 process_data_end ] stop
						 */

						/**
						 * [tLogRow_7 process_data_end ] start
						 */

						currentComponent = "tLogRow_7";

						/**
						 * [tLogRow_7 process_data_end ] stop
						 */

					} // End of branch "StationsOut"

					/**
					 * [tMap_6 process_data_end ] start
					 */

					currentComponent = "tMap_6";

					/**
					 * [tMap_6 process_data_end ] stop
					 */

					/**
					 * [tAdvancedHash_row9 main ] start
					 */

					currentComponent = "tAdvancedHash_row9";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row9"

						);
					}

					row9Struct row9_HashRow = new row9Struct();

					row9_HashRow.ID_Station = row9.ID_Station;

					row9_HashRow.Numero = row9.Numero;

					row9_HashRow.Rue = row9.Rue;

					row9_HashRow.Code_postal = row9.Code_postal;

					row9_HashRow.Ville = row9.Ville;

					row9_HashRow.Telephone = row9.Telephone;

					row9_HashRow.Contact_Mail = row9.Contact_Mail;

					tHash_Lookup_row9.put(row9_HashRow);

					tos_count_tAdvancedHash_row9++;

					/**
					 * [tAdvancedHash_row9 main ] stop
					 */

					/**
					 * [tAdvancedHash_row9 process_data_begin ] start
					 */

					currentComponent = "tAdvancedHash_row9";

					/**
					 * [tAdvancedHash_row9 process_data_begin ] stop
					 */

					/**
					 * [tAdvancedHash_row9 process_data_end ] start
					 */

					currentComponent = "tAdvancedHash_row9";

					/**
					 * [tAdvancedHash_row9 process_data_end ] stop
					 */

					/**
					 * [tReplicate_4 process_data_end ] start
					 */

					currentComponent = "tReplicate_4";

					/**
					 * [tReplicate_4 process_data_end ] stop
					 */

					/**
					 * [tHashInput_tUnite_3 process_data_end ] start
					 */

					currentComponent = "tHashInput_tUnite_3";

					/**
					 * [tHashInput_tUnite_3 process_data_end ] stop
					 */

					/**
					 * [tHashInput_tUnite_3 end ] start
					 */

					currentComponent = "tHashInput_tUnite_3";

					nb_line_tHashInput_tUnite_3++;
				}

				mf_tHashInput_tUnite_3.clearCache("tHashFile_test_" + pid + "_tHashOutput_tUnite_3");

				org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap
						.remove("tHashFile_test_" + pid + "_tHashOutput_tUnite_3");

				globalMap.put("tHashInput_tUnite_3_NB_LINE", nb_line_tHashInput_tUnite_3);

				ok_Hash.put("tHashInput_tUnite_3", true);
				end_Hash.put("tHashInput_tUnite_3", System.currentTimeMillis());

				/**
				 * [tHashInput_tUnite_3 end ] stop
				 */

				/**
				 * [tReplicate_4 end ] start
				 */

				currentComponent = "tReplicate_4";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row34");
				}

				ok_Hash.put("tReplicate_4", true);
				end_Hash.put("tReplicate_4", System.currentTimeMillis());

				/**
				 * [tReplicate_4 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row37");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tLogRow_7 end ] start
				 */

				currentComponent = "tLogRow_7";

//////

				java.io.PrintStream consoleOut_tLogRow_7 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_7 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_7 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_7);
				}

				consoleOut_tLogRow_7.println(util_tLogRow_7.format().toString());
				consoleOut_tLogRow_7.flush();
//////
				globalMap.put("tLogRow_7_NB_LINE", nb_line_tLogRow_7);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "StationsOut");
				}

				ok_Hash.put("tLogRow_7", true);
				end_Hash.put("tLogRow_7", System.currentTimeMillis());

				/**
				 * [tLogRow_7 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE", nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row36");
				}

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row9 end ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				tHash_Lookup_row9.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tAdvancedHash_row9", true);
				end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row9 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tHashInput_tUnite_3 finally ] start
				 */

				currentComponent = "tHashInput_tUnite_3";

				/**
				 * [tHashInput_tUnite_3 finally ] stop
				 */

				/**
				 * [tReplicate_4 finally ] start
				 */

				currentComponent = "tReplicate_4";

				/**
				 * [tReplicate_4 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tLogRow_7 finally ] start
				 */

				currentComponent = "tLogRow_7";

				/**
				 * [tLogRow_7 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row9 finally ] start
				 */

				currentComponent = "tAdvancedHash_row9";

				/**
				 * [tAdvancedHash_row9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tHashInput_tUnite_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final test testClass = new test();

		int exitCode = testClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = test.class.getClassLoader()
					.getResourceAsStream("qdd/test_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = test.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tHashInput_tUnite_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tHashInput_tUnite_4) {
			globalMap.put("tHashInput_tUnite_4_SUBPROCESS_STATE", -1);

			e_tHashInput_tUnite_4.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : test");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 926338 characters generated by Talend Open Studio for Data Integration on the
 * November 15, 2024, 11:47:04 AM GMT+01:00
 ************************************************************************************************/