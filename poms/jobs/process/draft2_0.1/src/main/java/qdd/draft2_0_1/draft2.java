// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package qdd.draft2_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: draft2 Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class draft2 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "draft2";
	private final String projectName = "QDD";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					draft2.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(draft2.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */
						"D:/Study/DataScale/quality des donnes/sources/s3_pollutants.csv"/**
																							 * End field
																							 * tFileInputDelimited_1:FILENAME
																							 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited_1),
									fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_1.readNext()) {

								totalLinetFileInputDelimited_1++;

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
											: totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
										? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited_1),
										fieldSeparator_tFileInputDelimited_1[0], "US-ASCII");
							}
							csvReadertFileInputDelimited_1.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_QDD_draft2 = new byte[0];
		static byte[] commonByteArray_QDD_draft2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID_Station;

		public int getID_Station() {
			return this.ID_Station;
		}

		public int Num;

		public int getNum() {
			return this.Num;
		}

		public String Rue;

		public String getRue() {
			return this.Rue;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public int Code_postal;

		public int getCode_postal() {
			return this.Code_postal;
		}

		public String Tel;

		public String getTel() {
			return this.Tel;
		}

		public String Contact_mail;

		public String getContact_mail() {
			return this.Contact_mail;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID_Station;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.ID_Station != other.ID_Station)
				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.ID_Station = this.ID_Station;
			other.Num = this.Num;
			other.Rue = this.Rue;
			other.Ville = this.Ville;
			other.Code_postal = this.Code_postal;
			other.Tel = this.Tel;
			other.Contact_mail = this.Contact_mail;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.ID_Station = this.ID_Station;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Station = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Station = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID_Station);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.ID_Station);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Num = dis.readInt();

				this.Rue = readString(dis, ois);

				this.Ville = readString(dis, ois);

				this.Code_postal = dis.readInt();

				this.Tel = readString(dis, ois);

				this.Contact_mail = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.Num = objectIn.readInt();

				this.Rue = readString(dis, objectIn);

				this.Ville = readString(dis, objectIn);

				this.Code_postal = objectIn.readInt();

				this.Tel = readString(dis, objectIn);

				this.Contact_mail = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.Num);

				writeString(this.Rue, dos, oos);

				writeString(this.Ville, dos, oos);

				dos.writeInt(this.Code_postal);

				writeString(this.Tel, dos, oos);

				writeString(this.Contact_mail, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				objectOut.writeInt(this.Num);

				writeString(this.Rue, dos, objectOut);

				writeString(this.Ville, dos, objectOut);

				objectOut.writeInt(this.Code_postal);

				writeString(this.Tel, dos, objectOut);

				writeString(this.Contact_mail, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Num=" + String.valueOf(Num));
			sb.append(",Rue=" + Rue);
			sb.append(",Ville=" + Ville);
			sb.append(",Code_postal=" + String.valueOf(Code_postal));
			sb.append(",Tel=" + Tel);
			sb.append(",Contact_mail=" + Contact_mail);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tFileInputDelimited_16 - inputs:(after_tFileInputDelimited_12)
				// outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5)
				// outputs:()
				// linked node: tMap_2 - inputs:(row4,row5) outputs:(s2_mesures_station)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct>getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_16 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_16", false);
				start_Hash.put("tFileInputDelimited_16", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_16";

				int tos_count_tFileInputDelimited_16 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_16 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_16 = 0;
				int footer_tFileInputDelimited_16 = 0;
				int totalLinetFileInputDelimited_16 = 0;
				int limittFileInputDelimited_16 = -1;
				int lastLinetFileInputDelimited_16 = -1;

				char fieldSeparator_tFileInputDelimited_16[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_16 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_16[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_16 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_16 = /** Start field tFileInputDelimited_16:FILENAME */
						"D:/Study/DataScale/quality des donnes/sources/s2_station.csv"/**
																						 * End field
																						 * tFileInputDelimited_16:FILENAME
																						 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_16 = null;

				try {

					String[] rowtFileInputDelimited_16 = null;
					int currentLinetFileInputDelimited_16 = 0;
					int outputLinetFileInputDelimited_16 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_16 = 0;
							if (footer_value_tFileInputDelimited_16 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_16,
									fieldSeparator_tFileInputDelimited_16[0], "US-ASCII");
						} else {
							csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited_16),
									fieldSeparator_tFileInputDelimited_16[0], "US-ASCII");
						}

						csvReadertFileInputDelimited_16.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
							csvReadertFileInputDelimited_16.setLineEnd("" + rowSeparator_tFileInputDelimited_16[0]);

						csvReadertFileInputDelimited_16.setQuoteChar('"');

						csvReadertFileInputDelimited_16.setEscapeChar(csvReadertFileInputDelimited_16.getQuoteChar());

						if (footer_tFileInputDelimited_16 > 0) {
							for (totalLinetFileInputDelimited_16 = 0; totalLinetFileInputDelimited_16 < 1; totalLinetFileInputDelimited_16++) {
								csvReadertFileInputDelimited_16.readNext();
							}
							csvReadertFileInputDelimited_16.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_16.readNext()) {

								totalLinetFileInputDelimited_16++;

							}
							int lastLineTemptFileInputDelimited_16 = totalLinetFileInputDelimited_16
									- footer_tFileInputDelimited_16 < 0 ? 0
											: totalLinetFileInputDelimited_16 - footer_tFileInputDelimited_16;
							if (lastLinetFileInputDelimited_16 > 0) {
								lastLinetFileInputDelimited_16 = lastLinetFileInputDelimited_16 < lastLineTemptFileInputDelimited_16
										? lastLinetFileInputDelimited_16
										: lastLineTemptFileInputDelimited_16;
							} else {
								lastLinetFileInputDelimited_16 = lastLineTemptFileInputDelimited_16;
							}

							csvReadertFileInputDelimited_16.close();
							if (filename_tFileInputDelimited_16 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_16,
										fieldSeparator_tFileInputDelimited_16[0], "US-ASCII");
							} else {
								csvReadertFileInputDelimited_16 = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited_16),
										fieldSeparator_tFileInputDelimited_16[0], "US-ASCII");
							}
							csvReadertFileInputDelimited_16.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_16[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_16[0] != '\r'))
								csvReadertFileInputDelimited_16.setLineEnd("" + rowSeparator_tFileInputDelimited_16[0]);

							csvReadertFileInputDelimited_16.setQuoteChar('"');

							csvReadertFileInputDelimited_16
									.setEscapeChar(csvReadertFileInputDelimited_16.getQuoteChar());

						}

						if (limittFileInputDelimited_16 != 0) {
							for (currentLinetFileInputDelimited_16 = 0; currentLinetFileInputDelimited_16 < 1; currentLinetFileInputDelimited_16++) {
								csvReadertFileInputDelimited_16.readNext();
							}
						}
						csvReadertFileInputDelimited_16.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_16_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_16 != 0 && csvReadertFileInputDelimited_16 != null
							&& csvReadertFileInputDelimited_16.readNext()) {
						rowstate_tFileInputDelimited_16.reset();

						rowtFileInputDelimited_16 = csvReadertFileInputDelimited_16.getValues();

						currentLinetFileInputDelimited_16++;

						if (lastLinetFileInputDelimited_16 > -1
								&& currentLinetFileInputDelimited_16 > lastLinetFileInputDelimited_16) {
							break;
						}
						outputLinetFileInputDelimited_16++;
						if (limittFileInputDelimited_16 > 0
								&& outputLinetFileInputDelimited_16 > limittFileInputDelimited_16) {
							break;
						}

						row5 = null;

						row5 = null;

						boolean whetherReject_tFileInputDelimited_16 = false;
						row5 = new row5Struct();
						try {

							char fieldSeparator_tFileInputDelimited_16_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_16_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_16.length == 1
									&& ("\015").equals(rowtFileInputDelimited_16[0])) {// empty line when row separator
																						// is '\n'

								row5.ID_Station = 0;

								row5.Num = 0;

								row5.Rue = null;

								row5.Ville = null;

								row5.Code_postal = 0;

								row5.Tel = null;

								row5.Contact_mail = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_16 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_16 = 0;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {
										try {

											row5.ID_Station = ParserUtils.parseTo_int(
													rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

										} catch (java.lang.Exception ex_tFileInputDelimited_16) {
											globalMap.put("tFileInputDelimited_16_ERROR_MESSAGE",
													ex_tFileInputDelimited_16.getMessage());
											rowstate_tFileInputDelimited_16.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ID_Station", "row5",
															rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
															ex_tFileInputDelimited_16),
													ex_tFileInputDelimited_16));
										}
									} else {

										rowstate_tFileInputDelimited_16.setException(new RuntimeException(
												"Value is empty for column : 'ID_Station' in 'row5' connection, value is invalid or this column should be nullable or have a default value."));

									}

								} else {

									rowstate_tFileInputDelimited_16.setException(new RuntimeException(
											"Value is empty for column : 'ID_Station' in 'row5' connection, value is invalid or this column should be nullable or have a default value."));

								}

								columnIndexWithD_tFileInputDelimited_16 = 1;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {
										try {

											row5.Num = ParserUtils.parseTo_int(
													rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

										} catch (java.lang.Exception ex_tFileInputDelimited_16) {
											globalMap.put("tFileInputDelimited_16_ERROR_MESSAGE",
													ex_tFileInputDelimited_16.getMessage());
											rowstate_tFileInputDelimited_16.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Num", "row5",
															rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
															ex_tFileInputDelimited_16),
													ex_tFileInputDelimited_16));
										}
									} else {

										rowstate_tFileInputDelimited_16.setException(new RuntimeException(
												"Value is empty for column : 'Num' in 'row5' connection, value is invalid or this column should be nullable or have a default value."));

									}

								} else {

									rowstate_tFileInputDelimited_16.setException(new RuntimeException(
											"Value is empty for column : 'Num' in 'row5' connection, value is invalid or this column should be nullable or have a default value."));

								}

								columnIndexWithD_tFileInputDelimited_16 = 2;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row5.Rue = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {

									row5.Rue = null;

								}

								columnIndexWithD_tFileInputDelimited_16 = 3;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row5.Ville = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {

									row5.Ville = null;

								}

								columnIndexWithD_tFileInputDelimited_16 = 4;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									if (rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]
											.length() > 0) {
										try {

											row5.Code_postal = ParserUtils.parseTo_int(
													rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16]);

										} catch (java.lang.Exception ex_tFileInputDelimited_16) {
											globalMap.put("tFileInputDelimited_16_ERROR_MESSAGE",
													ex_tFileInputDelimited_16.getMessage());
											rowstate_tFileInputDelimited_16.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Code_postal", "row5",
															rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16],
															ex_tFileInputDelimited_16),
													ex_tFileInputDelimited_16));
										}
									} else {

										rowstate_tFileInputDelimited_16.setException(new RuntimeException(
												"Value is empty for column : 'Code_postal' in 'row5' connection, value is invalid or this column should be nullable or have a default value."));

									}

								} else {

									rowstate_tFileInputDelimited_16.setException(new RuntimeException(
											"Value is empty for column : 'Code_postal' in 'row5' connection, value is invalid or this column should be nullable or have a default value."));

								}

								columnIndexWithD_tFileInputDelimited_16 = 5;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row5.Tel = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {

									row5.Tel = null;

								}

								columnIndexWithD_tFileInputDelimited_16 = 6;

								if (columnIndexWithD_tFileInputDelimited_16 < rowtFileInputDelimited_16.length) {

									row5.Contact_mail = rowtFileInputDelimited_16[columnIndexWithD_tFileInputDelimited_16];

								} else {

									row5.Contact_mail = null;

								}

							}

							if (rowstate_tFileInputDelimited_16.getException() != null) {
								throw rowstate_tFileInputDelimited_16.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_16_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_16 = true;

							System.err.println(e.getMessage());
							row5 = null;

							globalMap.put("tFileInputDelimited_16_ERROR_MESSAGE", e.getMessage());

						}

						/**
						 * [tFileInputDelimited_16 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_16 main ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						tos_count_tFileInputDelimited_16++;

						/**
						 * [tFileInputDelimited_16 main ] stop
						 */

						/**
						 * [tFileInputDelimited_16 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						/**
						 * [tFileInputDelimited_16 process_data_begin ] stop
						 */
// Start of branch "row5"
						if (row5 != null) {

							/**
							 * [tAdvancedHash_row5 main ] start
							 */

							currentComponent = "tAdvancedHash_row5";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row5"

								);
							}

							row5Struct row5_HashRow = new row5Struct();

							row5_HashRow.ID_Station = row5.ID_Station;

							row5_HashRow.Num = row5.Num;

							row5_HashRow.Rue = row5.Rue;

							row5_HashRow.Ville = row5.Ville;

							row5_HashRow.Code_postal = row5.Code_postal;

							row5_HashRow.Tel = row5.Tel;

							row5_HashRow.Contact_mail = row5.Contact_mail;

							tHash_Lookup_row5.put(row5_HashRow);

							tos_count_tAdvancedHash_row5++;

							/**
							 * [tAdvancedHash_row5 main ] stop
							 */

							/**
							 * [tAdvancedHash_row5 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row5";

							/**
							 * [tAdvancedHash_row5 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row5 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row5";

							/**
							 * [tAdvancedHash_row5 process_data_end ] stop
							 */

						} // End of branch "row5"

						/**
						 * [tFileInputDelimited_16 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						/**
						 * [tFileInputDelimited_16 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_16 end ] start
						 */

						currentComponent = "tFileInputDelimited_16";

						nb_line_tFileInputDelimited_16++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_16 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_16 != null) {
							csvReadertFileInputDelimited_16.close();
						}
					}
					if (csvReadertFileInputDelimited_16 != null) {
						globalMap.put("tFileInputDelimited_16_NB_LINE", nb_line_tFileInputDelimited_16);
					}

				}

				ok_Hash.put("tFileInputDelimited_16", true);
				end_Hash.put("tFileInputDelimited_16", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_16 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_16 finally ] start
				 */

				currentComponent = "tFileInputDelimited_16";

				/**
				 * [tFileInputDelimited_16 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_16_SUBPROCESS_STATE", 1);
	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_QDD_draft2 = new byte[0];
		static byte[] commonByteArray_QDD_draft2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public float Taux_releve_station;

		public float getTaux_releve_station() {
			return this.Taux_releve_station;
		}

		public float Taux_releve_mobile;

		public float getTaux_releve_mobile() {
			return this.Taux_releve_mobile;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row9Struct other = (row9Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			return true;
		}

		public void copyDataTo(row9Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Ville = this.Ville;
			other.Taux_releve_station = this.Taux_releve_station;
			other.Taux_releve_mobile = this.Taux_releve_mobile;

		}

		public void copyKeysDataTo(row9Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.Ville = readString(dis);

					this.Taux_releve_station = dis.readFloat();

					this.Taux_releve_mobile = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.Ville = readString(dis);

					this.Taux_releve_station = dis.readFloat();

					this.Taux_releve_mobile = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.Ville, dos);

				// float

				dos.writeFloat(this.Taux_releve_station);

				// float

				dos.writeFloat(this.Taux_releve_mobile);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.Ville, dos);

				// float

				dos.writeFloat(this.Taux_releve_station);

				// float

				dos.writeFloat(this.Taux_releve_mobile);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",Ville=" + Ville);
			sb.append(",Taux_releve_station=" + String.valueOf(Taux_releve_station));
			sb.append(",Taux_releve_mobile=" + String.valueOf(Taux_releve_mobile));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class mesuresStruct implements routines.system.IPersistableRow<mesuresStruct> {
		final static byte[] commonByteArrayLock_QDD_draft2 = new byte[0];
		static byte[] commonByteArray_QDD_draft2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public float Taux_releve_station;

		public float getTaux_releve_station() {
			return this.Taux_releve_station;
		}

		public float Taux_releve_mobile;

		public float getTaux_releve_mobile() {
			return this.Taux_releve_mobile;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final mesuresStruct other = (mesuresStruct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			return true;
		}

		public void copyDataTo(mesuresStruct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.Ville = this.Ville;
			other.Taux_releve_station = this.Taux_releve_station;
			other.Taux_releve_mobile = this.Taux_releve_mobile;

		}

		public void copyKeysDataTo(mesuresStruct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.Ville = readString(dis);

					this.Taux_releve_station = dis.readFloat();

					this.Taux_releve_mobile = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.Ville = readString(dis);

					this.Taux_releve_station = dis.readFloat();

					this.Taux_releve_mobile = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.Ville, dos);

				// float

				dos.writeFloat(this.Taux_releve_station);

				// float

				dos.writeFloat(this.Taux_releve_mobile);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.Ville, dos);

				// float

				dos.writeFloat(this.Taux_releve_station);

				// float

				dos.writeFloat(this.Taux_releve_mobile);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",Ville=" + Ville);
			sb.append(",Taux_releve_station=" + String.valueOf(Taux_releve_station));
			sb.append(",Taux_releve_mobile=" + String.valueOf(Taux_releve_mobile));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(mesuresStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_QDD_draft2 = new byte[0];
		static byte[] commonByteArray_QDD_draft2 = new byte[0];

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public Integer ID_Capteur;

		public Integer getID_Capteur() {
			return this.ID_Capteur;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public Float Taux_releve;

		public Float getTaux_releve() {
			return this.Taux_releve;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Capteur = readInteger(dis);

					this.Ville = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_releve = null;
					} else {
						this.Taux_releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Capteur = readInteger(dis);

					this.Ville = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_releve = null;
					} else {
						this.Taux_releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.ID_Capteur, dos);

				// String

				writeString(this.Ville, dos);

				// Float

				if (this.Taux_releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.ID_Capteur, dos);

				// String

				writeString(this.Ville, dos);

				// Float

				if (this.Taux_releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ID_Capteur=" + String.valueOf(ID_Capteur));
			sb.append(",Ville=" + Ville);
			sb.append(",Taux_releve=" + String.valueOf(Taux_releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_QDD_draft2 = new byte[0];
		static byte[] commonByteArray_QDD_draft2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public Integer ID_Capteur;

		public Integer getID_Capteur() {
			return this.ID_Capteur;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public Float Taux_releve;

		public Float getTaux_releve() {
			return this.Taux_releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.ID_Capteur == null) ? 0 : this.ID_Capteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Capteur == null) {
				if (other.ID_Capteur != null)
					return false;

			} else if (!this.ID_Capteur.equals(other.ID_Capteur))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;
			other.Ville = this.Ville;
			other.Taux_releve = this.Taux_releve;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Capteur = readInteger(dis);

					this.Ville = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_releve = null;
					} else {
						this.Taux_releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Capteur = readInteger(dis);

					this.Ville = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_releve = null;
					} else {
						this.Taux_releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.ID_Capteur, dos);

				// String

				writeString(this.Ville, dos);

				// Float

				if (this.Taux_releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.ID_Capteur, dos);

				// String

				writeString(this.Ville, dos);

				// Float

				if (this.Taux_releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ID_Capteur=" + String.valueOf(ID_Capteur));
			sb.append(",Ville=" + Ville);
			sb.append(",Taux_releve=" + String.valueOf(Taux_releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Capteur, other.ID_Capteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_3Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_3Struct> {
		final static byte[] commonByteArrayLock_QDD_draft2 = new byte[0];
		static byte[] commonByteArray_QDD_draft2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public Integer ID_Capteur;

		public Integer getID_Capteur() {
			return this.ID_Capteur;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public Float Taux_releve;

		public Float getTaux_releve() {
			return this.Taux_releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.ID_Capteur == null) ? 0 : this.ID_Capteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_3Struct other = (after_tFileInputDelimited_3Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Capteur == null) {
				if (other.ID_Capteur != null)
					return false;

			} else if (!this.ID_Capteur.equals(other.ID_Capteur))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_3Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;
			other.Ville = this.Ville;
			other.Taux_releve = this.Taux_releve;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_3Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Capteur = readInteger(dis);

					this.Ville = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_releve = null;
					} else {
						this.Taux_releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Capteur = readInteger(dis);

					this.Ville = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_releve = null;
					} else {
						this.Taux_releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.ID_Capteur, dos);

				// String

				writeString(this.Ville, dos);

				// Float

				if (this.Taux_releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.ID_Capteur, dos);

				// String

				writeString(this.Ville, dos);

				// Float

				if (this.Taux_releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ID_Capteur=" + String.valueOf(ID_Capteur));
			sb.append(",Ville=" + Ville);
			sb.append(",Taux_releve=" + String.valueOf(Taux_releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Capteur, other.ID_Capteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_QDD_draft2 = new byte[0];
		static byte[] commonByteArray_QDD_draft2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public Integer ID_Capteur;

		public Integer getID_Capteur() {
			return this.ID_Capteur;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public Float Taux_releve;

		public Float getTaux_releve() {
			return this.Taux_releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.ID_Capteur == null) ? 0 : this.ID_Capteur.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row2Struct other = (row2Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Capteur == null) {
				if (other.ID_Capteur != null)
					return false;

			} else if (!this.ID_Capteur.equals(other.ID_Capteur))

				return false;

			return true;
		}

		public void copyDataTo(row2Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;
			other.Ville = this.Ville;
			other.Taux_releve = this.Taux_releve;

		}

		public void copyKeysDataTo(row2Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Capteur = this.ID_Capteur;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Capteur = readInteger(dis);

					this.Ville = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_releve = null;
					} else {
						this.Taux_releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Capteur = readInteger(dis);

					this.Ville = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_releve = null;
					} else {
						this.Taux_releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.ID_Capteur, dos);

				// String

				writeString(this.Ville, dos);

				// Float

				if (this.Taux_releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.ID_Capteur, dos);

				// String

				writeString(this.Ville, dos);

				// Float

				if (this.Taux_releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ID_Capteur=" + String.valueOf(ID_Capteur));
			sb.append(",Ville=" + Ville);
			sb.append(",Taux_releve=" + String.valueOf(Taux_releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Capteur, other.ID_Capteur);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_7Process(globalMap);

				row1Struct row1 = new row1Struct();

				row2Struct row2 = new row2Struct();

				row3Struct row3 = new row3Struct();
				mesuresStruct mesures = new mesuresStruct();
				row9Struct row9 = new row9Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[5];

					public void addRow(String[] row) {

						for (int i = 0; i < 5; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 4 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 4 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[4] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(
						new String[] { "ID_Polluant", "Date", "Ville", "Taux_releve_station", "Taux_releve_mobile", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "mesures");
				}

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				mesuresStruct mesures_tmp = new mesuresStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tUnite_2 begin ] start
				 */

				ok_Hash.put("tUnite_2", false);
				start_Hash.put("tUnite_2", System.currentTimeMillis());

				currentComponent = "tUnite_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2", "row1");
				}

				int tos_count_tUnite_2 = 0;

				int nb_line_tUnite_2 = 0;

				/**
				 * [tUnite_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				int footer_tFileInputDelimited_3 = 0;
				int totalLinetFileInputDelimited_3 = 0;
				int limittFileInputDelimited_3 = -1;
				int lastLinetFileInputDelimited_3 = -1;

				char fieldSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_3 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_3[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_3 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_3 = /** Start field tFileInputDelimited_3:FILENAME */
						"D:/Study/DataScale/quality des donnes/sources/s4.csv"/**
																				 * End field
																				 * tFileInputDelimited_3:FILENAME
																				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_3 = null;

				try {

					String[] rowtFileInputDelimited_3 = null;
					int currentLinetFileInputDelimited_3 = 0;
					int outputLinetFileInputDelimited_3 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_3 = 0;
							if (footer_value_tFileInputDelimited_3 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_3,
									fieldSeparator_tFileInputDelimited_3[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited_3),
									fieldSeparator_tFileInputDelimited_3[0], "UTF-8");
						}

						csvReadertFileInputDelimited_3.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
							csvReadertFileInputDelimited_3.setLineEnd("" + rowSeparator_tFileInputDelimited_3[0]);

						csvReadertFileInputDelimited_3.setQuoteChar('"');

						csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());

						if (footer_tFileInputDelimited_3 > 0) {
							for (totalLinetFileInputDelimited_3 = 0; totalLinetFileInputDelimited_3 < 1; totalLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
							csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_3.readNext()) {

								totalLinetFileInputDelimited_3++;

							}
							int lastLineTemptFileInputDelimited_3 = totalLinetFileInputDelimited_3
									- footer_tFileInputDelimited_3 < 0 ? 0
											: totalLinetFileInputDelimited_3 - footer_tFileInputDelimited_3;
							if (lastLinetFileInputDelimited_3 > 0) {
								lastLinetFileInputDelimited_3 = lastLinetFileInputDelimited_3 < lastLineTemptFileInputDelimited_3
										? lastLinetFileInputDelimited_3
										: lastLineTemptFileInputDelimited_3;
							} else {
								lastLinetFileInputDelimited_3 = lastLineTemptFileInputDelimited_3;
							}

							csvReadertFileInputDelimited_3.close();
							if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_3,
										fieldSeparator_tFileInputDelimited_3[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_3 = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited_3),
										fieldSeparator_tFileInputDelimited_3[0], "UTF-8");
							}
							csvReadertFileInputDelimited_3.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_3[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_3[0] != '\r'))
								csvReadertFileInputDelimited_3.setLineEnd("" + rowSeparator_tFileInputDelimited_3[0]);

							csvReadertFileInputDelimited_3.setQuoteChar('"');

							csvReadertFileInputDelimited_3.setEscapeChar(csvReadertFileInputDelimited_3.getQuoteChar());

						}

						if (limittFileInputDelimited_3 != 0) {
							for (currentLinetFileInputDelimited_3 = 0; currentLinetFileInputDelimited_3 < 1; currentLinetFileInputDelimited_3++) {
								csvReadertFileInputDelimited_3.readNext();
							}
						}
						csvReadertFileInputDelimited_3.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_3 != 0 && csvReadertFileInputDelimited_3 != null
							&& csvReadertFileInputDelimited_3.readNext()) {
						rowstate_tFileInputDelimited_3.reset();

						rowtFileInputDelimited_3 = csvReadertFileInputDelimited_3.getValues();

						currentLinetFileInputDelimited_3++;

						if (lastLinetFileInputDelimited_3 > -1
								&& currentLinetFileInputDelimited_3 > lastLinetFileInputDelimited_3) {
							break;
						}
						outputLinetFileInputDelimited_3++;
						if (limittFileInputDelimited_3 > 0
								&& outputLinetFileInputDelimited_3 > limittFileInputDelimited_3) {
							break;
						}

						row1 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row1 = new row1Struct();
						try {

							char fieldSeparator_tFileInputDelimited_3_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_3_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_3.length == 1 && ("\015").equals(rowtFileInputDelimited_3[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row1.ID_Polluant = null;

								row1.Date = null;

								row1.ID_Capteur = null;

								row1.Ville = null;

								row1.Taux_releve = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_3 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_3 = 0;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row1.ID_Polluant = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row1.ID_Polluant = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 1;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {

											row1.Date = ParserUtils.parseTo_Date(
													rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
													"dd-MM-yyyy");

										} catch (java.lang.Exception ex_tFileInputDelimited_3) {
											globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
													ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Date", "row1",
															rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
										}
									} else {

										row1.Date = null;

									}

								} else {

									row1.Date = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 2;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {

											row1.ID_Capteur = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

										} catch (java.lang.Exception ex_tFileInputDelimited_3) {
											globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
													ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ID_Capteur", "row1",
															rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
										}
									} else {

										row1.ID_Capteur = null;

									}

								} else {

									row1.ID_Capteur = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 3;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									row1.Ville = rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3];

								} else {

									row1.Ville = null;

								}

								columnIndexWithD_tFileInputDelimited_3 = 4;

								if (columnIndexWithD_tFileInputDelimited_3 < rowtFileInputDelimited_3.length) {

									if (rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3].length() > 0) {
										try {

											row1.Taux_releve = ParserUtils.parseTo_Float(
													rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3]);

										} catch (java.lang.Exception ex_tFileInputDelimited_3) {
											globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",
													ex_tFileInputDelimited_3.getMessage());
											rowstate_tFileInputDelimited_3.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Taux_releve", "row1",
															rowtFileInputDelimited_3[columnIndexWithD_tFileInputDelimited_3],
															ex_tFileInputDelimited_3),
													ex_tFileInputDelimited_3));
										}
									} else {

										row1.Taux_releve = null;

									}

								} else {

									row1.Taux_releve = null;

								}

							}

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row1 = null;

							globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE", e.getMessage());

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tUnite_2 main ] start
							 */

							currentComponent = "tUnite_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row1"

								);
							}

//////////

// for output
							row3 = new row3Struct();

							row3.ID_Polluant = row1.ID_Polluant;
							row3.Date = row1.Date;
							row3.ID_Capteur = row1.ID_Capteur;
							row3.Ville = row1.Ville;
							row3.Taux_releve = row1.Taux_releve;

							nb_line_tUnite_2++;

//////////

							tos_count_tUnite_2++;

							/**
							 * [tUnite_2 main ] stop
							 */

							/**
							 * [tUnite_2 process_data_begin ] start
							 */

							currentComponent = "tUnite_2";

							/**
							 * [tUnite_2 process_data_begin ] stop
							 */

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row3"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row8"
							///////////////////////////////////////////////

							boolean forceLooprow8 = false;

							row8Struct row8ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_3 = false;

								row8HashKey.ID_Polluant = row3.ID_Polluant;

								row8HashKey.Ville = row3.Ville;

								row8HashKey.hashCodeDirty = true;

								tHash_Lookup_row8.lookup(row8HashKey);

								if (!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

									forceLooprow8 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow8 = true;
							} // G 21

							row8Struct row8 = null;

							while ((tHash_Lookup_row8 != null && tHash_Lookup_row8.hasNext()) || forceLooprow8) { // G_TM_M_043

								// CALL close loop of lookup 'row8'

								row8Struct fromLookup_row8 = null;
								row8 = row8Default;

								if (!forceLooprow8) { // G 46

									fromLookup_row8 = tHash_Lookup_row8.next();

									if (fromLookup_row8 != null) {
										row8 = fromLookup_row8;
									}

								} // G 46

								forceLooprow8 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
									// ###############################
									// # Output tables

									mesures = null;

// # Output table : 'mesures'
									mesures_tmp.ID_Polluant = row3.ID_Polluant;
									mesures_tmp.Date = row3.Date;
									mesures_tmp.Ville = row3.Ville;
									mesures_tmp.Taux_releve_station = row3.Taux_releve;
									mesures_tmp.Taux_releve_mobile = row8.Taux_releve;
									mesures = mesures_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_3 = false;

								tos_count_tMap_3++;

								/**
								 * [tMap_3 main ] stop
								 */

								/**
								 * [tMap_3 process_data_begin ] start
								 */

								currentComponent = "tMap_3";

								/**
								 * [tMap_3 process_data_begin ] stop
								 */
// Start of branch "mesures"
								if (mesures != null) {

									/**
									 * [tReplicate_1 main ] start
									 */

									currentComponent = "tReplicate_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "mesures"

										);
									}

									row9 = new row9Struct();

									row9.ID_Polluant = mesures.ID_Polluant;
									row9.Date = mesures.Date;
									row9.Ville = mesures.Ville;
									row9.Taux_releve_station = mesures.Taux_releve_station;
									row9.Taux_releve_mobile = mesures.Taux_releve_mobile;

									tos_count_tReplicate_1++;

									/**
									 * [tReplicate_1 main ] stop
									 */

									/**
									 * [tReplicate_1 process_data_begin ] start
									 */

									currentComponent = "tReplicate_1";

									/**
									 * [tReplicate_1 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_1 main ] start
									 */

									currentComponent = "tLogRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row9"

										);
									}

///////////////////////		

									String[] row_tLogRow_1 = new String[5];

									if (row9.ID_Polluant != null) { //
										row_tLogRow_1[0] = String.valueOf(row9.ID_Polluant);

									} //

									if (row9.Date != null) { //
										row_tLogRow_1[1] = FormatterUtils.format_Date(row9.Date, "dd-MM-yyyy");

									} //

									if (row9.Ville != null) { //
										row_tLogRow_1[2] = String.valueOf(row9.Ville);

									} //

									row_tLogRow_1[3] = FormatterUtils.formatUnwithE(row9.Taux_releve_station);

									row_tLogRow_1[4] = FormatterUtils.formatUnwithE(row9.Taux_releve_mobile);

									util_tLogRow_1.addRow(row_tLogRow_1);
									nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

									tos_count_tLogRow_1++;

									/**
									 * [tLogRow_1 main ] stop
									 */

									/**
									 * [tLogRow_1 process_data_begin ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_1 process_data_end ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_end ] stop
									 */

									/**
									 * [tReplicate_1 process_data_end ] start
									 */

									currentComponent = "tReplicate_1";

									/**
									 * [tReplicate_1 process_data_end ] stop
									 */

								} // End of branch "mesures"

							} // close loop of lookup 'row8' // G_TM_M_043

							/**
							 * [tMap_3 process_data_end ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_end ] stop
							 */

							/**
							 * [tUnite_2 process_data_end ] start
							 */

							currentComponent = "tUnite_2";

							/**
							 * [tUnite_2 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						nb_line_tFileInputDelimited_3++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_3 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_3 != null) {
							csvReadertFileInputDelimited_3.close();
						}
					}
					if (csvReadertFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", nb_line_tFileInputDelimited_3);
					}

				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tFileInputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_6", false);
				start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_6";

				int tos_count_tFileInputDelimited_6 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_6 = 0;
				int footer_tFileInputDelimited_6 = 0;
				int totalLinetFileInputDelimited_6 = 0;
				int limittFileInputDelimited_6 = -1;
				int lastLinetFileInputDelimited_6 = -1;

				char fieldSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_6 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_6[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_6 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_6 = /** Start field tFileInputDelimited_6:FILENAME */
						"D:/Study/DataScale/quality des donnes/sources/s5.csv"/**
																				 * End field
																				 * tFileInputDelimited_6:FILENAME
																				 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_6 = null;

				try {

					String[] rowtFileInputDelimited_6 = null;
					int currentLinetFileInputDelimited_6 = 0;
					int outputLinetFileInputDelimited_6 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_6 = 0;
							if (footer_value_tFileInputDelimited_6 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_6,
									fieldSeparator_tFileInputDelimited_6[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited_6),
									fieldSeparator_tFileInputDelimited_6[0], "UTF-8");
						}

						csvReadertFileInputDelimited_6.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
							csvReadertFileInputDelimited_6.setLineEnd("" + rowSeparator_tFileInputDelimited_6[0]);

						csvReadertFileInputDelimited_6.setQuoteChar('"');

						csvReadertFileInputDelimited_6.setEscapeChar(csvReadertFileInputDelimited_6.getQuoteChar());

						if (footer_tFileInputDelimited_6 > 0) {
							for (totalLinetFileInputDelimited_6 = 0; totalLinetFileInputDelimited_6 < 1; totalLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
							csvReadertFileInputDelimited_6.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_6.readNext()) {

								totalLinetFileInputDelimited_6++;

							}
							int lastLineTemptFileInputDelimited_6 = totalLinetFileInputDelimited_6
									- footer_tFileInputDelimited_6 < 0 ? 0
											: totalLinetFileInputDelimited_6 - footer_tFileInputDelimited_6;
							if (lastLinetFileInputDelimited_6 > 0) {
								lastLinetFileInputDelimited_6 = lastLinetFileInputDelimited_6 < lastLineTemptFileInputDelimited_6
										? lastLinetFileInputDelimited_6
										: lastLineTemptFileInputDelimited_6;
							} else {
								lastLinetFileInputDelimited_6 = lastLineTemptFileInputDelimited_6;
							}

							csvReadertFileInputDelimited_6.close();
							if (filename_tFileInputDelimited_6 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_6,
										fieldSeparator_tFileInputDelimited_6[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_6 = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited_6),
										fieldSeparator_tFileInputDelimited_6[0], "UTF-8");
							}
							csvReadertFileInputDelimited_6.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_6[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_6[0] != '\r'))
								csvReadertFileInputDelimited_6.setLineEnd("" + rowSeparator_tFileInputDelimited_6[0]);

							csvReadertFileInputDelimited_6.setQuoteChar('"');

							csvReadertFileInputDelimited_6.setEscapeChar(csvReadertFileInputDelimited_6.getQuoteChar());

						}

						if (limittFileInputDelimited_6 != 0) {
							for (currentLinetFileInputDelimited_6 = 0; currentLinetFileInputDelimited_6 < 1; currentLinetFileInputDelimited_6++) {
								csvReadertFileInputDelimited_6.readNext();
							}
						}
						csvReadertFileInputDelimited_6.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_6 != 0 && csvReadertFileInputDelimited_6 != null
							&& csvReadertFileInputDelimited_6.readNext()) {
						rowstate_tFileInputDelimited_6.reset();

						rowtFileInputDelimited_6 = csvReadertFileInputDelimited_6.getValues();

						currentLinetFileInputDelimited_6++;

						if (lastLinetFileInputDelimited_6 > -1
								&& currentLinetFileInputDelimited_6 > lastLinetFileInputDelimited_6) {
							break;
						}
						outputLinetFileInputDelimited_6++;
						if (limittFileInputDelimited_6 > 0
								&& outputLinetFileInputDelimited_6 > limittFileInputDelimited_6) {
							break;
						}

						row2 = null;

						boolean whetherReject_tFileInputDelimited_6 = false;
						row2 = new row2Struct();
						try {

							char fieldSeparator_tFileInputDelimited_6_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_6_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_6.length == 1 && ("\015").equals(rowtFileInputDelimited_6[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row2.ID_Polluant = null;

								row2.Date = null;

								row2.ID_Capteur = null;

								row2.Ville = null;

								row2.Taux_releve = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_6 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_6 = 0;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row2.ID_Polluant = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row2.ID_Polluant = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 1;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6].length() > 0) {
										try {

											row2.Date = ParserUtils.parseTo_Date(
													rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
													"dd-MM-yyyy");

										} catch (java.lang.Exception ex_tFileInputDelimited_6) {
											globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
													ex_tFileInputDelimited_6.getMessage());
											rowstate_tFileInputDelimited_6.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Date", "row2",
															rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
															ex_tFileInputDelimited_6),
													ex_tFileInputDelimited_6));
										}
									} else {

										row2.Date = null;

									}

								} else {

									row2.Date = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 2;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6].length() > 0) {
										try {

											row2.ID_Capteur = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);

										} catch (java.lang.Exception ex_tFileInputDelimited_6) {
											globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
													ex_tFileInputDelimited_6.getMessage());
											rowstate_tFileInputDelimited_6.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ID_Capteur", "row2",
															rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
															ex_tFileInputDelimited_6),
													ex_tFileInputDelimited_6));
										}
									} else {

										row2.ID_Capteur = null;

									}

								} else {

									row2.ID_Capteur = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 3;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									row2.Ville = rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6];

								} else {

									row2.Ville = null;

								}

								columnIndexWithD_tFileInputDelimited_6 = 4;

								if (columnIndexWithD_tFileInputDelimited_6 < rowtFileInputDelimited_6.length) {

									if (rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6].length() > 0) {
										try {

											row2.Taux_releve = ParserUtils.parseTo_Float(
													rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6]);

										} catch (java.lang.Exception ex_tFileInputDelimited_6) {
											globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",
													ex_tFileInputDelimited_6.getMessage());
											rowstate_tFileInputDelimited_6.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Taux_releve", "row2",
															rowtFileInputDelimited_6[columnIndexWithD_tFileInputDelimited_6],
															ex_tFileInputDelimited_6),
													ex_tFileInputDelimited_6));
										}
									} else {

										row2.Taux_releve = null;

									}

								} else {

									row2.Taux_releve = null;

								}

							}

							if (rowstate_tFileInputDelimited_6.getException() != null) {
								throw rowstate_tFileInputDelimited_6.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_6 = true;

							System.err.println(e.getMessage());
							row2 = null;

							globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE", e.getMessage());

						}

						/**
						 * [tFileInputDelimited_6 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_6 main ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						tos_count_tFileInputDelimited_6++;

						/**
						 * [tFileInputDelimited_6 main ] stop
						 */

						/**
						 * [tFileInputDelimited_6 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_begin ] stop
						 */
// Start of branch "row2"
						if (row2 != null) {

							/**
							 * [tUnite_2 main ] start
							 */

							currentComponent = "tUnite_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row2"

								);
							}

//////////

// for output
							row3 = new row3Struct();

							row3.ID_Polluant = row2.ID_Polluant;
							row3.Date = row2.Date;
							row3.ID_Capteur = row2.ID_Capteur;
							row3.Ville = row2.Ville;
							row3.Taux_releve = row2.Taux_releve;

							nb_line_tUnite_2++;

//////////

							tos_count_tUnite_2++;

							/**
							 * [tUnite_2 main ] stop
							 */

							/**
							 * [tUnite_2 process_data_begin ] start
							 */

							currentComponent = "tUnite_2";

							/**
							 * [tUnite_2 process_data_begin ] stop
							 */

							/**
							 * [tMap_3 main ] start
							 */

							currentComponent = "tMap_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row3"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_3 = false;
							boolean mainRowRejected_tMap_3 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row8"
							///////////////////////////////////////////////

							boolean forceLooprow8 = false;

							row8Struct row8ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_3 = false;

								row8HashKey.ID_Polluant = row3.ID_Polluant;

								row8HashKey.Ville = row3.Ville;

								row8HashKey.hashCodeDirty = true;

								tHash_Lookup_row8.lookup(row8HashKey);

								if (!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

									forceLooprow8 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow8 = true;
							} // G 21

							row8Struct row8 = null;

							while ((tHash_Lookup_row8 != null && tHash_Lookup_row8.hasNext()) || forceLooprow8) { // G_TM_M_043

								// CALL close loop of lookup 'row8'

								row8Struct fromLookup_row8 = null;
								row8 = row8Default;

								if (!forceLooprow8) { // G 46

									fromLookup_row8 = tHash_Lookup_row8.next();

									if (fromLookup_row8 != null) {
										row8 = fromLookup_row8;
									}

								} // G 46

								forceLooprow8 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
									// ###############################
									// # Output tables

									mesures = null;

// # Output table : 'mesures'
									mesures_tmp.ID_Polluant = row3.ID_Polluant;
									mesures_tmp.Date = row3.Date;
									mesures_tmp.Ville = row3.Ville;
									mesures_tmp.Taux_releve_station = row3.Taux_releve;
									mesures_tmp.Taux_releve_mobile = row8.Taux_releve;
									mesures = mesures_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_3 = false;

								tos_count_tMap_3++;

								/**
								 * [tMap_3 main ] stop
								 */

								/**
								 * [tMap_3 process_data_begin ] start
								 */

								currentComponent = "tMap_3";

								/**
								 * [tMap_3 process_data_begin ] stop
								 */
// Start of branch "mesures"
								if (mesures != null) {

									/**
									 * [tReplicate_1 main ] start
									 */

									currentComponent = "tReplicate_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "mesures"

										);
									}

									row9 = new row9Struct();

									row9.ID_Polluant = mesures.ID_Polluant;
									row9.Date = mesures.Date;
									row9.Ville = mesures.Ville;
									row9.Taux_releve_station = mesures.Taux_releve_station;
									row9.Taux_releve_mobile = mesures.Taux_releve_mobile;

									tos_count_tReplicate_1++;

									/**
									 * [tReplicate_1 main ] stop
									 */

									/**
									 * [tReplicate_1 process_data_begin ] start
									 */

									currentComponent = "tReplicate_1";

									/**
									 * [tReplicate_1 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_1 main ] start
									 */

									currentComponent = "tLogRow_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "row9"

										);
									}

///////////////////////		

									String[] row_tLogRow_1 = new String[5];

									if (row9.ID_Polluant != null) { //
										row_tLogRow_1[0] = String.valueOf(row9.ID_Polluant);

									} //

									if (row9.Date != null) { //
										row_tLogRow_1[1] = FormatterUtils.format_Date(row9.Date, "dd-MM-yyyy");

									} //

									if (row9.Ville != null) { //
										row_tLogRow_1[2] = String.valueOf(row9.Ville);

									} //

									row_tLogRow_1[3] = FormatterUtils.formatUnwithE(row9.Taux_releve_station);

									row_tLogRow_1[4] = FormatterUtils.formatUnwithE(row9.Taux_releve_mobile);

									util_tLogRow_1.addRow(row_tLogRow_1);
									nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

									tos_count_tLogRow_1++;

									/**
									 * [tLogRow_1 main ] stop
									 */

									/**
									 * [tLogRow_1 process_data_begin ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_begin ] stop
									 */

									/**
									 * [tLogRow_1 process_data_end ] start
									 */

									currentComponent = "tLogRow_1";

									/**
									 * [tLogRow_1 process_data_end ] stop
									 */

									/**
									 * [tReplicate_1 process_data_end ] start
									 */

									currentComponent = "tReplicate_1";

									/**
									 * [tReplicate_1 process_data_end ] stop
									 */

								} // End of branch "mesures"

							} // close loop of lookup 'row8' // G_TM_M_043

							/**
							 * [tMap_3 process_data_end ] start
							 */

							currentComponent = "tMap_3";

							/**
							 * [tMap_3 process_data_end ] stop
							 */

							/**
							 * [tUnite_2 process_data_end ] start
							 */

							currentComponent = "tUnite_2";

							/**
							 * [tUnite_2 process_data_end ] stop
							 */

						} // End of branch "row2"

						/**
						 * [tFileInputDelimited_6 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						/**
						 * [tFileInputDelimited_6 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_6 end ] start
						 */

						currentComponent = "tFileInputDelimited_6";

						nb_line_tFileInputDelimited_6++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_6 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_6 != null) {
							csvReadertFileInputDelimited_6.close();
						}
					}
					if (csvReadertFileInputDelimited_6 != null) {
						globalMap.put("tFileInputDelimited_6_NB_LINE", nb_line_tFileInputDelimited_6);
					}

				}

				ok_Hash.put("tFileInputDelimited_6", true);
				end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_6 end ] stop
				 */

				/**
				 * [tUnite_2 end ] start
				 */

				currentComponent = "tUnite_2";

				globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2", "row1");
				}

				ok_Hash.put("tUnite_2", true);
				end_Hash.put("tUnite_2", System.currentTimeMillis());

				/**
				 * [tUnite_2 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "mesures");
				}

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row8");

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_6 finally ] start
				 */

				currentComponent = "tFileInputDelimited_6";

				/**
				 * [tFileInputDelimited_6 finally ] stop
				 */

				/**
				 * [tUnite_2 finally ] start
				 */

				currentComponent = "tUnite_2";

				/**
				 * [tUnite_2 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_QDD_draft2 = new byte[0];
		static byte[] commonByteArray_QDD_draft2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public int ID_Station;

		public int getID_Station() {
			return this.ID_Station;
		}

		public float Taux_releve;

		public float getTaux_releve() {
			return this.Taux_releve;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Ville == null) ? 0 : this.Ville.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Ville == null) {
				if (other.Ville != null)
					return false;

			} else if (!this.Ville.equals(other.Ville))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;
			other.Taux_releve = this.Taux_releve;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Ville = this.Ville;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Date = readDate(dis, ois);

				this.ID_Station = dis.readInt();

				this.Taux_releve = dis.readFloat();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.Date = readDate(dis, objectIn);

				this.ID_Station = objectIn.readInt();

				this.Taux_releve = objectIn.readFloat();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeDate(this.Date, dos, oos);

				dos.writeInt(this.ID_Station);

				dos.writeFloat(this.Taux_releve);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				writeDate(this.Date, dos, objectOut);

				objectOut.writeInt(this.ID_Station);

				objectOut.writeFloat(this.Taux_releve);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Taux_releve=" + String.valueOf(Taux_releve));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Ville, other.Ville);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class s1_mesures_stationStruct implements routines.system.IPersistableRow<s1_mesures_stationStruct> {
		final static byte[] commonByteArrayLock_QDD_draft2 = new byte[0];
		static byte[] commonByteArray_QDD_draft2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public int ID_Station;

		public int getID_Station() {
			return this.ID_Station;
		}

		public float Taux_releve;

		public float getTaux_releve() {
			return this.Taux_releve;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + (int) this.ID_Station;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final s1_mesures_stationStruct other = (s1_mesures_stationStruct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Station != other.ID_Station)
				return false;

			return true;
		}

		public void copyDataTo(s1_mesures_stationStruct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;
			other.Taux_releve = this.Taux_releve;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(s1_mesures_stationStruct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Station = dis.readInt();

					this.Taux_releve = dis.readFloat();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Station = dis.readInt();

					this.Taux_releve = dis.readFloat();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ID_Station);

				// float

				dos.writeFloat(this.Taux_releve);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ID_Station);

				// float

				dos.writeFloat(this.Taux_releve);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Taux_releve=" + String.valueOf(Taux_releve));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(s1_mesures_stationStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_QDD_draft2 = new byte[0];
		static byte[] commonByteArray_QDD_draft2 = new byte[0];

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public int ID_Station;

		public int getID_Station() {
			return this.ID_Station;
		}

		public float Taux_releve;

		public float getTaux_releve() {
			return this.Taux_releve;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Station = dis.readInt();

					this.Taux_releve = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Station = dis.readInt();

					this.Taux_releve = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ID_Station);

				// float

				dos.writeFloat(this.Taux_releve);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ID_Station);

				// float

				dos.writeFloat(this.Taux_releve);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Taux_releve=" + String.valueOf(Taux_releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_7Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_7Struct> {
		final static byte[] commonByteArrayLock_QDD_draft2 = new byte[0];
		static byte[] commonByteArray_QDD_draft2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public int ID_Station;

		public int getID_Station() {
			return this.ID_Station;
		}

		public float Taux_releve;

		public float getTaux_releve() {
			return this.Taux_releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + (int) this.ID_Station;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_7Struct other = (after_tFileInputDelimited_7Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Station != other.ID_Station)
				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_7Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;
			other.Taux_releve = this.Taux_releve;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_7Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Station = dis.readInt();

					this.Taux_releve = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Station = dis.readInt();

					this.Taux_releve = dis.readFloat();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ID_Station);

				// float

				dos.writeFloat(this.Taux_releve);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ID_Station);

				// float

				dos.writeFloat(this.Taux_releve);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Taux_releve=" + String.valueOf(Taux_releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class s2_mesures_stationStruct implements routines.system.IPersistableRow<s2_mesures_stationStruct> {
		final static byte[] commonByteArrayLock_QDD_draft2 = new byte[0];
		static byte[] commonByteArray_QDD_draft2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public int ID_Station;

		public int getID_Station() {
			return this.ID_Station;
		}

		public float Taux_releve;

		public float getTaux_releve() {
			return this.Taux_releve;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + (int) this.ID_Station;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final s2_mesures_stationStruct other = (s2_mesures_stationStruct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Station != other.ID_Station)
				return false;

			return true;
		}

		public void copyDataTo(s2_mesures_stationStruct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;
			other.Taux_releve = this.Taux_releve;
			other.Ville = this.Ville;

		}

		public void copyKeysDataTo(s2_mesures_stationStruct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Station = dis.readInt();

					this.Taux_releve = dis.readFloat();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Station = dis.readInt();

					this.Taux_releve = dis.readFloat();

					this.Ville = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ID_Station);

				// float

				dos.writeFloat(this.Taux_releve);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// int

				dos.writeInt(this.ID_Station);

				// float

				dos.writeFloat(this.Taux_releve);

				// String

				writeString(this.Ville, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Taux_releve=" + String.valueOf(Taux_releve));
			sb.append(",Ville=" + Ville);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(s2_mesures_stationStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_QDD_draft2 = new byte[0];
		static byte[] commonByteArray_QDD_draft2 = new byte[0];

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public Integer ID_Station;

		public Integer getID_Station() {
			return this.ID_Station;
		}

		public Float Taux_releve;

		public Float getTaux_releve() {
			return this.Taux_releve;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Station = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_releve = null;
					} else {
						this.Taux_releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Station = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_releve = null;
					} else {
						this.Taux_releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.ID_Station, dos);

				// Float

				if (this.Taux_releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.ID_Station, dos);

				// Float

				if (this.Taux_releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Taux_releve=" + String.valueOf(Taux_releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_12Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_12Struct> {
		final static byte[] commonByteArrayLock_QDD_draft2 = new byte[0];
		static byte[] commonByteArray_QDD_draft2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String ID_Polluant;

		public String getID_Polluant() {
			return this.ID_Polluant;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public Integer ID_Station;

		public Integer getID_Station() {
			return this.ID_Station;
		}

		public Float Taux_releve;

		public Float getTaux_releve() {
			return this.Taux_releve;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID_Polluant == null) ? 0 : this.ID_Polluant.hashCode());

				result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

				result = prime * result + ((this.ID_Station == null) ? 0 : this.ID_Station.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final after_tFileInputDelimited_12Struct other = (after_tFileInputDelimited_12Struct) obj;

			if (this.ID_Polluant == null) {
				if (other.ID_Polluant != null)
					return false;

			} else if (!this.ID_Polluant.equals(other.ID_Polluant))

				return false;

			if (this.Date == null) {
				if (other.Date != null)
					return false;

			} else if (!this.Date.equals(other.Date))

				return false;

			if (this.ID_Station == null) {
				if (other.ID_Station != null)
					return false;

			} else if (!this.ID_Station.equals(other.ID_Station))

				return false;

			return true;
		}

		public void copyDataTo(after_tFileInputDelimited_12Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;
			other.Taux_releve = this.Taux_releve;

		}

		public void copyKeysDataTo(after_tFileInputDelimited_12Struct other) {

			other.ID_Polluant = this.ID_Polluant;
			other.Date = this.Date;
			other.ID_Station = this.ID_Station;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_QDD_draft2.length) {
					if (length < 1024 && commonByteArray_QDD_draft2.length == 0) {
						commonByteArray_QDD_draft2 = new byte[1024];
					} else {
						commonByteArray_QDD_draft2 = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_QDD_draft2, 0, length);
				strReturn = new String(commonByteArray_QDD_draft2, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Station = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_releve = null;
					} else {
						this.Taux_releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Polluant = readString(dis);

					this.Date = readDate(dis);

					this.ID_Station = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Taux_releve = null;
					} else {
						this.Taux_releve = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.ID_Station, dos);

				// Float

				if (this.Taux_releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ID_Polluant, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// Integer

				writeInteger(this.ID_Station, dos);

				// Float

				if (this.Taux_releve == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Taux_releve);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Polluant=" + ID_Polluant);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Taux_releve=" + String.valueOf(Taux_releve));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_12Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Polluant, other.ID_Polluant);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.Date, other.Date);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_9Process(globalMap);
				tFileInputDelimited_16Process(globalMap);

				row6Struct row6 = new row6Struct();
				s1_mesures_stationStruct s1_mesures_station = new s1_mesures_stationStruct();

				row4Struct row4 = new row4Struct();
				s2_mesures_stationStruct s2_mesures_station = new s2_mesures_stationStruct();

				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tUnite_1 - inputs:(s1_mesures_station,s2_mesures_station)
				// outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8)
				// outputs:()
				// linked node: tMap_3 - inputs:(row8,row3) outputs:(mesures)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct>getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "s1_mesures_station",
							"s2_mesures_station");
				}

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				s1_mesures_stationStruct s1_mesures_station_tmp = new s1_mesures_stationStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_7", false);
				start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_7";

				int tos_count_tFileInputDelimited_7 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_7 = 0;
				int footer_tFileInputDelimited_7 = 0;
				int totalLinetFileInputDelimited_7 = 0;
				int limittFileInputDelimited_7 = -1;
				int lastLinetFileInputDelimited_7 = -1;

				char fieldSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_7 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_7[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_7 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_7 = /** Start field tFileInputDelimited_7:FILENAME */
						"D:/Study/DataScale/quality des donnes/sources/s1_mesures.csv"/**
																						 * End field
																						 * tFileInputDelimited_7:FILENAME
																						 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_7 = null;

				try {

					String[] rowtFileInputDelimited_7 = null;
					int currentLinetFileInputDelimited_7 = 0;
					int outputLinetFileInputDelimited_7 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_7 = 0;
							if (footer_value_tFileInputDelimited_7 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_7,
									fieldSeparator_tFileInputDelimited_7[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited_7),
									fieldSeparator_tFileInputDelimited_7[0], "UTF-8");
						}

						csvReadertFileInputDelimited_7.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
							csvReadertFileInputDelimited_7.setLineEnd("" + rowSeparator_tFileInputDelimited_7[0]);

						csvReadertFileInputDelimited_7.setQuoteChar('"');

						csvReadertFileInputDelimited_7.setEscapeChar(csvReadertFileInputDelimited_7.getQuoteChar());

						if (footer_tFileInputDelimited_7 > 0) {
							for (totalLinetFileInputDelimited_7 = 0; totalLinetFileInputDelimited_7 < 1; totalLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
							csvReadertFileInputDelimited_7.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_7.readNext()) {

								totalLinetFileInputDelimited_7++;

							}
							int lastLineTemptFileInputDelimited_7 = totalLinetFileInputDelimited_7
									- footer_tFileInputDelimited_7 < 0 ? 0
											: totalLinetFileInputDelimited_7 - footer_tFileInputDelimited_7;
							if (lastLinetFileInputDelimited_7 > 0) {
								lastLinetFileInputDelimited_7 = lastLinetFileInputDelimited_7 < lastLineTemptFileInputDelimited_7
										? lastLinetFileInputDelimited_7
										: lastLineTemptFileInputDelimited_7;
							} else {
								lastLinetFileInputDelimited_7 = lastLineTemptFileInputDelimited_7;
							}

							csvReadertFileInputDelimited_7.close();
							if (filename_tFileInputDelimited_7 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_7,
										fieldSeparator_tFileInputDelimited_7[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_7 = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited_7),
										fieldSeparator_tFileInputDelimited_7[0], "UTF-8");
							}
							csvReadertFileInputDelimited_7.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_7[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_7[0] != '\r'))
								csvReadertFileInputDelimited_7.setLineEnd("" + rowSeparator_tFileInputDelimited_7[0]);

							csvReadertFileInputDelimited_7.setQuoteChar('"');

							csvReadertFileInputDelimited_7.setEscapeChar(csvReadertFileInputDelimited_7.getQuoteChar());

						}

						if (limittFileInputDelimited_7 != 0) {
							for (currentLinetFileInputDelimited_7 = 0; currentLinetFileInputDelimited_7 < 1; currentLinetFileInputDelimited_7++) {
								csvReadertFileInputDelimited_7.readNext();
							}
						}
						csvReadertFileInputDelimited_7.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_7 != 0 && csvReadertFileInputDelimited_7 != null
							&& csvReadertFileInputDelimited_7.readNext()) {
						rowstate_tFileInputDelimited_7.reset();

						rowtFileInputDelimited_7 = csvReadertFileInputDelimited_7.getValues();

						currentLinetFileInputDelimited_7++;

						if (lastLinetFileInputDelimited_7 > -1
								&& currentLinetFileInputDelimited_7 > lastLinetFileInputDelimited_7) {
							break;
						}
						outputLinetFileInputDelimited_7++;
						if (limittFileInputDelimited_7 > 0
								&& outputLinetFileInputDelimited_7 > limittFileInputDelimited_7) {
							break;
						}

						row6 = null;

						boolean whetherReject_tFileInputDelimited_7 = false;
						row6 = new row6Struct();
						try {

							char fieldSeparator_tFileInputDelimited_7_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_7_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_7.length == 1 && ("\015").equals(rowtFileInputDelimited_7[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row6.ID_Polluant = null;

								row6.Date = null;

								row6.ID_Station = 0;

								row6.Taux_releve = 0;

							} else {

								int columnIndexWithD_tFileInputDelimited_7 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_7 = 0;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									row6.ID_Polluant = rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7];

								} else {

									row6.ID_Polluant = null;

								}

								columnIndexWithD_tFileInputDelimited_7 = 1;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7].length() > 0) {
										try {

											row6.Date = ParserUtils.parseTo_Date(
													rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
													"dd-MM-yyyy");

										} catch (java.lang.Exception ex_tFileInputDelimited_7) {
											globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
													ex_tFileInputDelimited_7.getMessage());
											rowstate_tFileInputDelimited_7.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Date", "row6",
															rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
															ex_tFileInputDelimited_7),
													ex_tFileInputDelimited_7));
										}
									} else {

										row6.Date = null;

									}

								} else {

									row6.Date = null;

								}

								columnIndexWithD_tFileInputDelimited_7 = 2;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7].length() > 0) {
										try {

											row6.ID_Station = ParserUtils.parseTo_int(
													rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]);

										} catch (java.lang.Exception ex_tFileInputDelimited_7) {
											globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
													ex_tFileInputDelimited_7.getMessage());
											rowstate_tFileInputDelimited_7.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ID_Station", "row6",
															rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
															ex_tFileInputDelimited_7),
													ex_tFileInputDelimited_7));
										}
									} else {

										rowstate_tFileInputDelimited_7.setException(new RuntimeException(
												"Value is empty for column : 'ID_Station' in 'row6' connection, value is invalid or this column should be nullable or have a default value."));

									}

								} else {

									rowstate_tFileInputDelimited_7.setException(new RuntimeException(
											"Value is empty for column : 'ID_Station' in 'row6' connection, value is invalid or this column should be nullable or have a default value."));

								}

								columnIndexWithD_tFileInputDelimited_7 = 3;

								if (columnIndexWithD_tFileInputDelimited_7 < rowtFileInputDelimited_7.length) {

									if (rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7].length() > 0) {
										try {

											row6.Taux_releve = ParserUtils.parseTo_float(
													rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7]);

										} catch (java.lang.Exception ex_tFileInputDelimited_7) {
											globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",
													ex_tFileInputDelimited_7.getMessage());
											rowstate_tFileInputDelimited_7.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Taux_releve", "row6",
															rowtFileInputDelimited_7[columnIndexWithD_tFileInputDelimited_7],
															ex_tFileInputDelimited_7),
													ex_tFileInputDelimited_7));
										}
									} else {

										rowstate_tFileInputDelimited_7.setException(new RuntimeException(
												"Value is empty for column : 'Taux_releve' in 'row6' connection, value is invalid or this column should be nullable or have a default value."));

									}

								} else {

									rowstate_tFileInputDelimited_7.setException(new RuntimeException(
											"Value is empty for column : 'Taux_releve' in 'row6' connection, value is invalid or this column should be nullable or have a default value."));

								}

							}

							if (rowstate_tFileInputDelimited_7.getException() != null) {
								throw rowstate_tFileInputDelimited_7.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_7 = true;

							System.err.println(e.getMessage());
							row6 = null;

							globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE", e.getMessage());

						}

						/**
						 * [tFileInputDelimited_7 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_7 main ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						tos_count_tFileInputDelimited_7++;

						/**
						 * [tFileInputDelimited_7 main ] stop
						 */

						/**
						 * [tFileInputDelimited_7 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_begin ] stop
						 */
// Start of branch "row6"
						if (row6 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row6"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row7"
							///////////////////////////////////////////////

							boolean forceLooprow7 = false;

							row7Struct row7ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_1 = false;

								Object exprKeyValue_row7__ID_Station = row6.ID_Station;
								if (exprKeyValue_row7__ID_Station == null) {
									hasCasePrimitiveKeyWithNull_tMap_1 = true;
								} else {
									row7HashKey.ID_Station = (int) (Integer) exprKeyValue_row7__ID_Station;
								}

								row7HashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

									tHash_Lookup_row7.lookup(row7HashKey);

								} // G_TM_M_091

							} // G_TM_M_020

							if (tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7'
								// and it contains more one result from keys : row7.ID_Station = '" +
								// row7HashKey.ID_Station + "'");
							} // G 071

							row7Struct row7 = null;

							row7Struct fromLookup_row7 = null;
							row7 = row7Default;

							if (tHash_Lookup_row7 != null && tHash_Lookup_row7.hasNext()) { // G 099

								fromLookup_row7 = tHash_Lookup_row7.next();

							} // G 099

							if (fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								s1_mesures_station = null;

// # Output table : 's1_mesures_station'
								s1_mesures_station_tmp.ID_Polluant = row6.ID_Polluant;
								s1_mesures_station_tmp.Date = row6.Date;
								s1_mesures_station_tmp.ID_Station = row6.ID_Station;
								s1_mesures_station_tmp.Taux_releve = row6.Taux_releve;
								s1_mesures_station_tmp.Ville = row7.Ville;
								s1_mesures_station = s1_mesures_station_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */

							/**
							 * [tMap_1 process_data_begin ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_begin ] stop
							 */
// Start of branch "s1_mesures_station"
							if (s1_mesures_station != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "s1_mesures_station"

									);
								}

//////////

// for output
								row8 = new row8Struct();

								row8.ID_Polluant = s1_mesures_station.ID_Polluant;
								row8.Date = s1_mesures_station.Date;
								row8.ID_Station = s1_mesures_station.ID_Station;
								row8.Taux_releve = s1_mesures_station.Taux_releve;
								row8.Ville = s1_mesures_station.Ville;

								nb_line_tUnite_1++;

//////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUnite_1 process_data_begin ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row8 main ] start
								 */

								currentComponent = "tAdvancedHash_row8";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row8"

									);
								}

								row8Struct row8_HashRow = new row8Struct();

								row8_HashRow.ID_Polluant = row8.ID_Polluant;

								row8_HashRow.Date = row8.Date;

								row8_HashRow.ID_Station = row8.ID_Station;

								row8_HashRow.Taux_releve = row8.Taux_releve;

								row8_HashRow.Ville = row8.Ville;

								tHash_Lookup_row8.put(row8_HashRow);

								tos_count_tAdvancedHash_row8++;

								/**
								 * [tAdvancedHash_row8 main ] stop
								 */

								/**
								 * [tAdvancedHash_row8 process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_row8";

								/**
								 * [tAdvancedHash_row8 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row8 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row8";

								/**
								 * [tAdvancedHash_row8 process_data_end ] stop
								 */

								/**
								 * [tUnite_1 process_data_end ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_end ] stop
								 */

							} // End of branch "s1_mesures_station"

							/**
							 * [tMap_1 process_data_end ] start
							 */

							currentComponent = "tMap_1";

							/**
							 * [tMap_1 process_data_end ] stop
							 */

						} // End of branch "row6"

						/**
						 * [tFileInputDelimited_7 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						/**
						 * [tFileInputDelimited_7 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_7 end ] start
						 */

						currentComponent = "tFileInputDelimited_7";

						nb_line_tFileInputDelimited_7++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_7 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_7 != null) {
							csvReadertFileInputDelimited_7.close();
						}
					}
					if (csvReadertFileInputDelimited_7 != null) {
						globalMap.put("tFileInputDelimited_7_NB_LINE", nb_line_tFileInputDelimited_7);
					}

				}

				ok_Hash.put("tFileInputDelimited_7", true);
				end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_7 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				s2_mesures_stationStruct s2_mesures_station_tmp = new s2_mesures_stationStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_12 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_12", false);
				start_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_12";

				int tos_count_tFileInputDelimited_12 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_12 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_12 = 0;
				int footer_tFileInputDelimited_12 = 0;
				int totalLinetFileInputDelimited_12 = 0;
				int limittFileInputDelimited_12 = -1;
				int lastLinetFileInputDelimited_12 = -1;

				char fieldSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_12 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_12[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_12 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_12 = /** Start field tFileInputDelimited_12:FILENAME */
						"D:/Study/DataScale/quality des donnes/sources/s2_mesures.csv"/**
																						 * End field
																						 * tFileInputDelimited_12:FILENAME
																						 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_12 = null;

				try {

					String[] rowtFileInputDelimited_12 = null;
					int currentLinetFileInputDelimited_12 = 0;
					int outputLinetFileInputDelimited_12 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_12 = 0;
							if (footer_value_tFileInputDelimited_12 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_12,
									fieldSeparator_tFileInputDelimited_12[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited_12),
									fieldSeparator_tFileInputDelimited_12[0], "UTF-8");
						}

						csvReadertFileInputDelimited_12.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
							csvReadertFileInputDelimited_12.setLineEnd("" + rowSeparator_tFileInputDelimited_12[0]);

						csvReadertFileInputDelimited_12.setQuoteChar('"');

						csvReadertFileInputDelimited_12.setEscapeChar(csvReadertFileInputDelimited_12.getQuoteChar());

						if (footer_tFileInputDelimited_12 > 0) {
							for (totalLinetFileInputDelimited_12 = 0; totalLinetFileInputDelimited_12 < 1; totalLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
							csvReadertFileInputDelimited_12.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_12.readNext()) {

								totalLinetFileInputDelimited_12++;

							}
							int lastLineTemptFileInputDelimited_12 = totalLinetFileInputDelimited_12
									- footer_tFileInputDelimited_12 < 0 ? 0
											: totalLinetFileInputDelimited_12 - footer_tFileInputDelimited_12;
							if (lastLinetFileInputDelimited_12 > 0) {
								lastLinetFileInputDelimited_12 = lastLinetFileInputDelimited_12 < lastLineTemptFileInputDelimited_12
										? lastLinetFileInputDelimited_12
										: lastLineTemptFileInputDelimited_12;
							} else {
								lastLinetFileInputDelimited_12 = lastLineTemptFileInputDelimited_12;
							}

							csvReadertFileInputDelimited_12.close();
							if (filename_tFileInputDelimited_12 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_12,
										fieldSeparator_tFileInputDelimited_12[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_12 = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited_12),
										fieldSeparator_tFileInputDelimited_12[0], "UTF-8");
							}
							csvReadertFileInputDelimited_12.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_12[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_12[0] != '\r'))
								csvReadertFileInputDelimited_12.setLineEnd("" + rowSeparator_tFileInputDelimited_12[0]);

							csvReadertFileInputDelimited_12.setQuoteChar('"');

							csvReadertFileInputDelimited_12
									.setEscapeChar(csvReadertFileInputDelimited_12.getQuoteChar());

						}

						if (limittFileInputDelimited_12 != 0) {
							for (currentLinetFileInputDelimited_12 = 0; currentLinetFileInputDelimited_12 < 1; currentLinetFileInputDelimited_12++) {
								csvReadertFileInputDelimited_12.readNext();
							}
						}
						csvReadertFileInputDelimited_12.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_12 != 0 && csvReadertFileInputDelimited_12 != null
							&& csvReadertFileInputDelimited_12.readNext()) {
						rowstate_tFileInputDelimited_12.reset();

						rowtFileInputDelimited_12 = csvReadertFileInputDelimited_12.getValues();

						currentLinetFileInputDelimited_12++;

						if (lastLinetFileInputDelimited_12 > -1
								&& currentLinetFileInputDelimited_12 > lastLinetFileInputDelimited_12) {
							break;
						}
						outputLinetFileInputDelimited_12++;
						if (limittFileInputDelimited_12 > 0
								&& outputLinetFileInputDelimited_12 > limittFileInputDelimited_12) {
							break;
						}

						row4 = null;

						boolean whetherReject_tFileInputDelimited_12 = false;
						row4 = new row4Struct();
						try {

							char fieldSeparator_tFileInputDelimited_12_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_12_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_12.length == 1
									&& ("\015").equals(rowtFileInputDelimited_12[0])) {// empty line when row separator
																						// is '\n'

								row4.ID_Polluant = null;

								row4.Date = null;

								row4.ID_Station = null;

								row4.Taux_releve = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_12 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_12 = 0;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									row4.ID_Polluant = rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12];

								} else {

									row4.ID_Polluant = null;

								}

								columnIndexWithD_tFileInputDelimited_12 = 1;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {
										try {

											row4.Date = ParserUtils.parseTo_Date(
													rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
													"dd-MM-yyyy");

										} catch (java.lang.Exception ex_tFileInputDelimited_12) {
											globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",
													ex_tFileInputDelimited_12.getMessage());
											rowstate_tFileInputDelimited_12.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Date", "row4",
															rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
															ex_tFileInputDelimited_12),
													ex_tFileInputDelimited_12));
										}
									} else {

										row4.Date = null;

									}

								} else {

									row4.Date = null;

								}

								columnIndexWithD_tFileInputDelimited_12 = 2;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {
										try {

											row4.ID_Station = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

										} catch (java.lang.Exception ex_tFileInputDelimited_12) {
											globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",
													ex_tFileInputDelimited_12.getMessage());
											rowstate_tFileInputDelimited_12.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ID_Station", "row4",
															rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
															ex_tFileInputDelimited_12),
													ex_tFileInputDelimited_12));
										}
									} else {

										row4.ID_Station = null;

									}

								} else {

									row4.ID_Station = null;

								}

								columnIndexWithD_tFileInputDelimited_12 = 3;

								if (columnIndexWithD_tFileInputDelimited_12 < rowtFileInputDelimited_12.length) {

									if (rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]
											.length() > 0) {
										try {

											row4.Taux_releve = ParserUtils.parseTo_Float(
													rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12]);

										} catch (java.lang.Exception ex_tFileInputDelimited_12) {
											globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE",
													ex_tFileInputDelimited_12.getMessage());
											rowstate_tFileInputDelimited_12.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Taux_releve", "row4",
															rowtFileInputDelimited_12[columnIndexWithD_tFileInputDelimited_12],
															ex_tFileInputDelimited_12),
													ex_tFileInputDelimited_12));
										}
									} else {

										row4.Taux_releve = null;

									}

								} else {

									row4.Taux_releve = null;

								}

							}

							if (rowstate_tFileInputDelimited_12.getException() != null) {
								throw rowstate_tFileInputDelimited_12.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_12 = true;

							System.err.println(e.getMessage());
							row4 = null;

							globalMap.put("tFileInputDelimited_12_ERROR_MESSAGE", e.getMessage());

						}

						/**
						 * [tFileInputDelimited_12 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_12 main ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						tos_count_tFileInputDelimited_12++;

						/**
						 * [tFileInputDelimited_12 main ] stop
						 */

						/**
						 * [tFileInputDelimited_12 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						/**
						 * [tFileInputDelimited_12 process_data_begin ] stop
						 */
// Start of branch "row4"
						if (row4 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row4"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row5"
							///////////////////////////////////////////////

							boolean forceLooprow5 = false;

							row5Struct row5ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_2 = false;

								Object exprKeyValue_row5__ID_Station = row4.ID_Station;
								if (exprKeyValue_row5__ID_Station == null) {
									hasCasePrimitiveKeyWithNull_tMap_2 = true;
								} else {
									row5HashKey.ID_Station = (int) (Integer) exprKeyValue_row5__ID_Station;
								}

								row5HashKey.hashCodeDirty = true;

								if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

									tHash_Lookup_row5.lookup(row5HashKey);

								} // G_TM_M_091

							} // G_TM_M_020

							if (tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5'
								// and it contains more one result from keys : row5.ID_Station = '" +
								// row5HashKey.ID_Station + "'");
							} // G 071

							row5Struct row5 = null;

							row5Struct fromLookup_row5 = null;
							row5 = row5Default;

							if (tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) { // G 099

								fromLookup_row5 = tHash_Lookup_row5.next();

							} // G 099

							if (fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								s2_mesures_station = null;

// # Output table : 's2_mesures_station'
								s2_mesures_station_tmp.ID_Polluant = null;
								s2_mesures_station_tmp.Date = null;
								s2_mesures_station_tmp.ID_Station = 0;
								s2_mesures_station_tmp.Taux_releve = 0;
								s2_mesures_station_tmp.Ville = null;
								s2_mesures_station = s2_mesures_station_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "s2_mesures_station"
							if (s2_mesures_station != null) {

								/**
								 * [tUnite_1 main ] start
								 */

								currentComponent = "tUnite_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "s2_mesures_station"

									);
								}

//////////

// for output
								row8 = new row8Struct();

								row8.ID_Polluant = s2_mesures_station.ID_Polluant;
								row8.Date = s2_mesures_station.Date;
								row8.ID_Station = s2_mesures_station.ID_Station;
								row8.Taux_releve = s2_mesures_station.Taux_releve;
								row8.Ville = s2_mesures_station.Ville;

								nb_line_tUnite_1++;

//////////

								tos_count_tUnite_1++;

								/**
								 * [tUnite_1 main ] stop
								 */

								/**
								 * [tUnite_1 process_data_begin ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row8 main ] start
								 */

								currentComponent = "tAdvancedHash_row8";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "row8"

									);
								}

								row8Struct row8_HashRow = new row8Struct();

								row8_HashRow.ID_Polluant = row8.ID_Polluant;

								row8_HashRow.Date = row8.Date;

								row8_HashRow.ID_Station = row8.ID_Station;

								row8_HashRow.Taux_releve = row8.Taux_releve;

								row8_HashRow.Ville = row8.Ville;

								tHash_Lookup_row8.put(row8_HashRow);

								tos_count_tAdvancedHash_row8++;

								/**
								 * [tAdvancedHash_row8 main ] stop
								 */

								/**
								 * [tAdvancedHash_row8 process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_row8";

								/**
								 * [tAdvancedHash_row8 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row8 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row8";

								/**
								 * [tAdvancedHash_row8 process_data_end ] stop
								 */

								/**
								 * [tUnite_1 process_data_end ] start
								 */

								currentComponent = "tUnite_1";

								/**
								 * [tUnite_1 process_data_end ] stop
								 */

							} // End of branch "s2_mesures_station"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row4"

						/**
						 * [tFileInputDelimited_12 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						/**
						 * [tFileInputDelimited_12 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_12 end ] start
						 */

						currentComponent = "tFileInputDelimited_12";

						nb_line_tFileInputDelimited_12++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_12 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_12 != null) {
							csvReadertFileInputDelimited_12.close();
						}
					}
					if (csvReadertFileInputDelimited_12 != null) {
						globalMap.put("tFileInputDelimited_12_NB_LINE", nb_line_tFileInputDelimited_12);
					}

				}

				ok_Hash.put("tFileInputDelimited_12", true);
				end_Hash.put("tFileInputDelimited_12", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_12 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "s1_mesures_station", "s2_mesures_station");
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row7");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row5");

			try {

				/**
				 * [tFileInputDelimited_7 finally ] start
				 */

				currentComponent = "tFileInputDelimited_7";

				/**
				 * [tFileInputDelimited_7 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileInputDelimited_12 finally ] start
				 */

				currentComponent = "tFileInputDelimited_12";

				/**
				 * [tFileInputDelimited_12 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row8 finally ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				/**
				 * [tAdvancedHash_row8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_QDD_draft2 = new byte[0];
		static byte[] commonByteArray_QDD_draft2 = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ID_Station;

		public int getID_Station() {
			return this.ID_Station;
		}

		public int Num;

		public int getNum() {
			return this.Num;
		}

		public String Rue;

		public String getRue() {
			return this.Rue;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public int Code_postal;

		public int getCode_postal() {
			return this.Code_postal;
		}

		public String Tel;

		public String getTel() {
			return this.Tel;
		}

		public String Contact_mail;

		public String getContact_mail() {
			return this.Contact_mail;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ID_Station;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.ID_Station != other.ID_Station)
				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.ID_Station = this.ID_Station;
			other.Num = this.Num;
			other.Rue = this.Rue;
			other.Ville = this.Ville;
			other.Code_postal = this.Code_postal;
			other.Tel = this.Tel;
			other.Contact_mail = this.Contact_mail;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.ID_Station = this.ID_Station;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Station = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_QDD_draft2) {

				try {

					int length = 0;

					this.ID_Station = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ID_Station);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// int

				dos.writeInt(this.ID_Station);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Num = dis.readInt();

				this.Rue = readString(dis, ois);

				this.Ville = readString(dis, ois);

				this.Code_postal = dis.readInt();

				this.Tel = readString(dis, ois);

				this.Contact_mail = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.Num = objectIn.readInt();

				this.Rue = readString(dis, objectIn);

				this.Ville = readString(dis, objectIn);

				this.Code_postal = objectIn.readInt();

				this.Tel = readString(dis, objectIn);

				this.Contact_mail = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.Num);

				writeString(this.Rue, dos, oos);

				writeString(this.Ville, dos, oos);

				dos.writeInt(this.Code_postal);

				writeString(this.Tel, dos, oos);

				writeString(this.Contact_mail, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				objectOut.writeInt(this.Num);

				writeString(this.Rue, dos, objectOut);

				writeString(this.Ville, dos, objectOut);

				objectOut.writeInt(this.Code_postal);

				writeString(this.Tel, dos, objectOut);

				writeString(this.Contact_mail, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID_Station=" + String.valueOf(ID_Station));
			sb.append(",Num=" + String.valueOf(Num));
			sb.append(",Rue=" + Rue);
			sb.append(",Ville=" + Ville);
			sb.append(",Code_postal=" + String.valueOf(Code_postal));
			sb.append(",Tel=" + Tel);
			sb.append(",Contact_mail=" + Contact_mail);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID_Station, other.ID_Station);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tFileInputDelimited_9 - inputs:(after_tFileInputDelimited_7)
				// outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7)
				// outputs:()
				// linked node: tMap_1 - inputs:(row6,row7) outputs:(s1_mesures_station)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct>getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_9", false);
				start_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_9";

				int tos_count_tFileInputDelimited_9 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_9 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_9 = 0;
				int footer_tFileInputDelimited_9 = 0;
				int totalLinetFileInputDelimited_9 = 0;
				int limittFileInputDelimited_9 = -1;
				int lastLinetFileInputDelimited_9 = -1;

				char fieldSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ",").length() > 0) {
					fieldSeparator_tFileInputDelimited_9 = ((String) ",").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_9[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_9 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_9 = /** Start field tFileInputDelimited_9:FILENAME */
						"D:/Study/DataScale/quality des donnes/sources/s1_station.csv"/**
																						 * End field
																						 * tFileInputDelimited_9:FILENAME
																						 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_9 = null;

				try {

					String[] rowtFileInputDelimited_9 = null;
					int currentLinetFileInputDelimited_9 = 0;
					int outputLinetFileInputDelimited_9 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_9 = 0;
							if (footer_value_tFileInputDelimited_9 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_9,
									fieldSeparator_tFileInputDelimited_9[0], "US-ASCII");
						} else {
							csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited_9),
									fieldSeparator_tFileInputDelimited_9[0], "US-ASCII");
						}

						csvReadertFileInputDelimited_9.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
							csvReadertFileInputDelimited_9.setLineEnd("" + rowSeparator_tFileInputDelimited_9[0]);

						csvReadertFileInputDelimited_9.setQuoteChar('"');

						csvReadertFileInputDelimited_9.setEscapeChar(csvReadertFileInputDelimited_9.getQuoteChar());

						if (footer_tFileInputDelimited_9 > 0) {
							for (totalLinetFileInputDelimited_9 = 0; totalLinetFileInputDelimited_9 < 1; totalLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
							csvReadertFileInputDelimited_9.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_9.readNext()) {

								totalLinetFileInputDelimited_9++;

							}
							int lastLineTemptFileInputDelimited_9 = totalLinetFileInputDelimited_9
									- footer_tFileInputDelimited_9 < 0 ? 0
											: totalLinetFileInputDelimited_9 - footer_tFileInputDelimited_9;
							if (lastLinetFileInputDelimited_9 > 0) {
								lastLinetFileInputDelimited_9 = lastLinetFileInputDelimited_9 < lastLineTemptFileInputDelimited_9
										? lastLinetFileInputDelimited_9
										: lastLineTemptFileInputDelimited_9;
							} else {
								lastLinetFileInputDelimited_9 = lastLineTemptFileInputDelimited_9;
							}

							csvReadertFileInputDelimited_9.close();
							if (filename_tFileInputDelimited_9 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_9,
										fieldSeparator_tFileInputDelimited_9[0], "US-ASCII");
							} else {
								csvReadertFileInputDelimited_9 = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited_9),
										fieldSeparator_tFileInputDelimited_9[0], "US-ASCII");
							}
							csvReadertFileInputDelimited_9.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_9[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_9[0] != '\r'))
								csvReadertFileInputDelimited_9.setLineEnd("" + rowSeparator_tFileInputDelimited_9[0]);

							csvReadertFileInputDelimited_9.setQuoteChar('"');

							csvReadertFileInputDelimited_9.setEscapeChar(csvReadertFileInputDelimited_9.getQuoteChar());

						}

						if (limittFileInputDelimited_9 != 0) {
							for (currentLinetFileInputDelimited_9 = 0; currentLinetFileInputDelimited_9 < 1; currentLinetFileInputDelimited_9++) {
								csvReadertFileInputDelimited_9.readNext();
							}
						}
						csvReadertFileInputDelimited_9.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_9 != 0 && csvReadertFileInputDelimited_9 != null
							&& csvReadertFileInputDelimited_9.readNext()) {
						rowstate_tFileInputDelimited_9.reset();

						rowtFileInputDelimited_9 = csvReadertFileInputDelimited_9.getValues();

						currentLinetFileInputDelimited_9++;

						if (lastLinetFileInputDelimited_9 > -1
								&& currentLinetFileInputDelimited_9 > lastLinetFileInputDelimited_9) {
							break;
						}
						outputLinetFileInputDelimited_9++;
						if (limittFileInputDelimited_9 > 0
								&& outputLinetFileInputDelimited_9 > limittFileInputDelimited_9) {
							break;
						}

						row7 = null;

						row7 = null;

						boolean whetherReject_tFileInputDelimited_9 = false;
						row7 = new row7Struct();
						try {

							char fieldSeparator_tFileInputDelimited_9_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ",").length() > 0) {
								fieldSeparator_tFileInputDelimited_9_ListType = ((String) ",").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_9.length == 1 && ("\015").equals(rowtFileInputDelimited_9[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row7.ID_Station = 0;

								row7.Num = 0;

								row7.Rue = null;

								row7.Ville = null;

								row7.Code_postal = 0;

								row7.Tel = null;

								row7.Contact_mail = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_9 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_9 = 0;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9].length() > 0) {
										try {

											row7.ID_Station = ParserUtils.parseTo_int(
													rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

										} catch (java.lang.Exception ex_tFileInputDelimited_9) {
											globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",
													ex_tFileInputDelimited_9.getMessage());
											rowstate_tFileInputDelimited_9.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"ID_Station", "row7",
															rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
															ex_tFileInputDelimited_9),
													ex_tFileInputDelimited_9));
										}
									} else {

										rowstate_tFileInputDelimited_9.setException(new RuntimeException(
												"Value is empty for column : 'ID_Station' in 'row7' connection, value is invalid or this column should be nullable or have a default value."));

									}

								} else {

									rowstate_tFileInputDelimited_9.setException(new RuntimeException(
											"Value is empty for column : 'ID_Station' in 'row7' connection, value is invalid or this column should be nullable or have a default value."));

								}

								columnIndexWithD_tFileInputDelimited_9 = 1;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9].length() > 0) {
										try {

											row7.Num = ParserUtils.parseTo_int(
													rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

										} catch (java.lang.Exception ex_tFileInputDelimited_9) {
											globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",
													ex_tFileInputDelimited_9.getMessage());
											rowstate_tFileInputDelimited_9.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Num", "row7",
															rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
															ex_tFileInputDelimited_9),
													ex_tFileInputDelimited_9));
										}
									} else {

										rowstate_tFileInputDelimited_9.setException(new RuntimeException(
												"Value is empty for column : 'Num' in 'row7' connection, value is invalid or this column should be nullable or have a default value."));

									}

								} else {

									rowstate_tFileInputDelimited_9.setException(new RuntimeException(
											"Value is empty for column : 'Num' in 'row7' connection, value is invalid or this column should be nullable or have a default value."));

								}

								columnIndexWithD_tFileInputDelimited_9 = 2;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row7.Rue = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {

									row7.Rue = null;

								}

								columnIndexWithD_tFileInputDelimited_9 = 3;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row7.Ville = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {

									row7.Ville = null;

								}

								columnIndexWithD_tFileInputDelimited_9 = 4;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									if (rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9].length() > 0) {
										try {

											row7.Code_postal = ParserUtils.parseTo_int(
													rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9]);

										} catch (java.lang.Exception ex_tFileInputDelimited_9) {
											globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",
													ex_tFileInputDelimited_9.getMessage());
											rowstate_tFileInputDelimited_9.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Code_postal", "row7",
															rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9],
															ex_tFileInputDelimited_9),
													ex_tFileInputDelimited_9));
										}
									} else {

										rowstate_tFileInputDelimited_9.setException(new RuntimeException(
												"Value is empty for column : 'Code_postal' in 'row7' connection, value is invalid or this column should be nullable or have a default value."));

									}

								} else {

									rowstate_tFileInputDelimited_9.setException(new RuntimeException(
											"Value is empty for column : 'Code_postal' in 'row7' connection, value is invalid or this column should be nullable or have a default value."));

								}

								columnIndexWithD_tFileInputDelimited_9 = 5;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row7.Tel = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {

									row7.Tel = null;

								}

								columnIndexWithD_tFileInputDelimited_9 = 6;

								if (columnIndexWithD_tFileInputDelimited_9 < rowtFileInputDelimited_9.length) {

									row7.Contact_mail = rowtFileInputDelimited_9[columnIndexWithD_tFileInputDelimited_9];

								} else {

									row7.Contact_mail = null;

								}

							}

							if (rowstate_tFileInputDelimited_9.getException() != null) {
								throw rowstate_tFileInputDelimited_9.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_9 = true;

							System.err.println(e.getMessage());
							row7 = null;

							globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE", e.getMessage());

						}

						/**
						 * [tFileInputDelimited_9 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_9 main ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						tos_count_tFileInputDelimited_9++;

						/**
						 * [tFileInputDelimited_9 main ] stop
						 */

						/**
						 * [tFileInputDelimited_9 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						/**
						 * [tFileInputDelimited_9 process_data_begin ] stop
						 */
// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tAdvancedHash_row7 main ] start
							 */

							currentComponent = "tAdvancedHash_row7";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row7"

								);
							}

							row7Struct row7_HashRow = new row7Struct();

							row7_HashRow.ID_Station = row7.ID_Station;

							row7_HashRow.Num = row7.Num;

							row7_HashRow.Rue = row7.Rue;

							row7_HashRow.Ville = row7.Ville;

							row7_HashRow.Code_postal = row7.Code_postal;

							row7_HashRow.Tel = row7.Tel;

							row7_HashRow.Contact_mail = row7.Contact_mail;

							tHash_Lookup_row7.put(row7_HashRow);

							tos_count_tAdvancedHash_row7++;

							/**
							 * [tAdvancedHash_row7 main ] stop
							 */

							/**
							 * [tAdvancedHash_row7 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row7";

							/**
							 * [tAdvancedHash_row7 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row7 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row7";

							/**
							 * [tAdvancedHash_row7 process_data_end ] stop
							 */

						} // End of branch "row7"

						/**
						 * [tFileInputDelimited_9 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						/**
						 * [tFileInputDelimited_9 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_9 end ] start
						 */

						currentComponent = "tFileInputDelimited_9";

						nb_line_tFileInputDelimited_9++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_9 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_9 != null) {
							csvReadertFileInputDelimited_9.close();
						}
					}
					if (csvReadertFileInputDelimited_9 != null) {
						globalMap.put("tFileInputDelimited_9_NB_LINE", nb_line_tFileInputDelimited_9);
					}

				}

				ok_Hash.put("tFileInputDelimited_9", true);
				end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_9 finally ] start
				 */

				currentComponent = "tFileInputDelimited_9";

				/**
				 * [tFileInputDelimited_9 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final draft2 draft2Class = new draft2();

		int exitCode = draft2Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = draft2.class.getClassLoader()
					.getResourceAsStream("qdd/draft2_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = draft2.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}
		try {
			errorCode = null;
			tFileInputDelimited_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_3) {
			globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_3.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : draft2");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 339320 characters generated by Talend Open Studio for Data Integration on the
 * October 25, 2024, 10:55:25 AM GMT+01:00
 ************************************************************************************************/